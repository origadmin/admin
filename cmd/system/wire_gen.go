// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"origadmin/application/admin/internal/configs"
	"origadmin/application/admin/internal/loader"
	biz2 "origadmin/application/admin/internal/mods/common/biz"
	service2 "origadmin/application/admin/internal/mods/common/service"
	"origadmin/application/admin/internal/mods/system/biz"
	"origadmin/application/admin/internal/mods/system/dal"
	"origadmin/application/admin/internal/mods/system/server"
	"origadmin/application/admin/internal/mods/system/service"
)

import (
	_ "github.com/origadmin/contrib/consul/config"
	_ "github.com/origadmin/contrib/consul/registry"
	_ "github.com/origadmin/contrib/database"
)

// Injectors from wire.go:

// buildInjectors init kratos application.
func buildInjectors(contextContext context.Context, bootstrap *configs.Bootstrap, logger log.Logger) (*kratos.App, func(), error) {
	registrar, err := loader.NewRegistrar(bootstrap)
	if err != nil {
		return nil, nil, err
	}
	data, cleanup, err := dal.NewData(bootstrap, logger)
	if err != nil {
		return nil, nil, err
	}
	menuRepo := dal.NewMenuRepo(data, logger)
	menuAPIClient := biz.NewMenusClient(menuRepo, logger)
	menuAPIServer := service.NewMenuAPIServer(menuAPIClient)
	roleRepo := dal.NewRoleRepo(data, logger)
	roleAPIClient := biz.NewRolesClient(roleRepo, logger)
	roleAPIServer := service.NewRoleAPIServer(roleAPIClient)
	userRepo := dal.NewUserRepo(data, logger)
	userAPIClient := biz.NewUsersClient(userRepo, logger)
	userAPIServer := service.NewUserAPIServer(userAPIClient)
	loginRepo := dal.NewLoginRepo(data, logger)
	loginAPIClient := biz2.NewLoginClient(loginRepo, logger)
	loginAPIServer := service2.NewLoginAPIServer(loginAPIClient)
	register := &service.RegisterServer{
		Menu:  menuAPIServer,
		Role:  roleAPIServer,
		User:  userAPIServer,
		Login: loginAPIServer,
	}
	v := server.NewSystemServer(register, bootstrap, logger)
	injectorServer := &loader.InjectorServer{
		Logger:    logger,
		Bootstrap: bootstrap,
		Registrar: registrar,
		Servers:   v,
	}
	app := NewApp(contextContext, injectorServer)
	return app, func() {
		cleanup()
	}, nil
}
