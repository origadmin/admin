// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/go-kratos/kratos/v2"
	"github.com/origadmin/runtime/log"
	"origadmin/application/admin/internal/configs"
	"origadmin/application/admin/internal/loader"
	"origadmin/application/admin/internal/mods/system/biz"
	"origadmin/application/admin/internal/mods/system/dal"
	"origadmin/application/admin/internal/mods/system/server"
	"origadmin/application/admin/internal/mods/system/service"
)

import (
	_ "github.com/origadmin/contrib/consul/config"
	_ "github.com/origadmin/contrib/consul/registry"
	_ "github.com/origadmin/contrib/database"
)

// Injectors from wire.go:

// buildInjectors init kratos application.
func buildInjectors(contextContext context.Context, bootstrap *configs.Bootstrap, arg log.KLogger) (*kratos.App, func(), error) {
	v, err := loader.NewRegistrar(bootstrap)
	if err != nil {
		return nil, nil, err
	}
	data, cleanup, err := dal.NewData(bootstrap, arg)
	if err != nil {
		return nil, nil, err
	}
	menuRepo := dal.NewMenuRepo(data, arg)
	menuAPIClient := biz.NewMenusClient(menuRepo, arg)
	menuAPIServer := service.NewMenuAPIServer(menuAPIClient)
	roleRepo := dal.NewRoleRepo(data, arg)
	roleAPIClient := biz.NewRolesClient(roleRepo, arg)
	roleAPIServer := service.NewRoleAPIServer(roleAPIClient)
	userRepo := dal.NewUserRepo(data, arg)
	userAPIClient := biz.NewUsersClient(userRepo, arg)
	userAPIServer := service.NewUserAPIServer(userAPIClient)
	authRepo := dal.NewAuthRepo(data, arg)
	authAPIClient := biz.NewAuthsClient(authRepo, arg)
	authAPIServer := service.NewAuthAPIServer(authAPIClient)
	basisConfig := loader.NewBasisConfig(bootstrap)
	tokenizer, err := loader.NewTokenizer(bootstrap)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	refreshTokenizer := dal.RefreshTokenizer(tokenizer)
	loginData := &dal.LoginData{
		BasisConfig: basisConfig,
		Tokenizer:   refreshTokenizer,
		Menu:        menuRepo,
		Role:        roleRepo,
		User:        userRepo,
	}
	loginRepo := dal.NewLoginRepo(loginData, arg)
	loginAPIClient := biz.NewLoginClient(loginRepo, arg)
	loginAPIServer := service.NewLoginAPIServer(loginAPIClient)
	currentRepo := dal.NewCurrentRepo(data, arg)
	currentAPIClient := biz.NewCurrentClient(currentRepo, arg)
	currentAPIServer := service.NewCurrentAPIServer(currentAPIClient)
	registerServer := &service.RegisterServer{
		Menu:    menuAPIServer,
		Role:    roleAPIServer,
		User:    userAPIServer,
		Auth:    authAPIServer,
		Login:   loginAPIServer,
		Current: currentAPIServer,
	}
	v2 := server.NewRegisterServer(registerServer)
	v3 := server.NewSystemServer(bootstrap, v2, arg)
	injectorServer := &loader.InjectorServer{
		Logger:    arg,
		Bootstrap: bootstrap,
		Registrar: v,
		Servers:   v3,
	}
	app := NewApp(contextContext, injectorServer)
	return app, func() {
		cleanup()
	}, nil
}
