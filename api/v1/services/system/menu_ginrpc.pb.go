// Code generated by protoc-gen-go-ginrpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-ginrpc unknown
// - protoc             (unknown)
// source: system/menu.proto

package system

import (
	context "context"
	gins "github.com/origadmin/contrib/transport/gins"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)

const _ = gins.SupportPackageIsVersion1

const MenuAPI_CreateMenu_FullOperation = "/api.v1.services.system.MenuAPI/CreateMenu"
const MenuAPI_DeleteMenu_FullOperation = "/api.v1.services.system.MenuAPI/DeleteMenu"
const MenuAPI_GetMenu_FullOperation = "/api.v1.services.system.MenuAPI/GetMenu"
const MenuAPI_ListMenus_FullOperation = "/api.v1.services.system.MenuAPI/ListMenus"
const MenuAPI_UpdateMenu_FullOperation = "/api.v1.services.system.MenuAPI/UpdateMenu"

type MenuAPIGINRPCAgent interface {
	CreateMenu(*gins.Context, *CreateMenuRequest)
	DeleteMenu(*gins.Context, *DeleteMenuRequest)
	GetMenu(*gins.Context, *GetMenuRequest)
	ListMenus(*gins.Context, *ListMenusRequest)
	UpdateMenu(*gins.Context, *UpdateMenuRequest)
}

func RegisterMenuAPIGINRPCAgent(router gins.IRouter, srv MenuAPIGINRPCAgent) {
	router.GET("/api/v1/sys/menus", _MenuAPI_ListMenus0_GINRPC_Handler(srv))
	router.GET("/api/v1/sys/menus/:id", _MenuAPI_GetMenu0_GINRPC_Handler(srv))
	router.POST("/api/v1/sys/menus", _MenuAPI_CreateMenu0_GINRPC_Handler(srv))
	router.PUT("/api/v1/sys/menus/:menu.id", _MenuAPI_UpdateMenu0_GINRPC_Handler(srv))
	router.DELETE("/api/v1/sys/menus/:id", _MenuAPI_DeleteMenu0_GINRPC_Handler(srv))
}

func _MenuAPI_ListMenus0_GINRPC_Handler(srv MenuAPIGINRPCAgent) gins.HandlerFunc {
	return func(ctx *gins.Context) {
		var in ListMenusRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.SetOperation(ctx, MenuAPI_ListMenus_OperationName)
		srv.ListMenus(ctx, &in)
	}
}

func _MenuAPI_GetMenu0_GINRPC_Handler(srv MenuAPIGINRPCAgent) gins.HandlerFunc {
	return func(ctx *gins.Context) {
		var in GetMenuRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		if err := gins.BindURI(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.SetOperation(ctx, MenuAPI_GetMenu_OperationName)
		srv.GetMenu(ctx, &in)
	}
}

func _MenuAPI_CreateMenu0_GINRPC_Handler(srv MenuAPIGINRPCAgent) gins.HandlerFunc {
	return func(ctx *gins.Context) {
		var in CreateMenuRequest
		if err := gins.BindBody(ctx, &in.Menu); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.SetOperation(ctx, MenuAPI_CreateMenu_OperationName)
		srv.CreateMenu(ctx, &in)
	}
}

func _MenuAPI_UpdateMenu0_GINRPC_Handler(srv MenuAPIGINRPCAgent) gins.HandlerFunc {
	return func(ctx *gins.Context) {
		var in UpdateMenuRequest
		if err := gins.BindBody(ctx, &in.Menu); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		if err := gins.BindURI(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.SetOperation(ctx, MenuAPI_UpdateMenu_OperationName)
		srv.UpdateMenu(ctx, &in)
	}
}

func _MenuAPI_DeleteMenu0_GINRPC_Handler(srv MenuAPIGINRPCAgent) gins.HandlerFunc {
	return func(ctx *gins.Context) {
		var in DeleteMenuRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		if err := gins.BindURI(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.SetOperation(ctx, MenuAPI_DeleteMenu_OperationName)
		srv.DeleteMenu(ctx, &in)
	}
}
