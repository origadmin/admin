// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             (unknown)
// source: system/auth.proto

package system

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAuthAPIListResources = "/api.v1.services.system.AuthAPI/ListResources"

type AuthAPIHTTPServer interface {
	ListResources(context.Context, *ListResourcesRequest) (*ListResourcesResponse, error)
}

func RegisterAuthAPIHTTPServer(s *http.Server, srv AuthAPIHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/sys/resources", _AuthAPI_ListResources0_HTTP_Handler(srv))
}

func _AuthAPI_ListResources0_HTTP_Handler(srv AuthAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListResourcesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthAPIListResources)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListResources(ctx, req.(*ListResourcesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListResourcesResponse)
		return ctx.Result(200, reply)
	}
}

type AuthAPIHTTPClient interface {
	ListResources(ctx context.Context, req *ListResourcesRequest, opts ...http.CallOption) (rsp *ListResourcesResponse, err error)
}

type AuthAPIHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthAPIHTTPClient(client *http.Client) AuthAPIHTTPClient {
	return &AuthAPIHTTPClientImpl{client}
}

func (c *AuthAPIHTTPClientImpl) ListResources(ctx context.Context, in *ListResourcesRequest, opts ...http.CallOption) (*ListResourcesResponse, error) {
	var out ListResourcesResponse
	pattern := "/v1/sys/resources"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthAPIListResources))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
