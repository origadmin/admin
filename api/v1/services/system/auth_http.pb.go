// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             (unknown)
// source: system/auth.proto

package system

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAuthServiceAuthLogout = "/api.v1.services.system.AuthService/AuthLogout"
const OperationAuthServiceAuthenticate = "/api.v1.services.system.AuthService/Authenticate"
const OperationAuthServiceCreateToken = "/api.v1.services.system.AuthService/CreateToken"
const OperationAuthServiceDestroyToken = "/api.v1.services.system.AuthService/DestroyToken"
const OperationAuthServiceListAuthResources = "/api.v1.services.system.AuthService/ListAuthResources"
const OperationAuthServiceValidateToken = "/api.v1.services.system.AuthService/ValidateToken"

type AuthServiceHTTPServer interface {
	AuthLogout(context.Context, *AuthLogoutRequest) (*AuthLogoutResponse, error)
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
	// CreateToken CreateToken generates a new JWT token for the given user.
	CreateToken(context.Context, *CreateTokenRequest) (*CreateTokenResponse, error)
	// DestroyToken DestroyToken invalidates a JWT token.
	DestroyToken(context.Context, *DestroyTokenRequest) (*DestroyTokenResponse, error)
	ListAuthResources(context.Context, *ListAuthResourcesRequest) (*ListAuthResourcesResponse, error)
	// ValidateToken ValidateToken verifies the validity of a JWT token.
	ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error)
}

func RegisterAuthServiceHTTPServer(s *http.Server, srv AuthServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/sys/auth/resources", _AuthService_ListAuthResources0_HTTP_Handler(srv))
	r.POST("/sys/auth/token", _AuthService_CreateToken0_HTTP_Handler(srv))
	r.GET("/sys/auth/validate", _AuthService_ValidateToken0_HTTP_Handler(srv))
	r.POST("/sys/auth/destroy", _AuthService_DestroyToken0_HTTP_Handler(srv))
	r.POST("/sys/auth/authenticate", _AuthService_Authenticate0_HTTP_Handler(srv))
	r.POST("/sys/auth/logout", _AuthService_AuthLogout0_HTTP_Handler(srv))
}

func _AuthService_ListAuthResources0_HTTP_Handler(srv AuthServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAuthResourcesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthServiceListAuthResources)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAuthResources(ctx, req.(*ListAuthResourcesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAuthResourcesResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthService_CreateToken0_HTTP_Handler(srv AuthServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTokenRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthServiceCreateToken)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateToken(ctx, req.(*CreateTokenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTokenResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthService_ValidateToken0_HTTP_Handler(srv AuthServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ValidateTokenRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthServiceValidateToken)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ValidateToken(ctx, req.(*ValidateTokenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ValidateTokenResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthService_DestroyToken0_HTTP_Handler(srv AuthServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DestroyTokenRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthServiceDestroyToken)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DestroyToken(ctx, req.(*DestroyTokenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DestroyTokenResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthService_Authenticate0_HTTP_Handler(srv AuthServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AuthenticateRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthServiceAuthenticate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Authenticate(ctx, req.(*AuthenticateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AuthenticateResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthService_AuthLogout0_HTTP_Handler(srv AuthServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AuthLogoutRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthServiceAuthLogout)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AuthLogout(ctx, req.(*AuthLogoutRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AuthLogoutResponse)
		return ctx.Result(200, reply)
	}
}

type AuthServiceHTTPClient interface {
	AuthLogout(ctx context.Context, req *AuthLogoutRequest, opts ...http.CallOption) (rsp *AuthLogoutResponse, err error)
	Authenticate(ctx context.Context, req *AuthenticateRequest, opts ...http.CallOption) (rsp *AuthenticateResponse, err error)
	CreateToken(ctx context.Context, req *CreateTokenRequest, opts ...http.CallOption) (rsp *CreateTokenResponse, err error)
	DestroyToken(ctx context.Context, req *DestroyTokenRequest, opts ...http.CallOption) (rsp *DestroyTokenResponse, err error)
	ListAuthResources(ctx context.Context, req *ListAuthResourcesRequest, opts ...http.CallOption) (rsp *ListAuthResourcesResponse, err error)
	ValidateToken(ctx context.Context, req *ValidateTokenRequest, opts ...http.CallOption) (rsp *ValidateTokenResponse, err error)
}

type AuthServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthServiceHTTPClient(client *http.Client) AuthServiceHTTPClient {
	return &AuthServiceHTTPClientImpl{client}
}

func (c *AuthServiceHTTPClientImpl) AuthLogout(ctx context.Context, in *AuthLogoutRequest, opts ...http.CallOption) (*AuthLogoutResponse, error) {
	var out AuthLogoutResponse
	pattern := "/sys/auth/logout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthServiceAuthLogout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AuthServiceHTTPClientImpl) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...http.CallOption) (*AuthenticateResponse, error) {
	var out AuthenticateResponse
	pattern := "/sys/auth/authenticate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthServiceAuthenticate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AuthServiceHTTPClientImpl) CreateToken(ctx context.Context, in *CreateTokenRequest, opts ...http.CallOption) (*CreateTokenResponse, error) {
	var out CreateTokenResponse
	pattern := "/sys/auth/token"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthServiceCreateToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AuthServiceHTTPClientImpl) DestroyToken(ctx context.Context, in *DestroyTokenRequest, opts ...http.CallOption) (*DestroyTokenResponse, error) {
	var out DestroyTokenResponse
	pattern := "/sys/auth/destroy"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthServiceDestroyToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AuthServiceHTTPClientImpl) ListAuthResources(ctx context.Context, in *ListAuthResourcesRequest, opts ...http.CallOption) (*ListAuthResourcesResponse, error) {
	var out ListAuthResourcesResponse
	pattern := "/sys/auth/resources"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthServiceListAuthResources))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AuthServiceHTTPClientImpl) ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...http.CallOption) (*ValidateTokenResponse, error) {
	var out ValidateTokenResponse
	pattern := "/sys/auth/validate"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthServiceValidateToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
