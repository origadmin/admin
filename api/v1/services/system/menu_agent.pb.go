// Code generated by protoc-gen-go-agent. DO NOT EDIT.
// versions:
// - protoc-gen-go-agent unknown
// - protoc             (unknown)
// source: system/menu.proto

package system

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type MenuAPIAgent interface {
	CreateMenu(http.Context, *CreateMenuRequest) (*CreateMenuResponse, error)
	DeleteMenu(http.Context, *DeleteMenuRequest) (*DeleteMenuResponse, error)
	GetMenu(http.Context, *GetMenuRequest) (*GetMenuResponse, error)
	ListMenus(http.Context, *ListMenusRequest) (*ListMenusResponse, error)
	UpdateMenu(http.Context, *UpdateMenuRequest) (*UpdateMenuResponse, error)
}

func RegisterMenuAPIAgent(s *http.Server, srv MenuAPIAgent) {
	r := s.Route("/")
	r.GET("/api/v1/sys/menus", _MenuAPI_ListMenus0_Agent_Handler(srv))
	r.GET("/api/v1/sys/menus/:id", _MenuAPI_GetMenu0_Agent_Handler(srv))
	r.POST("/api/v1/sys/menus", _MenuAPI_CreateMenu0_Agent_Handler(srv))
	r.PUT("/api/v1/sys/menus/:menu.id", _MenuAPI_UpdateMenu0_Agent_Handler(srv))
	r.DELETE("/api/v1/sys/menus/:id", _MenuAPI_DeleteMenu0_Agent_Handler(srv))
}

func _MenuAPI_ListMenus0_Agent_Handler(srv MenuAPIAgent) http.HandlerFunc {
	return func(ctx http.Context) error {
		var in ListMenusRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMenuAPIListMenus)
		h := ctx.Middleware(func(_ context.Context, req interface{}) (interface{}, error) {
			return srv.ListMenus(ctx, req.(*ListMenusRequest))
		})
		_, err := h(ctx, &in)
		if err != nil {
			return err
		}
		return nil
	}
}

func _MenuAPI_GetMenu0_Agent_Handler(srv MenuAPIAgent) http.HandlerFunc {
	return func(ctx http.Context) error {
		var in GetMenuRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMenuAPIGetMenu)
		h := ctx.Middleware(func(_ context.Context, req interface{}) (interface{}, error) {
			return srv.GetMenu(ctx, req.(*GetMenuRequest))
		})
		_, err := h(ctx, &in)
		if err != nil {
			return err
		}
		return nil
	}
}

func _MenuAPI_CreateMenu0_Agent_Handler(srv MenuAPIAgent) http.HandlerFunc {
	return func(ctx http.Context) error {
		var in CreateMenuRequest
		if err := ctx.Bind(&in.Menu); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMenuAPICreateMenu)
		h := ctx.Middleware(func(_ context.Context, req interface{}) (interface{}, error) {
			return srv.CreateMenu(ctx, req.(*CreateMenuRequest))
		})
		_, err := h(ctx, &in)
		if err != nil {
			return err
		}
		return nil
	}
}

func _MenuAPI_UpdateMenu0_Agent_Handler(srv MenuAPIAgent) http.HandlerFunc {
	return func(ctx http.Context) error {
		var in UpdateMenuRequest
		if err := ctx.Bind(&in.Menu); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMenuAPIUpdateMenu)
		h := ctx.Middleware(func(_ context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMenu(ctx, req.(*UpdateMenuRequest))
		})
		_, err := h(ctx, &in)
		if err != nil {
			return err
		}
		return nil
	}
}

func _MenuAPI_DeleteMenu0_Agent_Handler(srv MenuAPIAgent) http.HandlerFunc {
	return func(ctx http.Context) error {
		var in DeleteMenuRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMenuAPIDeleteMenu)
		h := ctx.Middleware(func(_ context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteMenu(ctx, req.(*DeleteMenuRequest))
		})
		_, err := h(ctx, &in)
		if err != nil {
			return err
		}
		return nil
	}
}
