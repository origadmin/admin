// Code generated by protoc-gen-go-agent. DO NOT EDIT.
// versions:
// - protoc-gen-go-agent unknown
// - protoc             (unknown)
// source: system/menu.proto

package system

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	agent "github.com/origadmin/runtime/agent"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1
const _ = agent.ApiVersionV1

type MenuAPIAgent interface {
	CreateMenu(context.Context, *CreateMenuRequest) (*CreateMenuResponse, error)
	DeleteMenu(context.Context, *DeleteMenuRequest) (*DeleteMenuResponse, error)
	GetMenu(context.Context, *GetMenuRequest) (*GetMenuResponse, error)
	ListMenus(context.Context, *ListMenusRequest) (*ListMenusResponse, error)
	UpdateMenu(context.Context, *UpdateMenuRequest) (*UpdateMenuResponse, error)
}

func _MenuAPI_ListMenus0_HTTPAgent_Handler(srv MenuAPIAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in ListMenusRequest
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationMenuAPIListMenus)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.ListMenus(ctx, req.(*ListMenusRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListMenusResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func _MenuAPI_GetMenu0_HTTPAgent_Handler(srv MenuAPIAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in GetMenuRequest
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		if err := cctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationMenuAPIGetMenu)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.GetMenu(ctx, req.(*GetMenuRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMenuResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func _MenuAPI_CreateMenu0_HTTPAgent_Handler(srv MenuAPIAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in CreateMenuRequest
		if err := cctx.Bind(&in.Menu); err != nil {
			return err
		}
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationMenuAPICreateMenu)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.CreateMenu(ctx, req.(*CreateMenuRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateMenuResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func _MenuAPI_UpdateMenu0_HTTPAgent_Handler(srv MenuAPIAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in UpdateMenuRequest
		if err := cctx.Bind(&in.Menu); err != nil {
			return err
		}
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		if err := cctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationMenuAPIUpdateMenu)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.UpdateMenu(ctx, req.(*UpdateMenuRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateMenuResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func _MenuAPI_DeleteMenu0_HTTPAgent_Handler(srv MenuAPIAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in DeleteMenuRequest
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		if err := cctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationMenuAPIDeleteMenu)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.DeleteMenu(ctx, req.(*DeleteMenuRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteMenuResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func RegisterMenuAPIAgent(ag agent.HTTPAgent, srv MenuAPIAgent) {
	r := ag.Route()
	r.GET("/sys/menus", _MenuAPI_ListMenus0_HTTPAgent_Handler(srv))
	r.GET("/sys/menus/:id", _MenuAPI_GetMenu0_HTTPAgent_Handler(srv))
	r.POST("/sys/menus", _MenuAPI_CreateMenu0_HTTPAgent_Handler(srv))
	r.PUT("/sys/menus/:menu.id", _MenuAPI_UpdateMenu0_HTTPAgent_Handler(srv))
	r.DELETE("/sys/menus/:id", _MenuAPI_DeleteMenu0_HTTPAgent_Handler(srv))
}
