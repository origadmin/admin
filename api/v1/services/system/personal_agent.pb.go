// Code generated by protoc-gen-go-agent. DO NOT EDIT.
// versions:
// - protoc-gen-go-agent unknown
// - protoc             (unknown)
// source: system/personal.proto

package system

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	agent "github.com/origadmin/runtime/agent"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1
const _ = agent.ApiVersionV1

type PersonalServiceAgent interface {
	// GetPersonalProfile GetPersonalProfile Update the personal user information
	GetPersonalProfile(context.Context, *GetPersonalProfileRequest) (*GetPersonalProfileResponse, error)
	// ListPersonalResources ListPersonalResources List the personal user's menu
	ListPersonalResources(context.Context, *ListPersonalResourcesRequest) (*ListPersonalResourcesResponse, error)
	// ListPersonalRoles ListPersonalResources List the personal user's menu
	ListPersonalRoles(context.Context, *ListPersonalRolesRequest) (*ListPersonalRolesResponse, error)
	PersonalLogout(context.Context, *PersonalLogoutRequest) (*PersonalLogoutResponse, error)
	// RefreshPersonalToken RefreshPersonalToken Refresh the personal user's token
	RefreshPersonalToken(context.Context, *RefreshPersonalTokenRequest) (*RefreshPersonalTokenResponse, error)
	// UpdatePersonalPassword UpdatePersonalProfilePassword The user changes the password
	UpdatePersonalPassword(context.Context, *UpdatePersonalPasswordRequest) (*UpdatePersonalPasswordResponse, error)
	// UpdatePersonalProfile UpdatePersonalProfile Update the personal user information
	UpdatePersonalProfile(context.Context, *UpdatePersonalProfileRequest) (*UpdatePersonalProfileResponse, error)
	// UpdatePersonalSetting UpdatePersonalSetting User settings are saved
	UpdatePersonalSetting(context.Context, *UpdatePersonalSettingRequest) (*UpdatePersonalSettingResponse, error)
}

func _PersonalService_PersonalLogout0_HTTPAgent_Handler(srv PersonalServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in PersonalLogoutRequest
		if err := cctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationPersonalServicePersonalLogout)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.PersonalLogout(ctx, req.(*PersonalLogoutRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PersonalLogoutResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func _PersonalService_UpdatePersonalPassword0_HTTPAgent_Handler(srv PersonalServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in UpdatePersonalPasswordRequest
		if err := cctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationPersonalServiceUpdatePersonalPassword)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.UpdatePersonalPassword(ctx, req.(*UpdatePersonalPasswordRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePersonalPasswordResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func _PersonalService_UpdatePersonalProfile0_HTTPAgent_Handler(srv PersonalServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in UpdatePersonalProfileRequest
		if err := cctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationPersonalServiceUpdatePersonalProfile)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.UpdatePersonalProfile(ctx, req.(*UpdatePersonalProfileRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePersonalProfileResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func _PersonalService_GetPersonalProfile0_HTTPAgent_Handler(srv PersonalServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in GetPersonalProfileRequest
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationPersonalServiceGetPersonalProfile)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.GetPersonalProfile(ctx, req.(*GetPersonalProfileRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPersonalProfileResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func _PersonalService_ListPersonalResources0_HTTPAgent_Handler(srv PersonalServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in ListPersonalResourcesRequest
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationPersonalServiceListPersonalResources)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.ListPersonalResources(ctx, req.(*ListPersonalResourcesRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPersonalResourcesResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func _PersonalService_ListPersonalRoles0_HTTPAgent_Handler(srv PersonalServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in ListPersonalRolesRequest
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationPersonalServiceListPersonalRoles)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.ListPersonalRoles(ctx, req.(*ListPersonalRolesRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPersonalRolesResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func _PersonalService_UpdatePersonalSetting0_HTTPAgent_Handler(srv PersonalServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in UpdatePersonalSettingRequest
		if err := cctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationPersonalServiceUpdatePersonalSetting)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.UpdatePersonalSetting(ctx, req.(*UpdatePersonalSettingRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePersonalSettingResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func _PersonalService_RefreshPersonalToken0_HTTPAgent_Handler(srv PersonalServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in RefreshPersonalTokenRequest
		if err := cctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationPersonalServiceRefreshPersonalToken)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.RefreshPersonalToken(ctx, req.(*RefreshPersonalTokenRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RefreshPersonalTokenResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func RegisterPersonalServiceAgent(ag agent.HTTPAgent, srv PersonalServiceAgent) {
	r := ag.Route()
	r.POST("/sys/personal/logout", _PersonalService_PersonalLogout0_HTTPAgent_Handler(srv))
	r.PUT("/sys/personal/password", _PersonalService_UpdatePersonalPassword0_HTTPAgent_Handler(srv))
	r.PUT("/sys/personal/profile", _PersonalService_UpdatePersonalProfile0_HTTPAgent_Handler(srv))
	r.GET("/sys/personal/profile", _PersonalService_GetPersonalProfile0_HTTPAgent_Handler(srv))
	r.GET("/sys/personal/menus", _PersonalService_ListPersonalResources0_HTTPAgent_Handler(srv))
	r.GET("/sys/personal/roles", _PersonalService_ListPersonalRoles0_HTTPAgent_Handler(srv))
	r.PUT("/sys/personal/setting", _PersonalService_UpdatePersonalSetting0_HTTPAgent_Handler(srv))
	r.POST("/sys/personal/token/refresh", _PersonalService_RefreshPersonalToken0_HTTPAgent_Handler(srv))
}
