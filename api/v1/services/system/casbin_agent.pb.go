// Code generated by protoc-gen-go-agent. DO NOT EDIT.
// versions:
// - protoc-gen-go-agent unknown
// - protoc             (unknown)
// source: system/casbin.proto

package system

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	agent "github.com/origadmin/runtime/agent"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1
const _ = agent.ApiVersionV1

type CasbinSourceServiceAgent interface {
	ListGroupings(context.Context, *ListGroupingsRequest) (*ListGroupingsResponse, error)
	ListPolicies(context.Context, *ListPoliciesRequest) (*ListPoliciesResponse, error)
	WatchUpdate(context.Context, *WatchUpdateRequest) (*WatchUpdateResponse, error)
}

func _CasbinSourceService_ListPolicies0_HTTPAgent_Handler(srv CasbinSourceServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in ListPoliciesRequest
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationCasbinSourceServiceListPolicies)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.ListPolicies(ctx, req.(*ListPoliciesRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPoliciesResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func _CasbinSourceService_ListGroupings0_HTTPAgent_Handler(srv CasbinSourceServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in ListGroupingsRequest
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationCasbinSourceServiceListGroupings)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.ListGroupings(ctx, req.(*ListGroupingsRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListGroupingsResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func _CasbinSourceService_WatchUpdate0_HTTPAgent_Handler(srv CasbinSourceServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in WatchUpdateRequest
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationCasbinSourceServiceWatchUpdate)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.WatchUpdate(ctx, req.(*WatchUpdateRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*WatchUpdateResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func RegisterCasbinSourceServiceAgent(ag agent.HTTPAgent, srv CasbinSourceServiceAgent) {
	r := ag.Route()
	r.GET("/casbin/policies", _CasbinSourceService_ListPolicies0_HTTPAgent_Handler(srv))
	r.GET("/casbin/groupings", _CasbinSourceService_ListGroupings0_HTTPAgent_Handler(srv))
	r.GET("/casbin/watch", _CasbinSourceService_WatchUpdate0_HTTPAgent_Handler(srv))
}
