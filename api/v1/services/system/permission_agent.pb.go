// Code generated by protoc-gen-go-agent. DO NOT EDIT.
// versions:
// - protoc-gen-go-agent unknown
// - protoc             (unknown)
// source: system/permission.proto

package system

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	agent "github.com/origadmin/runtime/agent"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1
const _ = agent.ApiVersionV1

type PermissionServiceAgent interface {
	CreatePermission(context.Context, *CreatePermissionRequest) (*CreatePermissionResponse, error)
	DeletePermission(context.Context, *DeletePermissionRequest) (*DeletePermissionResponse, error)
	GetPermission(context.Context, *GetPermissionRequest) (*GetPermissionResponse, error)
	ListPermissions(context.Context, *ListPermissionsRequest) (*ListPermissionsResponse, error)
	UpdatePermission(context.Context, *UpdatePermissionRequest) (*UpdatePermissionResponse, error)
}

func _PermissionService_ListPermissions0_HTTPAgent_Handler(srv PermissionServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in ListPermissionsRequest
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationPermissionServiceListPermissions)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.ListPermissions(ctx, req.(*ListPermissionsRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPermissionsResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func _PermissionService_GetPermission0_HTTPAgent_Handler(srv PermissionServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in GetPermissionRequest
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		if err := cctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationPermissionServiceGetPermission)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.GetPermission(ctx, req.(*GetPermissionRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPermissionResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func _PermissionService_CreatePermission0_HTTPAgent_Handler(srv PermissionServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in CreatePermissionRequest
		if err := cctx.Bind(&in.Permission); err != nil {
			return err
		}
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationPermissionServiceCreatePermission)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.CreatePermission(ctx, req.(*CreatePermissionRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePermissionResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func _PermissionService_UpdatePermission0_HTTPAgent_Handler(srv PermissionServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in UpdatePermissionRequest
		if err := cctx.Bind(&in.Permission); err != nil {
			return err
		}
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		if err := cctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationPermissionServiceUpdatePermission)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.UpdatePermission(ctx, req.(*UpdatePermissionRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePermissionResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func _PermissionService_DeletePermission0_HTTPAgent_Handler(srv PermissionServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in DeletePermissionRequest
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		if err := cctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationPermissionServiceDeletePermission)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.DeletePermission(ctx, req.(*DeletePermissionRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeletePermissionResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func RegisterPermissionServiceAgent(ag agent.HTTPAgent, srv PermissionServiceAgent) {
	r := ag.Route()
	r.GET("/sys/permissions", _PermissionService_ListPermissions0_HTTPAgent_Handler(srv))
	r.GET("/sys/permissions/:id", _PermissionService_GetPermission0_HTTPAgent_Handler(srv))
	r.POST("/sys/permissions", _PermissionService_CreatePermission0_HTTPAgent_Handler(srv))
	r.PUT("/sys/permissions/:permission.id", _PermissionService_UpdatePermission0_HTTPAgent_Handler(srv))
	r.DELETE("/sys/permissions/:id", _PermissionService_DeletePermission0_HTTPAgent_Handler(srv))
}
