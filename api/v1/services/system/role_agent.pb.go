// Code generated by protoc-gen-go-agent. DO NOT EDIT.
// versions:
// - protoc-gen-go-agent unknown
// - protoc             (unknown)
// source: system/role.proto

package system

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	agent "github.com/origadmin/runtime/agent"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1
const _ = agent.ApiVersionV1

type RoleAPIAgent interface {
	CreateRole(http.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	DeleteRole(http.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	GetRole(http.Context, *GetRoleRequest) (*GetRoleResponse, error)
	ListRoles(http.Context, *ListRolesRequest) (*ListRolesResponse, error)
	UpdateRole(http.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error)
}

func _RoleAPI_ListRoles0_HTTPAgent_Handler(srv RoleAPIAgent) http.HandlerFunc {
	return func(ctx http.Context) error {
		var in ListRolesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleAPIListRoles)
		h := ctx.Middleware(func(_ context.Context, req interface{}) (interface{}, error) {
			return srv.ListRoles(ctx, req.(*ListRolesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRolesResponse)
		if reply == nil {
			return nil
		}
		return ctx.Result(200, reply)
	}
}

func _RoleAPI_GetRole0_HTTPAgent_Handler(srv RoleAPIAgent) http.HandlerFunc {
	return func(ctx http.Context) error {
		var in GetRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleAPIGetRole)
		h := ctx.Middleware(func(_ context.Context, req interface{}) (interface{}, error) {
			return srv.GetRole(ctx, req.(*GetRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRoleResponse)
		if reply == nil {
			return nil
		}
		return ctx.Result(200, reply)
	}
}

func _RoleAPI_CreateRole0_HTTPAgent_Handler(srv RoleAPIAgent) http.HandlerFunc {
	return func(ctx http.Context) error {
		var in CreateRoleRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleAPICreateRole)
		h := ctx.Middleware(func(_ context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRole(ctx, req.(*CreateRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRoleResponse)
		if reply == nil {
			return nil
		}
		return ctx.Result(200, reply)
	}
}

func _RoleAPI_UpdateRole0_HTTPAgent_Handler(srv RoleAPIAgent) http.HandlerFunc {
	return func(ctx http.Context) error {
		var in UpdateRoleRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleAPIUpdateRole)
		h := ctx.Middleware(func(_ context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRole(ctx, req.(*UpdateRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRoleResponse)
		if reply == nil {
			return nil
		}
		return ctx.Result(200, reply)
	}
}

func _RoleAPI_DeleteRole0_HTTPAgent_Handler(srv RoleAPIAgent) http.HandlerFunc {
	return func(ctx http.Context) error {
		var in DeleteRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleAPIDeleteRole)
		h := ctx.Middleware(func(_ context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRole(ctx, req.(*DeleteRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRoleResponse)
		if reply == nil {
			return nil
		}
		return ctx.Result(200, reply)
	}
}

func RegisterRoleAPIAgent(ag agent.HTTPAgent, srv RoleAPIAgent) {
	r := ag.Route()
	r.GET("/sys/roles", _RoleAPI_ListRoles0_HTTPAgent_Handler(srv))
	r.GET("/sys/roles/:id", _RoleAPI_GetRole0_HTTPAgent_Handler(srv))
	r.POST("/sys/roles", _RoleAPI_CreateRole0_HTTPAgent_Handler(srv))
	r.PUT("/sys/roles/:role.id", _RoleAPI_UpdateRole0_HTTPAgent_Handler(srv))
	r.DELETE("/sys/roles/:id", _RoleAPI_DeleteRole0_HTTPAgent_Handler(srv))
}
