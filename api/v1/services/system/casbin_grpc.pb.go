// Copyright 2018 The casbin Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: system/casbin.proto

package system

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CasbinSourceService_ListPolicies_FullMethodName  = "/api.v1.services.system.CasbinSourceService/ListPolicies"
	CasbinSourceService_ListGroupings_FullMethodName = "/api.v1.services.system.CasbinSourceService/ListGroupings"
	CasbinSourceService_StreamRules_FullMethodName   = "/api.v1.services.system.CasbinSourceService/StreamRules"
	CasbinSourceService_WatchUpdate_FullMethodName   = "/api.v1.services.system.CasbinSourceService/WatchUpdate"
)

// CasbinSourceServiceClient is the client API for CasbinSourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The Casbin source service definition.
type CasbinSourceServiceClient interface {
	ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*ListPoliciesResponse, error)
	ListGroupings(ctx context.Context, in *ListGroupingsRequest, opts ...grpc.CallOption) (*ListGroupingsResponse, error)
	StreamRules(ctx context.Context, in *StreamRulesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamRulesResponse], error)
	WatchUpdate(ctx context.Context, in *WatchUpdateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchUpdateResponse], error)
}

type casbinSourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCasbinSourceServiceClient(cc grpc.ClientConnInterface) CasbinSourceServiceClient {
	return &casbinSourceServiceClient{cc}
}

func (c *casbinSourceServiceClient) ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*ListPoliciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPoliciesResponse)
	err := c.cc.Invoke(ctx, CasbinSourceService_ListPolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinSourceServiceClient) ListGroupings(ctx context.Context, in *ListGroupingsRequest, opts ...grpc.CallOption) (*ListGroupingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGroupingsResponse)
	err := c.cc.Invoke(ctx, CasbinSourceService_ListGroupings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinSourceServiceClient) StreamRules(ctx context.Context, in *StreamRulesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamRulesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CasbinSourceService_ServiceDesc.Streams[0], CasbinSourceService_StreamRules_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamRulesRequest, StreamRulesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CasbinSourceService_StreamRulesClient = grpc.ServerStreamingClient[StreamRulesResponse]

func (c *casbinSourceServiceClient) WatchUpdate(ctx context.Context, in *WatchUpdateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchUpdateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CasbinSourceService_ServiceDesc.Streams[1], CasbinSourceService_WatchUpdate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WatchUpdateRequest, WatchUpdateResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CasbinSourceService_WatchUpdateClient = grpc.ServerStreamingClient[WatchUpdateResponse]

// CasbinSourceServiceServer is the server API for CasbinSourceService service.
// All implementations must embed UnimplementedCasbinSourceServiceServer
// for forward compatibility.
//
// The Casbin source service definition.
type CasbinSourceServiceServer interface {
	ListPolicies(context.Context, *ListPoliciesRequest) (*ListPoliciesResponse, error)
	ListGroupings(context.Context, *ListGroupingsRequest) (*ListGroupingsResponse, error)
	StreamRules(*StreamRulesRequest, grpc.ServerStreamingServer[StreamRulesResponse]) error
	WatchUpdate(*WatchUpdateRequest, grpc.ServerStreamingServer[WatchUpdateResponse]) error
	mustEmbedUnimplementedCasbinSourceServiceServer()
}

// UnimplementedCasbinSourceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCasbinSourceServiceServer struct{}

func (UnimplementedCasbinSourceServiceServer) ListPolicies(context.Context, *ListPoliciesRequest) (*ListPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicies not implemented")
}
func (UnimplementedCasbinSourceServiceServer) ListGroupings(context.Context, *ListGroupingsRequest) (*ListGroupingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupings not implemented")
}
func (UnimplementedCasbinSourceServiceServer) StreamRules(*StreamRulesRequest, grpc.ServerStreamingServer[StreamRulesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamRules not implemented")
}
func (UnimplementedCasbinSourceServiceServer) WatchUpdate(*WatchUpdateRequest, grpc.ServerStreamingServer[WatchUpdateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method WatchUpdate not implemented")
}
func (UnimplementedCasbinSourceServiceServer) mustEmbedUnimplementedCasbinSourceServiceServer() {}
func (UnimplementedCasbinSourceServiceServer) testEmbeddedByValue()                             {}

// UnsafeCasbinSourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CasbinSourceServiceServer will
// result in compilation errors.
type UnsafeCasbinSourceServiceServer interface {
	mustEmbedUnimplementedCasbinSourceServiceServer()
}

func RegisterCasbinSourceServiceServer(s grpc.ServiceRegistrar, srv CasbinSourceServiceServer) {
	// If the following call pancis, it indicates UnimplementedCasbinSourceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CasbinSourceService_ServiceDesc, srv)
}

func _CasbinSourceService_ListPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinSourceServiceServer).ListPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinSourceService_ListPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinSourceServiceServer).ListPolicies(ctx, req.(*ListPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinSourceService_ListGroupings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinSourceServiceServer).ListGroupings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinSourceService_ListGroupings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinSourceServiceServer).ListGroupings(ctx, req.(*ListGroupingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinSourceService_StreamRules_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRulesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CasbinSourceServiceServer).StreamRules(m, &grpc.GenericServerStream[StreamRulesRequest, StreamRulesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CasbinSourceService_StreamRulesServer = grpc.ServerStreamingServer[StreamRulesResponse]

func _CasbinSourceService_WatchUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchUpdateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CasbinSourceServiceServer).WatchUpdate(m, &grpc.GenericServerStream[WatchUpdateRequest, WatchUpdateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CasbinSourceService_WatchUpdateServer = grpc.ServerStreamingServer[WatchUpdateResponse]

// CasbinSourceService_ServiceDesc is the grpc.ServiceDesc for CasbinSourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CasbinSourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.services.system.CasbinSourceService",
	HandlerType: (*CasbinSourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPolicies",
			Handler:    _CasbinSourceService_ListPolicies_Handler,
		},
		{
			MethodName: "ListGroupings",
			Handler:    _CasbinSourceService_ListGroupings_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRules",
			Handler:       _CasbinSourceService_StreamRules_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchUpdate",
			Handler:       _CasbinSourceService_WatchUpdate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "system/casbin.proto",
}
