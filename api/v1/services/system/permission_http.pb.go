// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             (unknown)
// source: system/permission.proto

package system

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPermissionServiceCreatePermission = "/api.v1.services.system.PermissionService/CreatePermission"
const OperationPermissionServiceDeletePermission = "/api.v1.services.system.PermissionService/DeletePermission"
const OperationPermissionServiceGetPermission = "/api.v1.services.system.PermissionService/GetPermission"
const OperationPermissionServiceListPermissions = "/api.v1.services.system.PermissionService/ListPermissions"
const OperationPermissionServiceUpdatePermission = "/api.v1.services.system.PermissionService/UpdatePermission"

type PermissionServiceHTTPServer interface {
	CreatePermission(context.Context, *CreatePermissionRequest) (*CreatePermissionResponse, error)
	DeletePermission(context.Context, *DeletePermissionRequest) (*DeletePermissionResponse, error)
	GetPermission(context.Context, *GetPermissionRequest) (*GetPermissionResponse, error)
	ListPermissions(context.Context, *ListPermissionsRequest) (*ListPermissionsResponse, error)
	UpdatePermission(context.Context, *UpdatePermissionRequest) (*UpdatePermissionResponse, error)
}

func RegisterPermissionServiceHTTPServer(s *http.Server, srv PermissionServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/sys/permissions", _PermissionService_ListPermissions0_HTTP_Handler(srv))
	r.GET("/sys/permissions/{id}", _PermissionService_GetPermission0_HTTP_Handler(srv))
	r.POST("/sys/permissions", _PermissionService_CreatePermission0_HTTP_Handler(srv))
	r.PUT("/sys/permissions/{permission.id}", _PermissionService_UpdatePermission0_HTTP_Handler(srv))
	r.DELETE("/sys/permissions/{id}", _PermissionService_DeletePermission0_HTTP_Handler(srv))
}

func _PermissionService_ListPermissions0_HTTP_Handler(srv PermissionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPermissionsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPermissionServiceListPermissions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPermissions(ctx, req.(*ListPermissionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPermissionsResponse)
		return ctx.Result(200, reply)
	}
}

func _PermissionService_GetPermission0_HTTP_Handler(srv PermissionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPermissionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPermissionServiceGetPermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPermission(ctx, req.(*GetPermissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPermissionResponse)
		return ctx.Result(200, reply)
	}
}

func _PermissionService_CreatePermission0_HTTP_Handler(srv PermissionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePermissionRequest
		if err := ctx.Bind(&in.Permission); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPermissionServiceCreatePermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePermission(ctx, req.(*CreatePermissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePermissionResponse)
		return ctx.Result(200, reply)
	}
}

func _PermissionService_UpdatePermission0_HTTP_Handler(srv PermissionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePermissionRequest
		if err := ctx.Bind(&in.Permission); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPermissionServiceUpdatePermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePermission(ctx, req.(*UpdatePermissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePermissionResponse)
		return ctx.Result(200, reply)
	}
}

func _PermissionService_DeletePermission0_HTTP_Handler(srv PermissionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeletePermissionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPermissionServiceDeletePermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePermission(ctx, req.(*DeletePermissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeletePermissionResponse)
		return ctx.Result(200, reply)
	}
}

type PermissionServiceHTTPClient interface {
	CreatePermission(ctx context.Context, req *CreatePermissionRequest, opts ...http.CallOption) (rsp *CreatePermissionResponse, err error)
	DeletePermission(ctx context.Context, req *DeletePermissionRequest, opts ...http.CallOption) (rsp *DeletePermissionResponse, err error)
	GetPermission(ctx context.Context, req *GetPermissionRequest, opts ...http.CallOption) (rsp *GetPermissionResponse, err error)
	ListPermissions(ctx context.Context, req *ListPermissionsRequest, opts ...http.CallOption) (rsp *ListPermissionsResponse, err error)
	UpdatePermission(ctx context.Context, req *UpdatePermissionRequest, opts ...http.CallOption) (rsp *UpdatePermissionResponse, err error)
}

type PermissionServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewPermissionServiceHTTPClient(client *http.Client) PermissionServiceHTTPClient {
	return &PermissionServiceHTTPClientImpl{client}
}

func (c *PermissionServiceHTTPClientImpl) CreatePermission(ctx context.Context, in *CreatePermissionRequest, opts ...http.CallOption) (*CreatePermissionResponse, error) {
	var out CreatePermissionResponse
	pattern := "/sys/permissions"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPermissionServiceCreatePermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Permission, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PermissionServiceHTTPClientImpl) DeletePermission(ctx context.Context, in *DeletePermissionRequest, opts ...http.CallOption) (*DeletePermissionResponse, error) {
	var out DeletePermissionResponse
	pattern := "/sys/permissions/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPermissionServiceDeletePermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PermissionServiceHTTPClientImpl) GetPermission(ctx context.Context, in *GetPermissionRequest, opts ...http.CallOption) (*GetPermissionResponse, error) {
	var out GetPermissionResponse
	pattern := "/sys/permissions/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPermissionServiceGetPermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PermissionServiceHTTPClientImpl) ListPermissions(ctx context.Context, in *ListPermissionsRequest, opts ...http.CallOption) (*ListPermissionsResponse, error) {
	var out ListPermissionsResponse
	pattern := "/sys/permissions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPermissionServiceListPermissions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PermissionServiceHTTPClientImpl) UpdatePermission(ctx context.Context, in *UpdatePermissionRequest, opts ...http.CallOption) (*UpdatePermissionResponse, error) {
	var out UpdatePermissionResponse
	pattern := "/sys/permissions/{permission.id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPermissionServiceUpdatePermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Permission, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
