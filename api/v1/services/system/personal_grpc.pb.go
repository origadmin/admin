// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: system/personal.proto

package system

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PersonalService_GetPersonalProfile_FullMethodName     = "/api.v1.services.system.PersonalService/GetPersonalProfile"
	PersonalService_ListPersonalResources_FullMethodName  = "/api.v1.services.system.PersonalService/ListPersonalResources"
	PersonalService_ListPersonalRoles_FullMethodName      = "/api.v1.services.system.PersonalService/ListPersonalRoles"
	PersonalService_PersonalLogout_FullMethodName         = "/api.v1.services.system.PersonalService/PersonalLogout"
	PersonalService_RefreshPersonalToken_FullMethodName   = "/api.v1.services.system.PersonalService/RefreshPersonalToken"
	PersonalService_UpdatePersonalPassword_FullMethodName = "/api.v1.services.system.PersonalService/UpdatePersonalPassword"
	PersonalService_UpdatePersonalProfile_FullMethodName  = "/api.v1.services.system.PersonalService/UpdatePersonalProfile"
	PersonalService_UpdatePersonalSetting_FullMethodName  = "/api.v1.services.system.PersonalService/UpdatePersonalSetting"
)

// PersonalServiceClient is the client API for PersonalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PersonalService Personal user service
type PersonalServiceClient interface {
	// GetPersonalProfile Update the personal user information
	GetPersonalProfile(ctx context.Context, in *GetPersonalProfileRequest, opts ...grpc.CallOption) (*GetPersonalProfileResponse, error)
	// ListPersonalResources List the personal user's menu
	ListPersonalResources(ctx context.Context, in *ListPersonalResourcesRequest, opts ...grpc.CallOption) (*ListPersonalResourcesResponse, error)
	// ListPersonalResources List the personal user's menu
	ListPersonalRoles(ctx context.Context, in *ListPersonalRolesRequest, opts ...grpc.CallOption) (*ListPersonalRolesResponse, error)
	// PersonalLogout Personal user logs out
	PersonalLogout(ctx context.Context, in *PersonalLogoutRequest, opts ...grpc.CallOption) (*PersonalLogoutResponse, error)
	// RefreshPersonalToken Refresh the personal user's token
	RefreshPersonalToken(ctx context.Context, in *RefreshPersonalTokenRequest, opts ...grpc.CallOption) (*RefreshPersonalTokenResponse, error)
	// UpdatePersonalProfilePassword The user changes the password
	UpdatePersonalPassword(ctx context.Context, in *UpdatePersonalPasswordRequest, opts ...grpc.CallOption) (*UpdatePersonalPasswordResponse, error)
	// UpdatePersonalProfile Update the personal user information
	UpdatePersonalProfile(ctx context.Context, in *UpdatePersonalProfileRequest, opts ...grpc.CallOption) (*UpdatePersonalProfileResponse, error)
	// UpdatePersonalSetting User settings are saved
	UpdatePersonalSetting(ctx context.Context, in *UpdatePersonalSettingRequest, opts ...grpc.CallOption) (*UpdatePersonalSettingResponse, error)
}

type personalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonalServiceClient(cc grpc.ClientConnInterface) PersonalServiceClient {
	return &personalServiceClient{cc}
}

func (c *personalServiceClient) GetPersonalProfile(ctx context.Context, in *GetPersonalProfileRequest, opts ...grpc.CallOption) (*GetPersonalProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPersonalProfileResponse)
	err := c.cc.Invoke(ctx, PersonalService_GetPersonalProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalServiceClient) ListPersonalResources(ctx context.Context, in *ListPersonalResourcesRequest, opts ...grpc.CallOption) (*ListPersonalResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPersonalResourcesResponse)
	err := c.cc.Invoke(ctx, PersonalService_ListPersonalResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalServiceClient) ListPersonalRoles(ctx context.Context, in *ListPersonalRolesRequest, opts ...grpc.CallOption) (*ListPersonalRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPersonalRolesResponse)
	err := c.cc.Invoke(ctx, PersonalService_ListPersonalRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalServiceClient) PersonalLogout(ctx context.Context, in *PersonalLogoutRequest, opts ...grpc.CallOption) (*PersonalLogoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PersonalLogoutResponse)
	err := c.cc.Invoke(ctx, PersonalService_PersonalLogout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalServiceClient) RefreshPersonalToken(ctx context.Context, in *RefreshPersonalTokenRequest, opts ...grpc.CallOption) (*RefreshPersonalTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshPersonalTokenResponse)
	err := c.cc.Invoke(ctx, PersonalService_RefreshPersonalToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalServiceClient) UpdatePersonalPassword(ctx context.Context, in *UpdatePersonalPasswordRequest, opts ...grpc.CallOption) (*UpdatePersonalPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePersonalPasswordResponse)
	err := c.cc.Invoke(ctx, PersonalService_UpdatePersonalPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalServiceClient) UpdatePersonalProfile(ctx context.Context, in *UpdatePersonalProfileRequest, opts ...grpc.CallOption) (*UpdatePersonalProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePersonalProfileResponse)
	err := c.cc.Invoke(ctx, PersonalService_UpdatePersonalProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalServiceClient) UpdatePersonalSetting(ctx context.Context, in *UpdatePersonalSettingRequest, opts ...grpc.CallOption) (*UpdatePersonalSettingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePersonalSettingResponse)
	err := c.cc.Invoke(ctx, PersonalService_UpdatePersonalSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonalServiceServer is the server API for PersonalService service.
// All implementations must embed UnimplementedPersonalServiceServer
// for forward compatibility.
//
// PersonalService Personal user service
type PersonalServiceServer interface {
	// GetPersonalProfile Update the personal user information
	GetPersonalProfile(context.Context, *GetPersonalProfileRequest) (*GetPersonalProfileResponse, error)
	// ListPersonalResources List the personal user's menu
	ListPersonalResources(context.Context, *ListPersonalResourcesRequest) (*ListPersonalResourcesResponse, error)
	// ListPersonalResources List the personal user's menu
	ListPersonalRoles(context.Context, *ListPersonalRolesRequest) (*ListPersonalRolesResponse, error)
	// PersonalLogout Personal user logs out
	PersonalLogout(context.Context, *PersonalLogoutRequest) (*PersonalLogoutResponse, error)
	// RefreshPersonalToken Refresh the personal user's token
	RefreshPersonalToken(context.Context, *RefreshPersonalTokenRequest) (*RefreshPersonalTokenResponse, error)
	// UpdatePersonalProfilePassword The user changes the password
	UpdatePersonalPassword(context.Context, *UpdatePersonalPasswordRequest) (*UpdatePersonalPasswordResponse, error)
	// UpdatePersonalProfile Update the personal user information
	UpdatePersonalProfile(context.Context, *UpdatePersonalProfileRequest) (*UpdatePersonalProfileResponse, error)
	// UpdatePersonalSetting User settings are saved
	UpdatePersonalSetting(context.Context, *UpdatePersonalSettingRequest) (*UpdatePersonalSettingResponse, error)
	mustEmbedUnimplementedPersonalServiceServer()
}

// UnimplementedPersonalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPersonalServiceServer struct{}

func (UnimplementedPersonalServiceServer) GetPersonalProfile(context.Context, *GetPersonalProfileRequest) (*GetPersonalProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonalProfile not implemented")
}
func (UnimplementedPersonalServiceServer) ListPersonalResources(context.Context, *ListPersonalResourcesRequest) (*ListPersonalResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPersonalResources not implemented")
}
func (UnimplementedPersonalServiceServer) ListPersonalRoles(context.Context, *ListPersonalRolesRequest) (*ListPersonalRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPersonalRoles not implemented")
}
func (UnimplementedPersonalServiceServer) PersonalLogout(context.Context, *PersonalLogoutRequest) (*PersonalLogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PersonalLogout not implemented")
}
func (UnimplementedPersonalServiceServer) RefreshPersonalToken(context.Context, *RefreshPersonalTokenRequest) (*RefreshPersonalTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshPersonalToken not implemented")
}
func (UnimplementedPersonalServiceServer) UpdatePersonalPassword(context.Context, *UpdatePersonalPasswordRequest) (*UpdatePersonalPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePersonalPassword not implemented")
}
func (UnimplementedPersonalServiceServer) UpdatePersonalProfile(context.Context, *UpdatePersonalProfileRequest) (*UpdatePersonalProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePersonalProfile not implemented")
}
func (UnimplementedPersonalServiceServer) UpdatePersonalSetting(context.Context, *UpdatePersonalSettingRequest) (*UpdatePersonalSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePersonalSetting not implemented")
}
func (UnimplementedPersonalServiceServer) mustEmbedUnimplementedPersonalServiceServer() {}
func (UnimplementedPersonalServiceServer) testEmbeddedByValue()                         {}

// UnsafePersonalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonalServiceServer will
// result in compilation errors.
type UnsafePersonalServiceServer interface {
	mustEmbedUnimplementedPersonalServiceServer()
}

func RegisterPersonalServiceServer(s grpc.ServiceRegistrar, srv PersonalServiceServer) {
	// If the following call pancis, it indicates UnimplementedPersonalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PersonalService_ServiceDesc, srv)
}

func _PersonalService_GetPersonalProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonalProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalServiceServer).GetPersonalProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonalService_GetPersonalProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalServiceServer).GetPersonalProfile(ctx, req.(*GetPersonalProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalService_ListPersonalResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPersonalResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalServiceServer).ListPersonalResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonalService_ListPersonalResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalServiceServer).ListPersonalResources(ctx, req.(*ListPersonalResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalService_ListPersonalRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPersonalRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalServiceServer).ListPersonalRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonalService_ListPersonalRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalServiceServer).ListPersonalRoles(ctx, req.(*ListPersonalRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalService_PersonalLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonalLogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalServiceServer).PersonalLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonalService_PersonalLogout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalServiceServer).PersonalLogout(ctx, req.(*PersonalLogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalService_RefreshPersonalToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshPersonalTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalServiceServer).RefreshPersonalToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonalService_RefreshPersonalToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalServiceServer).RefreshPersonalToken(ctx, req.(*RefreshPersonalTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalService_UpdatePersonalPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePersonalPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalServiceServer).UpdatePersonalPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonalService_UpdatePersonalPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalServiceServer).UpdatePersonalPassword(ctx, req.(*UpdatePersonalPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalService_UpdatePersonalProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePersonalProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalServiceServer).UpdatePersonalProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonalService_UpdatePersonalProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalServiceServer).UpdatePersonalProfile(ctx, req.(*UpdatePersonalProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalService_UpdatePersonalSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePersonalSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalServiceServer).UpdatePersonalSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonalService_UpdatePersonalSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalServiceServer).UpdatePersonalSetting(ctx, req.(*UpdatePersonalSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PersonalService_ServiceDesc is the grpc.ServiceDesc for PersonalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.services.system.PersonalService",
	HandlerType: (*PersonalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPersonalProfile",
			Handler:    _PersonalService_GetPersonalProfile_Handler,
		},
		{
			MethodName: "ListPersonalResources",
			Handler:    _PersonalService_ListPersonalResources_Handler,
		},
		{
			MethodName: "ListPersonalRoles",
			Handler:    _PersonalService_ListPersonalRoles_Handler,
		},
		{
			MethodName: "PersonalLogout",
			Handler:    _PersonalService_PersonalLogout_Handler,
		},
		{
			MethodName: "RefreshPersonalToken",
			Handler:    _PersonalService_RefreshPersonalToken_Handler,
		},
		{
			MethodName: "UpdatePersonalPassword",
			Handler:    _PersonalService_UpdatePersonalPassword_Handler,
		},
		{
			MethodName: "UpdatePersonalProfile",
			Handler:    _PersonalService_UpdatePersonalProfile_Handler,
		},
		{
			MethodName: "UpdatePersonalSetting",
			Handler:    _PersonalService_UpdatePersonalSetting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system/personal.proto",
}
