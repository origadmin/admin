// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: system/current.proto

package system

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UpdateCurrentSettingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCurrentSettingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCurrentSettingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCurrentSettingRequestMultiError, or nil if none found.
func (m *UpdateCurrentSettingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCurrentSettingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCurrentSettingRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCurrentSettingRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCurrentSettingRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCurrentSettingRequestMultiError(errors)
	}

	return nil
}

// UpdateCurrentSettingRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateCurrentSettingRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateCurrentSettingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCurrentSettingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCurrentSettingRequestMultiError) AllErrors() []error { return m }

// UpdateCurrentSettingRequestValidationError is the validation error returned
// by UpdateCurrentSettingRequest.Validate if the designated constraints
// aren't met.
type UpdateCurrentSettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCurrentSettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCurrentSettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCurrentSettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCurrentSettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCurrentSettingRequestValidationError) ErrorName() string {
	return "UpdateCurrentSettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCurrentSettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCurrentSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCurrentSettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCurrentSettingRequestValidationError{}

// Validate checks the field values on UpdateCurrentSettingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCurrentSettingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCurrentSettingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCurrentSettingResponseMultiError, or nil if none found.
func (m *UpdateCurrentSettingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCurrentSettingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCurrentSettingResponseMultiError(errors)
	}

	return nil
}

// UpdateCurrentSettingResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateCurrentSettingResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateCurrentSettingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCurrentSettingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCurrentSettingResponseMultiError) AllErrors() []error { return m }

// UpdateCurrentSettingResponseValidationError is the validation error returned
// by UpdateCurrentSettingResponse.Validate if the designated constraints
// aren't met.
type UpdateCurrentSettingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCurrentSettingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCurrentSettingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCurrentSettingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCurrentSettingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCurrentSettingResponseValidationError) ErrorName() string {
	return "UpdateCurrentSettingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCurrentSettingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCurrentSettingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCurrentSettingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCurrentSettingResponseValidationError{}

// Validate checks the field values on UpdateCurrentRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCurrentRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCurrentRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCurrentRoleRequestMultiError, or nil if none found.
func (m *UpdateCurrentRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCurrentRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCurrentRoleRequestValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCurrentRoleRequestValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCurrentRoleRequestValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCurrentRoleRequestMultiError(errors)
	}

	return nil
}

// UpdateCurrentRoleRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCurrentRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCurrentRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCurrentRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCurrentRoleRequestMultiError) AllErrors() []error { return m }

// UpdateCurrentRoleRequestValidationError is the validation error returned by
// UpdateCurrentRoleRequest.Validate if the designated constraints aren't met.
type UpdateCurrentRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCurrentRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCurrentRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCurrentRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCurrentRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCurrentRoleRequestValidationError) ErrorName() string {
	return "UpdateCurrentRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCurrentRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCurrentRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCurrentRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCurrentRoleRequestValidationError{}

// Validate checks the field values on UpdateCurrentRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCurrentRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCurrentRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCurrentRoleResponseMultiError, or nil if none found.
func (m *UpdateCurrentRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCurrentRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCurrentRoleResponseMultiError(errors)
	}

	return nil
}

// UpdateCurrentRoleResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCurrentRoleResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateCurrentRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCurrentRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCurrentRoleResponseMultiError) AllErrors() []error { return m }

// UpdateCurrentRoleResponseValidationError is the validation error returned by
// UpdateCurrentRoleResponse.Validate if the designated constraints aren't met.
type UpdateCurrentRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCurrentRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCurrentRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCurrentRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCurrentRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCurrentRoleResponseValidationError) ErrorName() string {
	return "UpdateCurrentRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCurrentRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCurrentRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCurrentRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCurrentRoleResponseValidationError{}

// Validate checks the field values on ListCurrentMenusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCurrentMenusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCurrentMenusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCurrentMenusRequestMultiError, or nil if none found.
func (m *ListCurrentMenusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCurrentMenusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCurrentMenusRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCurrentMenusRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCurrentMenusRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCurrentMenusRequestMultiError(errors)
	}

	return nil
}

// ListCurrentMenusRequestMultiError is an error wrapping multiple validation
// errors returned by ListCurrentMenusRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCurrentMenusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCurrentMenusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCurrentMenusRequestMultiError) AllErrors() []error { return m }

// ListCurrentMenusRequestValidationError is the validation error returned by
// ListCurrentMenusRequest.Validate if the designated constraints aren't met.
type ListCurrentMenusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCurrentMenusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCurrentMenusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCurrentMenusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCurrentMenusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCurrentMenusRequestValidationError) ErrorName() string {
	return "ListCurrentMenusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCurrentMenusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCurrentMenusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCurrentMenusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCurrentMenusRequestValidationError{}

// Validate checks the field values on ListCurrentMenusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCurrentMenusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCurrentMenusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCurrentMenusResponseMultiError, or nil if none found.
func (m *ListCurrentMenusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCurrentMenusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMenus() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCurrentMenusResponseValidationError{
						field:  fmt.Sprintf("Menus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCurrentMenusResponseValidationError{
						field:  fmt.Sprintf("Menus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCurrentMenusResponseValidationError{
					field:  fmt.Sprintf("Menus[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCurrentMenusResponseMultiError(errors)
	}

	return nil
}

// ListCurrentMenusResponseMultiError is an error wrapping multiple validation
// errors returned by ListCurrentMenusResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCurrentMenusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCurrentMenusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCurrentMenusResponseMultiError) AllErrors() []error { return m }

// ListCurrentMenusResponseValidationError is the validation error returned by
// ListCurrentMenusResponse.Validate if the designated constraints aren't met.
type ListCurrentMenusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCurrentMenusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCurrentMenusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCurrentMenusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCurrentMenusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCurrentMenusResponseValidationError) ErrorName() string {
	return "ListCurrentMenusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCurrentMenusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCurrentMenusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCurrentMenusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCurrentMenusResponseValidationError{}

// Validate checks the field values on UpdateCurrentUserPasswordRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateCurrentUserPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCurrentUserPasswordRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateCurrentUserPasswordRequestMultiError, or nil if none found.
func (m *UpdateCurrentUserPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCurrentUserPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCurrentUserPasswordRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCurrentUserPasswordRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCurrentUserPasswordRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCurrentUserPasswordRequestMultiError(errors)
	}

	return nil
}

// UpdateCurrentUserPasswordRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateCurrentUserPasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCurrentUserPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCurrentUserPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCurrentUserPasswordRequestMultiError) AllErrors() []error { return m }

// UpdateCurrentUserPasswordRequestValidationError is the validation error
// returned by UpdateCurrentUserPasswordRequest.Validate if the designated
// constraints aren't met.
type UpdateCurrentUserPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCurrentUserPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCurrentUserPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCurrentUserPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCurrentUserPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCurrentUserPasswordRequestValidationError) ErrorName() string {
	return "UpdateCurrentUserPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCurrentUserPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCurrentUserPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCurrentUserPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCurrentUserPasswordRequestValidationError{}

// Validate checks the field values on UpdateCurrentUserPasswordResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateCurrentUserPasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCurrentUserPasswordResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateCurrentUserPasswordResponseMultiError, or nil if none found.
func (m *UpdateCurrentUserPasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCurrentUserPasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCurrentUserPasswordResponseMultiError(errors)
	}

	return nil
}

// UpdateCurrentUserPasswordResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateCurrentUserPasswordResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCurrentUserPasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCurrentUserPasswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCurrentUserPasswordResponseMultiError) AllErrors() []error { return m }

// UpdateCurrentUserPasswordResponseValidationError is the validation error
// returned by UpdateCurrentUserPasswordResponse.Validate if the designated
// constraints aren't met.
type UpdateCurrentUserPasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCurrentUserPasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCurrentUserPasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCurrentUserPasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCurrentUserPasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCurrentUserPasswordResponseValidationError) ErrorName() string {
	return "UpdateCurrentUserPasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCurrentUserPasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCurrentUserPasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCurrentUserPasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCurrentUserPasswordResponseValidationError{}

// Validate checks the field values on CurrentPasswordRestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CurrentPasswordRestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CurrentPasswordRestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CurrentPasswordRestRequestMultiError, or nil if none found.
func (m *CurrentPasswordRestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CurrentPasswordRestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := CurrentPasswordRestRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CurrentPasswordRestRequestMultiError(errors)
	}

	return nil
}

// CurrentPasswordRestRequestMultiError is an error wrapping multiple
// validation errors returned by CurrentPasswordRestRequest.ValidateAll() if
// the designated constraints aren't met.
type CurrentPasswordRestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CurrentPasswordRestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CurrentPasswordRestRequestMultiError) AllErrors() []error { return m }

// CurrentPasswordRestRequestValidationError is the validation error returned
// by CurrentPasswordRestRequest.Validate if the designated constraints aren't met.
type CurrentPasswordRestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CurrentPasswordRestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CurrentPasswordRestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CurrentPasswordRestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CurrentPasswordRestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CurrentPasswordRestRequestValidationError) ErrorName() string {
	return "CurrentPasswordRestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CurrentPasswordRestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCurrentPasswordRestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CurrentPasswordRestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CurrentPasswordRestRequestValidationError{}

// Validate checks the field values on CurrentPasswordRestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CurrentPasswordRestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CurrentPasswordRestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CurrentPasswordRestResponseMultiError, or nil if none found.
func (m *CurrentPasswordRestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CurrentPasswordRestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CurrentPasswordRestResponseMultiError(errors)
	}

	return nil
}

// CurrentPasswordRestResponseMultiError is an error wrapping multiple
// validation errors returned by CurrentPasswordRestResponse.ValidateAll() if
// the designated constraints aren't met.
type CurrentPasswordRestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CurrentPasswordRestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CurrentPasswordRestResponseMultiError) AllErrors() []error { return m }

// CurrentPasswordRestResponseValidationError is the validation error returned
// by CurrentPasswordRestResponse.Validate if the designated constraints
// aren't met.
type CurrentPasswordRestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CurrentPasswordRestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CurrentPasswordRestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CurrentPasswordRestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CurrentPasswordRestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CurrentPasswordRestResponseValidationError) ErrorName() string {
	return "CurrentPasswordRestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CurrentPasswordRestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCurrentPasswordRestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CurrentPasswordRestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CurrentPasswordRestResponseValidationError{}

// Validate checks the field values on UpdateCurrentUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCurrentUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCurrentUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCurrentUserRequestMultiError, or nil if none found.
func (m *UpdateCurrentUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCurrentUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCurrentUserRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCurrentUserRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCurrentUserRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCurrentUserRequestMultiError(errors)
	}

	return nil
}

// UpdateCurrentUserRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCurrentUserRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCurrentUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCurrentUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCurrentUserRequestMultiError) AllErrors() []error { return m }

// UpdateCurrentUserRequestValidationError is the validation error returned by
// UpdateCurrentUserRequest.Validate if the designated constraints aren't met.
type UpdateCurrentUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCurrentUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCurrentUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCurrentUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCurrentUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCurrentUserRequestValidationError) ErrorName() string {
	return "UpdateCurrentUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCurrentUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCurrentUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCurrentUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCurrentUserRequestValidationError{}

// Validate checks the field values on UpdateCurrentUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCurrentUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCurrentUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCurrentUserResponseMultiError, or nil if none found.
func (m *UpdateCurrentUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCurrentUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCurrentUserResponseMultiError(errors)
	}

	return nil
}

// UpdateCurrentUserResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCurrentUserResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateCurrentUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCurrentUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCurrentUserResponseMultiError) AllErrors() []error { return m }

// UpdateCurrentUserResponseValidationError is the validation error returned by
// UpdateCurrentUserResponse.Validate if the designated constraints aren't met.
type UpdateCurrentUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCurrentUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCurrentUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCurrentUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCurrentUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCurrentUserResponseValidationError) ErrorName() string {
	return "UpdateCurrentUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCurrentUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCurrentUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCurrentUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCurrentUserResponseValidationError{}

// Validate checks the field values on CurrentLogoutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CurrentLogoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CurrentLogoutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CurrentLogoutRequestMultiError, or nil if none found.
func (m *CurrentLogoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CurrentLogoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CurrentLogoutRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CurrentLogoutRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CurrentLogoutRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CurrentLogoutRequestMultiError(errors)
	}

	return nil
}

// CurrentLogoutRequestMultiError is an error wrapping multiple validation
// errors returned by CurrentLogoutRequest.ValidateAll() if the designated
// constraints aren't met.
type CurrentLogoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CurrentLogoutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CurrentLogoutRequestMultiError) AllErrors() []error { return m }

// CurrentLogoutRequestValidationError is the validation error returned by
// CurrentLogoutRequest.Validate if the designated constraints aren't met.
type CurrentLogoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CurrentLogoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CurrentLogoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CurrentLogoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CurrentLogoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CurrentLogoutRequestValidationError) ErrorName() string {
	return "CurrentLogoutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CurrentLogoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCurrentLogoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CurrentLogoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CurrentLogoutRequestValidationError{}

// Validate checks the field values on CurrentLogoutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CurrentLogoutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CurrentLogoutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CurrentLogoutResponseMultiError, or nil if none found.
func (m *CurrentLogoutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CurrentLogoutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return CurrentLogoutResponseMultiError(errors)
	}

	return nil
}

// CurrentLogoutResponseMultiError is an error wrapping multiple validation
// errors returned by CurrentLogoutResponse.ValidateAll() if the designated
// constraints aren't met.
type CurrentLogoutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CurrentLogoutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CurrentLogoutResponseMultiError) AllErrors() []error { return m }

// CurrentLogoutResponseValidationError is the validation error returned by
// CurrentLogoutResponse.Validate if the designated constraints aren't met.
type CurrentLogoutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CurrentLogoutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CurrentLogoutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CurrentLogoutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CurrentLogoutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CurrentLogoutResponseValidationError) ErrorName() string {
	return "CurrentLogoutResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CurrentLogoutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCurrentLogoutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CurrentLogoutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CurrentLogoutResponseValidationError{}

// Validate checks the field values on ListCurrentRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCurrentRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCurrentRolesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCurrentRolesRequestMultiError, or nil if none found.
func (m *ListCurrentRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCurrentRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCurrentRolesRequestMultiError(errors)
	}

	return nil
}

// ListCurrentRolesRequestMultiError is an error wrapping multiple validation
// errors returned by ListCurrentRolesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCurrentRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCurrentRolesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCurrentRolesRequestMultiError) AllErrors() []error { return m }

// ListCurrentRolesRequestValidationError is the validation error returned by
// ListCurrentRolesRequest.Validate if the designated constraints aren't met.
type ListCurrentRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCurrentRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCurrentRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCurrentRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCurrentRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCurrentRolesRequestValidationError) ErrorName() string {
	return "ListCurrentRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCurrentRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCurrentRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCurrentRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCurrentRolesRequestValidationError{}

// Validate checks the field values on ListCurrentRolesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCurrentRolesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCurrentRolesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCurrentRolesResponseMultiError, or nil if none found.
func (m *ListCurrentRolesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCurrentRolesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCurrentRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCurrentRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCurrentRolesResponseValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCurrentRolesResponseMultiError(errors)
	}

	return nil
}

// ListCurrentRolesResponseMultiError is an error wrapping multiple validation
// errors returned by ListCurrentRolesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCurrentRolesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCurrentRolesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCurrentRolesResponseMultiError) AllErrors() []error { return m }

// ListCurrentRolesResponseValidationError is the validation error returned by
// ListCurrentRolesResponse.Validate if the designated constraints aren't met.
type ListCurrentRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCurrentRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCurrentRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCurrentRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCurrentRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCurrentRolesResponseValidationError) ErrorName() string {
	return "ListCurrentRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCurrentRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCurrentRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCurrentRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCurrentRolesResponseValidationError{}

// Validate checks the field values on GetCurrentUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentUserRequestMultiError, or nil if none found.
func (m *GetCurrentUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCurrentUserRequestMultiError(errors)
	}

	return nil
}

// GetCurrentUserRequestMultiError is an error wrapping multiple validation
// errors returned by GetCurrentUserRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentUserRequestMultiError) AllErrors() []error { return m }

// GetCurrentUserRequestValidationError is the validation error returned by
// GetCurrentUserRequest.Validate if the designated constraints aren't met.
type GetCurrentUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentUserRequestValidationError) ErrorName() string {
	return "GetCurrentUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentUserRequestValidationError{}

// Validate checks the field values on GetCurrentUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentUserResponseMultiError, or nil if none found.
func (m *GetCurrentUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCurrentUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCurrentUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCurrentUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCurrentUserResponseMultiError(errors)
	}

	return nil
}

// GetCurrentUserResponseMultiError is an error wrapping multiple validation
// errors returned by GetCurrentUserResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentUserResponseMultiError) AllErrors() []error { return m }

// GetCurrentUserResponseValidationError is the validation error returned by
// GetCurrentUserResponse.Validate if the designated constraints aren't met.
type GetCurrentUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentUserResponseValidationError) ErrorName() string {
	return "GetCurrentUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentUserResponseValidationError{}

// Validate checks the field values on RefreshCurrentTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshCurrentTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshCurrentTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshCurrentTokenRequestMultiError, or nil if none found.
func (m *RefreshCurrentTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshCurrentTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RefreshCurrentTokenRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RefreshCurrentTokenRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RefreshCurrentTokenRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RefreshCurrentTokenRequestMultiError(errors)
	}

	return nil
}

// RefreshCurrentTokenRequestMultiError is an error wrapping multiple
// validation errors returned by RefreshCurrentTokenRequest.ValidateAll() if
// the designated constraints aren't met.
type RefreshCurrentTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshCurrentTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshCurrentTokenRequestMultiError) AllErrors() []error { return m }

// RefreshCurrentTokenRequestValidationError is the validation error returned
// by RefreshCurrentTokenRequest.Validate if the designated constraints aren't met.
type RefreshCurrentTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshCurrentTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshCurrentTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshCurrentTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshCurrentTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshCurrentTokenRequestValidationError) ErrorName() string {
	return "RefreshCurrentTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshCurrentTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshCurrentTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshCurrentTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshCurrentTokenRequestValidationError{}

// Validate checks the field values on RefreshCurrentTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshCurrentTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshCurrentTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshCurrentTokenResponseMultiError, or nil if none found.
func (m *RefreshCurrentTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshCurrentTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return RefreshCurrentTokenResponseMultiError(errors)
	}

	return nil
}

// RefreshCurrentTokenResponseMultiError is an error wrapping multiple
// validation errors returned by RefreshCurrentTokenResponse.ValidateAll() if
// the designated constraints aren't met.
type RefreshCurrentTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshCurrentTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshCurrentTokenResponseMultiError) AllErrors() []error { return m }

// RefreshCurrentTokenResponseValidationError is the validation error returned
// by RefreshCurrentTokenResponse.Validate if the designated constraints
// aren't met.
type RefreshCurrentTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshCurrentTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshCurrentTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshCurrentTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshCurrentTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshCurrentTokenResponseValidationError) ErrorName() string {
	return "RefreshCurrentTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshCurrentTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshCurrentTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshCurrentTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshCurrentTokenResponseValidationError{}
