// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: system/personal.proto

package system

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UpdatePersonalSettingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePersonalSettingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePersonalSettingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePersonalSettingRequestMultiError, or nil if none found.
func (m *UpdatePersonalSettingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePersonalSettingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePersonalSettingRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePersonalSettingRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePersonalSettingRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePersonalSettingRequestMultiError(errors)
	}

	return nil
}

// UpdatePersonalSettingRequestMultiError is an error wrapping multiple
// validation errors returned by UpdatePersonalSettingRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdatePersonalSettingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePersonalSettingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePersonalSettingRequestMultiError) AllErrors() []error { return m }

// UpdatePersonalSettingRequestValidationError is the validation error returned
// by UpdatePersonalSettingRequest.Validate if the designated constraints
// aren't met.
type UpdatePersonalSettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePersonalSettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePersonalSettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePersonalSettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePersonalSettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePersonalSettingRequestValidationError) ErrorName() string {
	return "UpdatePersonalSettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePersonalSettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePersonalSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePersonalSettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePersonalSettingRequestValidationError{}

// Validate checks the field values on UpdatePersonalSettingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePersonalSettingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePersonalSettingResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdatePersonalSettingResponseMultiError, or nil if none found.
func (m *UpdatePersonalSettingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePersonalSettingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePersonalSettingResponseMultiError(errors)
	}

	return nil
}

// UpdatePersonalSettingResponseMultiError is an error wrapping multiple
// validation errors returned by UpdatePersonalSettingResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdatePersonalSettingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePersonalSettingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePersonalSettingResponseMultiError) AllErrors() []error { return m }

// UpdatePersonalSettingResponseValidationError is the validation error
// returned by UpdatePersonalSettingResponse.Validate if the designated
// constraints aren't met.
type UpdatePersonalSettingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePersonalSettingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePersonalSettingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePersonalSettingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePersonalSettingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePersonalSettingResponseValidationError) ErrorName() string {
	return "UpdatePersonalSettingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePersonalSettingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePersonalSettingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePersonalSettingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePersonalSettingResponseValidationError{}

// Validate checks the field values on UpdatePersonalRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePersonalRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePersonalRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePersonalRoleRequestMultiError, or nil if none found.
func (m *UpdatePersonalRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePersonalRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePersonalRoleRequestValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePersonalRoleRequestValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePersonalRoleRequestValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePersonalRoleRequestMultiError(errors)
	}

	return nil
}

// UpdatePersonalRoleRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePersonalRoleRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdatePersonalRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePersonalRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePersonalRoleRequestMultiError) AllErrors() []error { return m }

// UpdatePersonalRoleRequestValidationError is the validation error returned by
// UpdatePersonalRoleRequest.Validate if the designated constraints aren't met.
type UpdatePersonalRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePersonalRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePersonalRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePersonalRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePersonalRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePersonalRoleRequestValidationError) ErrorName() string {
	return "UpdatePersonalRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePersonalRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePersonalRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePersonalRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePersonalRoleRequestValidationError{}

// Validate checks the field values on UpdatePersonalRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePersonalRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePersonalRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePersonalRoleResponseMultiError, or nil if none found.
func (m *UpdatePersonalRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePersonalRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePersonalRoleResponseMultiError(errors)
	}

	return nil
}

// UpdatePersonalRoleResponseMultiError is an error wrapping multiple
// validation errors returned by UpdatePersonalRoleResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdatePersonalRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePersonalRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePersonalRoleResponseMultiError) AllErrors() []error { return m }

// UpdatePersonalRoleResponseValidationError is the validation error returned
// by UpdatePersonalRoleResponse.Validate if the designated constraints aren't met.
type UpdatePersonalRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePersonalRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePersonalRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePersonalRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePersonalRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePersonalRoleResponseValidationError) ErrorName() string {
	return "UpdatePersonalRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePersonalRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePersonalRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePersonalRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePersonalRoleResponseValidationError{}

// Validate checks the field values on ListPersonalResourcesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPersonalResourcesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPersonalResourcesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPersonalResourcesRequestMultiError, or nil if none found.
func (m *ListPersonalResourcesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPersonalResourcesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPersonalResourcesRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPersonalResourcesRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPersonalResourcesRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListPersonalResourcesRequestMultiError(errors)
	}

	return nil
}

// ListPersonalResourcesRequestMultiError is an error wrapping multiple
// validation errors returned by ListPersonalResourcesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListPersonalResourcesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPersonalResourcesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPersonalResourcesRequestMultiError) AllErrors() []error { return m }

// ListPersonalResourcesRequestValidationError is the validation error returned
// by ListPersonalResourcesRequest.Validate if the designated constraints
// aren't met.
type ListPersonalResourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPersonalResourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPersonalResourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPersonalResourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPersonalResourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPersonalResourcesRequestValidationError) ErrorName() string {
	return "ListPersonalResourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPersonalResourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPersonalResourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPersonalResourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPersonalResourcesRequestValidationError{}

// Validate checks the field values on ListPersonalResourcesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPersonalResourcesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPersonalResourcesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListPersonalResourcesResponseMultiError, or nil if none found.
func (m *ListPersonalResourcesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPersonalResourcesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMenus() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPersonalResourcesResponseValidationError{
						field:  fmt.Sprintf("Menus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPersonalResourcesResponseValidationError{
						field:  fmt.Sprintf("Menus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPersonalResourcesResponseValidationError{
					field:  fmt.Sprintf("Menus[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPersonalResourcesResponseMultiError(errors)
	}

	return nil
}

// ListPersonalResourcesResponseMultiError is an error wrapping multiple
// validation errors returned by ListPersonalResourcesResponse.ValidateAll()
// if the designated constraints aren't met.
type ListPersonalResourcesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPersonalResourcesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPersonalResourcesResponseMultiError) AllErrors() []error { return m }

// ListPersonalResourcesResponseValidationError is the validation error
// returned by ListPersonalResourcesResponse.Validate if the designated
// constraints aren't met.
type ListPersonalResourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPersonalResourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPersonalResourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPersonalResourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPersonalResourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPersonalResourcesResponseValidationError) ErrorName() string {
	return "ListPersonalResourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPersonalResourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPersonalResourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPersonalResourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPersonalResourcesResponseValidationError{}

// Validate checks the field values on UpdatePersonalPasswordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePersonalPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePersonalPasswordRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdatePersonalPasswordRequestMultiError, or nil if none found.
func (m *UpdatePersonalPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePersonalPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePersonalPasswordRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePersonalPasswordRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePersonalPasswordRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePersonalPasswordRequestMultiError(errors)
	}

	return nil
}

// UpdatePersonalPasswordRequestMultiError is an error wrapping multiple
// validation errors returned by UpdatePersonalPasswordRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdatePersonalPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePersonalPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePersonalPasswordRequestMultiError) AllErrors() []error { return m }

// UpdatePersonalPasswordRequestValidationError is the validation error
// returned by UpdatePersonalPasswordRequest.Validate if the designated
// constraints aren't met.
type UpdatePersonalPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePersonalPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePersonalPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePersonalPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePersonalPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePersonalPasswordRequestValidationError) ErrorName() string {
	return "UpdatePersonalPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePersonalPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePersonalPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePersonalPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePersonalPasswordRequestValidationError{}

// Validate checks the field values on UpdatePersonalPasswordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePersonalPasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePersonalPasswordResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdatePersonalPasswordResponseMultiError, or nil if none found.
func (m *UpdatePersonalPasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePersonalPasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePersonalPasswordResponseMultiError(errors)
	}

	return nil
}

// UpdatePersonalPasswordResponseMultiError is an error wrapping multiple
// validation errors returned by UpdatePersonalPasswordResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdatePersonalPasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePersonalPasswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePersonalPasswordResponseMultiError) AllErrors() []error { return m }

// UpdatePersonalPasswordResponseValidationError is the validation error
// returned by UpdatePersonalPasswordResponse.Validate if the designated
// constraints aren't met.
type UpdatePersonalPasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePersonalPasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePersonalPasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePersonalPasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePersonalPasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePersonalPasswordResponseValidationError) ErrorName() string {
	return "UpdatePersonalPasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePersonalPasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePersonalPasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePersonalPasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePersonalPasswordResponseValidationError{}

// Validate checks the field values on PersonalPasswordRestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PersonalPasswordRestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PersonalPasswordRestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PersonalPasswordRestRequestMultiError, or nil if none found.
func (m *PersonalPasswordRestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PersonalPasswordRestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := PersonalPasswordRestRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PersonalPasswordRestRequestMultiError(errors)
	}

	return nil
}

// PersonalPasswordRestRequestMultiError is an error wrapping multiple
// validation errors returned by PersonalPasswordRestRequest.ValidateAll() if
// the designated constraints aren't met.
type PersonalPasswordRestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PersonalPasswordRestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PersonalPasswordRestRequestMultiError) AllErrors() []error { return m }

// PersonalPasswordRestRequestValidationError is the validation error returned
// by PersonalPasswordRestRequest.Validate if the designated constraints
// aren't met.
type PersonalPasswordRestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PersonalPasswordRestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PersonalPasswordRestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PersonalPasswordRestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PersonalPasswordRestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PersonalPasswordRestRequestValidationError) ErrorName() string {
	return "PersonalPasswordRestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PersonalPasswordRestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPersonalPasswordRestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PersonalPasswordRestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PersonalPasswordRestRequestValidationError{}

// Validate checks the field values on PersonalPasswordRestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PersonalPasswordRestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PersonalPasswordRestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PersonalPasswordRestResponseMultiError, or nil if none found.
func (m *PersonalPasswordRestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PersonalPasswordRestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PersonalPasswordRestResponseMultiError(errors)
	}

	return nil
}

// PersonalPasswordRestResponseMultiError is an error wrapping multiple
// validation errors returned by PersonalPasswordRestResponse.ValidateAll() if
// the designated constraints aren't met.
type PersonalPasswordRestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PersonalPasswordRestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PersonalPasswordRestResponseMultiError) AllErrors() []error { return m }

// PersonalPasswordRestResponseValidationError is the validation error returned
// by PersonalPasswordRestResponse.Validate if the designated constraints
// aren't met.
type PersonalPasswordRestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PersonalPasswordRestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PersonalPasswordRestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PersonalPasswordRestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PersonalPasswordRestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PersonalPasswordRestResponseValidationError) ErrorName() string {
	return "PersonalPasswordRestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PersonalPasswordRestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPersonalPasswordRestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PersonalPasswordRestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PersonalPasswordRestResponseValidationError{}

// Validate checks the field values on UpdatePersonalProfileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePersonalProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePersonalProfileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePersonalProfileRequestMultiError, or nil if none found.
func (m *UpdatePersonalProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePersonalProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePersonalProfileRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePersonalProfileRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePersonalProfileRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePersonalProfileRequestMultiError(errors)
	}

	return nil
}

// UpdatePersonalProfileRequestMultiError is an error wrapping multiple
// validation errors returned by UpdatePersonalProfileRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdatePersonalProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePersonalProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePersonalProfileRequestMultiError) AllErrors() []error { return m }

// UpdatePersonalProfileRequestValidationError is the validation error returned
// by UpdatePersonalProfileRequest.Validate if the designated constraints
// aren't met.
type UpdatePersonalProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePersonalProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePersonalProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePersonalProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePersonalProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePersonalProfileRequestValidationError) ErrorName() string {
	return "UpdatePersonalProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePersonalProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePersonalProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePersonalProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePersonalProfileRequestValidationError{}

// Validate checks the field values on UpdatePersonalProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePersonalProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePersonalProfileResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdatePersonalProfileResponseMultiError, or nil if none found.
func (m *UpdatePersonalProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePersonalProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePersonalProfileResponseMultiError(errors)
	}

	return nil
}

// UpdatePersonalProfileResponseMultiError is an error wrapping multiple
// validation errors returned by UpdatePersonalProfileResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdatePersonalProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePersonalProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePersonalProfileResponseMultiError) AllErrors() []error { return m }

// UpdatePersonalProfileResponseValidationError is the validation error
// returned by UpdatePersonalProfileResponse.Validate if the designated
// constraints aren't met.
type UpdatePersonalProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePersonalProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePersonalProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePersonalProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePersonalProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePersonalProfileResponseValidationError) ErrorName() string {
	return "UpdatePersonalProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePersonalProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePersonalProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePersonalProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePersonalProfileResponseValidationError{}

// Validate checks the field values on PersonalLogoutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PersonalLogoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PersonalLogoutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PersonalLogoutRequestMultiError, or nil if none found.
func (m *PersonalLogoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PersonalLogoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PersonalLogoutRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PersonalLogoutRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PersonalLogoutRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PersonalLogoutRequestMultiError(errors)
	}

	return nil
}

// PersonalLogoutRequestMultiError is an error wrapping multiple validation
// errors returned by PersonalLogoutRequest.ValidateAll() if the designated
// constraints aren't met.
type PersonalLogoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PersonalLogoutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PersonalLogoutRequestMultiError) AllErrors() []error { return m }

// PersonalLogoutRequestValidationError is the validation error returned by
// PersonalLogoutRequest.Validate if the designated constraints aren't met.
type PersonalLogoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PersonalLogoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PersonalLogoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PersonalLogoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PersonalLogoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PersonalLogoutRequestValidationError) ErrorName() string {
	return "PersonalLogoutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PersonalLogoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPersonalLogoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PersonalLogoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PersonalLogoutRequestValidationError{}

// Validate checks the field values on PersonalLogoutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PersonalLogoutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PersonalLogoutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PersonalLogoutResponseMultiError, or nil if none found.
func (m *PersonalLogoutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PersonalLogoutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return PersonalLogoutResponseMultiError(errors)
	}

	return nil
}

// PersonalLogoutResponseMultiError is an error wrapping multiple validation
// errors returned by PersonalLogoutResponse.ValidateAll() if the designated
// constraints aren't met.
type PersonalLogoutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PersonalLogoutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PersonalLogoutResponseMultiError) AllErrors() []error { return m }

// PersonalLogoutResponseValidationError is the validation error returned by
// PersonalLogoutResponse.Validate if the designated constraints aren't met.
type PersonalLogoutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PersonalLogoutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PersonalLogoutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PersonalLogoutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PersonalLogoutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PersonalLogoutResponseValidationError) ErrorName() string {
	return "PersonalLogoutResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PersonalLogoutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPersonalLogoutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PersonalLogoutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PersonalLogoutResponseValidationError{}

// Validate checks the field values on ListPersonalRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPersonalRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPersonalRolesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPersonalRolesRequestMultiError, or nil if none found.
func (m *ListPersonalRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPersonalRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListPersonalRolesRequestMultiError(errors)
	}

	return nil
}

// ListPersonalRolesRequestMultiError is an error wrapping multiple validation
// errors returned by ListPersonalRolesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPersonalRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPersonalRolesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPersonalRolesRequestMultiError) AllErrors() []error { return m }

// ListPersonalRolesRequestValidationError is the validation error returned by
// ListPersonalRolesRequest.Validate if the designated constraints aren't met.
type ListPersonalRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPersonalRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPersonalRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPersonalRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPersonalRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPersonalRolesRequestValidationError) ErrorName() string {
	return "ListPersonalRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPersonalRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPersonalRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPersonalRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPersonalRolesRequestValidationError{}

// Validate checks the field values on ListPersonalRolesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPersonalRolesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPersonalRolesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPersonalRolesResponseMultiError, or nil if none found.
func (m *ListPersonalRolesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPersonalRolesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPersonalRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPersonalRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPersonalRolesResponseValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPersonalRolesResponseMultiError(errors)
	}

	return nil
}

// ListPersonalRolesResponseMultiError is an error wrapping multiple validation
// errors returned by ListPersonalRolesResponse.ValidateAll() if the
// designated constraints aren't met.
type ListPersonalRolesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPersonalRolesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPersonalRolesResponseMultiError) AllErrors() []error { return m }

// ListPersonalRolesResponseValidationError is the validation error returned by
// ListPersonalRolesResponse.Validate if the designated constraints aren't met.
type ListPersonalRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPersonalRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPersonalRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPersonalRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPersonalRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPersonalRolesResponseValidationError) ErrorName() string {
	return "ListPersonalRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPersonalRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPersonalRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPersonalRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPersonalRolesResponseValidationError{}

// Validate checks the field values on GetPersonalProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPersonalProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPersonalProfileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPersonalProfileRequestMultiError, or nil if none found.
func (m *GetPersonalProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPersonalProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPersonalProfileRequestMultiError(errors)
	}

	return nil
}

// GetPersonalProfileRequestMultiError is an error wrapping multiple validation
// errors returned by GetPersonalProfileRequest.ValidateAll() if the
// designated constraints aren't met.
type GetPersonalProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPersonalProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPersonalProfileRequestMultiError) AllErrors() []error { return m }

// GetPersonalProfileRequestValidationError is the validation error returned by
// GetPersonalProfileRequest.Validate if the designated constraints aren't met.
type GetPersonalProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPersonalProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPersonalProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPersonalProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPersonalProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPersonalProfileRequestValidationError) ErrorName() string {
	return "GetPersonalProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPersonalProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPersonalProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPersonalProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPersonalProfileRequestValidationError{}

// Validate checks the field values on GetPersonalProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPersonalProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPersonalProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPersonalProfileResponseMultiError, or nil if none found.
func (m *GetPersonalProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPersonalProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPersonalProfileResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPersonalProfileResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPersonalProfileResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPersonalProfileResponseMultiError(errors)
	}

	return nil
}

// GetPersonalProfileResponseMultiError is an error wrapping multiple
// validation errors returned by GetPersonalProfileResponse.ValidateAll() if
// the designated constraints aren't met.
type GetPersonalProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPersonalProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPersonalProfileResponseMultiError) AllErrors() []error { return m }

// GetPersonalProfileResponseValidationError is the validation error returned
// by GetPersonalProfileResponse.Validate if the designated constraints aren't met.
type GetPersonalProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPersonalProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPersonalProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPersonalProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPersonalProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPersonalProfileResponseValidationError) ErrorName() string {
	return "GetPersonalProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPersonalProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPersonalProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPersonalProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPersonalProfileResponseValidationError{}

// Validate checks the field values on RefreshPersonalTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshPersonalTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshPersonalTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshPersonalTokenRequestMultiError, or nil if none found.
func (m *RefreshPersonalTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshPersonalTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RefreshPersonalTokenRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RefreshPersonalTokenRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RefreshPersonalTokenRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RefreshPersonalTokenRequestMultiError(errors)
	}

	return nil
}

// RefreshPersonalTokenRequestMultiError is an error wrapping multiple
// validation errors returned by RefreshPersonalTokenRequest.ValidateAll() if
// the designated constraints aren't met.
type RefreshPersonalTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshPersonalTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshPersonalTokenRequestMultiError) AllErrors() []error { return m }

// RefreshPersonalTokenRequestValidationError is the validation error returned
// by RefreshPersonalTokenRequest.Validate if the designated constraints
// aren't met.
type RefreshPersonalTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshPersonalTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshPersonalTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshPersonalTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshPersonalTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshPersonalTokenRequestValidationError) ErrorName() string {
	return "RefreshPersonalTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshPersonalTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshPersonalTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshPersonalTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshPersonalTokenRequestValidationError{}

// Validate checks the field values on RefreshPersonalTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshPersonalTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshPersonalTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshPersonalTokenResponseMultiError, or nil if none found.
func (m *RefreshPersonalTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshPersonalTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return RefreshPersonalTokenResponseMultiError(errors)
	}

	return nil
}

// RefreshPersonalTokenResponseMultiError is an error wrapping multiple
// validation errors returned by RefreshPersonalTokenResponse.ValidateAll() if
// the designated constraints aren't met.
type RefreshPersonalTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshPersonalTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshPersonalTokenResponseMultiError) AllErrors() []error { return m }

// RefreshPersonalTokenResponseValidationError is the validation error returned
// by RefreshPersonalTokenResponse.Validate if the designated constraints
// aren't met.
type RefreshPersonalTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshPersonalTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshPersonalTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshPersonalTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshPersonalTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshPersonalTokenResponseValidationError) ErrorName() string {
	return "RefreshPersonalTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshPersonalTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshPersonalTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshPersonalTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshPersonalTokenResponseValidationError{}
