// Code generated by protoc-gen-go-ginrpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-ginrpc 0.0.6
// - protoc             (unknown)
// source: system/role.proto

package system

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	gins "github.com/origadmin/contrib/transport/gins"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = new(gin.H)
var _ = binding.EncodeURL

const _ = gins.SupportPackageIsVersion1

const RoleAPI_CreateRole_FullOperation = "/api.v1.services.system.RoleAPI/CreateRole"
const RoleAPI_DeleteRole_FullOperation = "/api.v1.services.system.RoleAPI/DeleteRole"
const RoleAPI_GetRole_FullOperation = "/api.v1.services.system.RoleAPI/GetRole"
const RoleAPI_ListRoles_FullOperation = "/api.v1.services.system.RoleAPI/ListRoles"
const RoleAPI_UpdateRole_FullOperation = "/api.v1.services.system.RoleAPI/UpdateRole"

type RoleAPIGINRPCServer interface {
	CreateRole(*gin.Context, *CreateRoleRequest)
	DeleteRole(*gin.Context, *DeleteRoleRequest)
	GetRole(*gin.Context, *GetRoleRequest)
	ListRoles(*gin.Context, *ListRolesRequest)
	UpdateRole(*gin.Context, *UpdateRoleRequest)
}

func RegisterRoleAPIGINRPCServer(router gins.IRouter, srv RoleAPIGINRPCServer) {
	router.GET("/api/v1/sys/roles", _RoleAPI_ListRoles0_GINRPC_Handler(srv))
	router.GET("/api/v1/sys/roles/:id", _RoleAPI_GetRole0_GINRPC_Handler(srv))
	router.POST("/api/v1/sys/roles", _RoleAPI_CreateRole0_GINRPC_Handler(srv))
	router.PUT("/api/v1/sys/roles/:role.id", _RoleAPI_UpdateRole0_GINRPC_Handler(srv))
	router.DELETE("/api/v1/sys/roles/:id", _RoleAPI_DeleteRole0_GINRPC_Handler(srv))
}

func _RoleAPI_ListRoles0_GINRPC_Handler(srv RoleAPIGINRPCServer) func(ctx *gins.Context) {
	return func(ctx *gins.Context) {
		var in ListRolesRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.SetOperation(ctx, RoleAPI_ListRoles_OperationName)
		srv.ListRoles(ctx, &in)
	}
}

func _RoleAPI_GetRole0_GINRPC_Handler(srv RoleAPIGINRPCServer) func(ctx *gins.Context) {
	return func(ctx *gins.Context) {
		var in GetRoleRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		if err := gins.BindURI(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.SetOperation(ctx, RoleAPI_GetRole_OperationName)
		srv.GetRole(ctx, &in)
	}
}

func _RoleAPI_CreateRole0_GINRPC_Handler(srv RoleAPIGINRPCServer) func(ctx *gins.Context) {
	return func(ctx *gins.Context) {
		var in CreateRoleRequest
		if err := gins.BindBody(ctx, &in.Role); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.SetOperation(ctx, RoleAPI_CreateRole_OperationName)
		srv.CreateRole(ctx, &in)
	}
}

func _RoleAPI_UpdateRole0_GINRPC_Handler(srv RoleAPIGINRPCServer) func(ctx *gins.Context) {
	return func(ctx *gins.Context) {
		var in UpdateRoleRequest
		if err := gins.BindBody(ctx, &in.Role); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		if err := gins.BindURI(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.SetOperation(ctx, RoleAPI_UpdateRole_OperationName)
		srv.UpdateRole(ctx, &in)
	}
}

func _RoleAPI_DeleteRole0_GINRPC_Handler(srv RoleAPIGINRPCServer) func(ctx *gins.Context) {
	return func(ctx *gins.Context) {
		var in DeleteRoleRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		if err := gins.BindURI(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.SetOperation(ctx, RoleAPI_DeleteRole_OperationName)
		srv.DeleteRole(ctx, &in)
	}
}
