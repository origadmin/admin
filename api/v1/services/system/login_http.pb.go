// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             (unknown)
// source: system/login.proto

package system

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationLoginServiceCaptchaId = "/api.v1.services.system.LoginService/CaptchaId"
const OperationLoginServiceCaptchaImage = "/api.v1.services.system.LoginService/CaptchaImage"
const OperationLoginServiceCaptchaResource = "/api.v1.services.system.LoginService/CaptchaResource"
const OperationLoginServiceCaptchaResources = "/api.v1.services.system.LoginService/CaptchaResources"
const OperationLoginServiceLogin = "/api.v1.services.system.LoginService/Login"
const OperationLoginServiceLogout = "/api.v1.services.system.LoginService/Logout"
const OperationLoginServiceRegister = "/api.v1.services.system.LoginService/Register"
const OperationLoginServiceTokenRefresh = "/api.v1.services.system.LoginService/TokenRefresh"

type LoginServiceHTTPServer interface {
	CaptchaId(context.Context, *CaptchaIdRequest) (*CaptchaIdResponse, error)
	CaptchaImage(context.Context, *CaptchaImageRequest) (*CaptchaImageResponse, error)
	CaptchaResource(context.Context, *CaptchaResourceRequest) (*CaptchaResourceResponse, error)
	CaptchaResources(context.Context, *CaptchaResourcesRequest) (*CaptchaResourcesResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	TokenRefresh(context.Context, *TokenRefreshRequest) (*TokenRefreshResponse, error)
}

func RegisterLoginServiceHTTPServer(s *http.Server, srv LoginServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/captcha/id", _LoginService_CaptchaId0_HTTP_Handler(srv))
	r.GET("/captcha/image", _LoginService_CaptchaImage0_HTTP_Handler(srv))
	r.GET("/captcha/id/{id}/{resource}", _LoginService_CaptchaResource0_HTTP_Handler(srv))
	r.GET("/captcha/id/{id}", _LoginService_CaptchaResources0_HTTP_Handler(srv))
	r.POST("/login", _LoginService_Login0_HTTP_Handler(srv))
	r.POST("/logout", _LoginService_Logout0_HTTP_Handler(srv))
	r.POST("/register", _LoginService_Register0_HTTP_Handler(srv))
	r.POST("/token/refresh", _LoginService_TokenRefresh0_HTTP_Handler(srv))
}

func _LoginService_CaptchaId0_HTTP_Handler(srv LoginServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CaptchaIdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoginServiceCaptchaId)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CaptchaId(ctx, req.(*CaptchaIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CaptchaIdResponse)
		return ctx.Result(200, reply)
	}
}

func _LoginService_CaptchaImage0_HTTP_Handler(srv LoginServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CaptchaImageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoginServiceCaptchaImage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CaptchaImage(ctx, req.(*CaptchaImageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CaptchaImageResponse)
		return ctx.Result(200, reply)
	}
}

func _LoginService_CaptchaResource0_HTTP_Handler(srv LoginServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CaptchaResourceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoginServiceCaptchaResource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CaptchaResource(ctx, req.(*CaptchaResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CaptchaResourceResponse)
		return ctx.Result(200, reply)
	}
}

func _LoginService_CaptchaResources0_HTTP_Handler(srv LoginServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CaptchaResourcesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoginServiceCaptchaResources)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CaptchaResources(ctx, req.(*CaptchaResourcesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CaptchaResourcesResponse)
		return ctx.Result(200, reply)
	}
}

func _LoginService_Login0_HTTP_Handler(srv LoginServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoginServiceLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginResponse)
		return ctx.Result(200, reply)
	}
}

func _LoginService_Logout0_HTTP_Handler(srv LoginServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LogoutRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoginServiceLogout)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*LogoutRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutResponse)
		return ctx.Result(200, reply)
	}
}

func _LoginService_Register0_HTTP_Handler(srv LoginServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoginServiceRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterResponse)
		return ctx.Result(200, reply)
	}
}

func _LoginService_TokenRefresh0_HTTP_Handler(srv LoginServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TokenRefreshRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoginServiceTokenRefresh)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TokenRefresh(ctx, req.(*TokenRefreshRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TokenRefreshResponse)
		return ctx.Result(200, reply)
	}
}

type LoginServiceHTTPClient interface {
	CaptchaId(ctx context.Context, req *CaptchaIdRequest, opts ...http.CallOption) (rsp *CaptchaIdResponse, err error)
	CaptchaImage(ctx context.Context, req *CaptchaImageRequest, opts ...http.CallOption) (rsp *CaptchaImageResponse, err error)
	CaptchaResource(ctx context.Context, req *CaptchaResourceRequest, opts ...http.CallOption) (rsp *CaptchaResourceResponse, err error)
	CaptchaResources(ctx context.Context, req *CaptchaResourcesRequest, opts ...http.CallOption) (rsp *CaptchaResourcesResponse, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *LoginResponse, err error)
	Logout(ctx context.Context, req *LogoutRequest, opts ...http.CallOption) (rsp *LogoutResponse, err error)
	Register(ctx context.Context, req *RegisterRequest, opts ...http.CallOption) (rsp *RegisterResponse, err error)
	TokenRefresh(ctx context.Context, req *TokenRefreshRequest, opts ...http.CallOption) (rsp *TokenRefreshResponse, err error)
}

type LoginServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewLoginServiceHTTPClient(client *http.Client) LoginServiceHTTPClient {
	return &LoginServiceHTTPClientImpl{client}
}

func (c *LoginServiceHTTPClientImpl) CaptchaId(ctx context.Context, in *CaptchaIdRequest, opts ...http.CallOption) (*CaptchaIdResponse, error) {
	var out CaptchaIdResponse
	pattern := "/captcha/id"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLoginServiceCaptchaId))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *LoginServiceHTTPClientImpl) CaptchaImage(ctx context.Context, in *CaptchaImageRequest, opts ...http.CallOption) (*CaptchaImageResponse, error) {
	var out CaptchaImageResponse
	pattern := "/captcha/image"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLoginServiceCaptchaImage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *LoginServiceHTTPClientImpl) CaptchaResource(ctx context.Context, in *CaptchaResourceRequest, opts ...http.CallOption) (*CaptchaResourceResponse, error) {
	var out CaptchaResourceResponse
	pattern := "/captcha/id/{id}/{resource}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLoginServiceCaptchaResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *LoginServiceHTTPClientImpl) CaptchaResources(ctx context.Context, in *CaptchaResourcesRequest, opts ...http.CallOption) (*CaptchaResourcesResponse, error) {
	var out CaptchaResourcesResponse
	pattern := "/captcha/id/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLoginServiceCaptchaResources))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *LoginServiceHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*LoginResponse, error) {
	var out LoginResponse
	pattern := "/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLoginServiceLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *LoginServiceHTTPClientImpl) Logout(ctx context.Context, in *LogoutRequest, opts ...http.CallOption) (*LogoutResponse, error) {
	var out LogoutResponse
	pattern := "/logout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLoginServiceLogout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *LoginServiceHTTPClientImpl) Register(ctx context.Context, in *RegisterRequest, opts ...http.CallOption) (*RegisterResponse, error) {
	var out RegisterResponse
	pattern := "/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLoginServiceRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *LoginServiceHTTPClientImpl) TokenRefresh(ctx context.Context, in *TokenRefreshRequest, opts ...http.CallOption) (*TokenRefreshResponse, error) {
	var out TokenRefreshResponse
	pattern := "/token/refresh"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLoginServiceTokenRefresh))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
