// Code generated by protoc-gen-go-agent. DO NOT EDIT.
// versions:
// - protoc-gen-go-agent unknown
// - protoc             (unknown)
// source: system/login.proto

package system

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	agent "github.com/origadmin/runtime/agent"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1
const _ = agent.ApiVersionV1

type LoginAPIAgent interface {
	CaptchaID(context.Context, *CaptchaIDRequest) (*CaptchaIDResponse, error)
	CaptchaImage(context.Context, *CaptchaImageRequest) (*CaptchaImageResponse, error)
	CaptchaResource(context.Context, *CaptchaResourceRequest) (*CaptchaResourceResponse, error)
	CaptchaResources(context.Context, *CaptchaResourcesRequest) (*CaptchaResourcesResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	TokenRefresh(context.Context, *TokenRefreshRequest) (*TokenRefreshResponse, error)
}

func _LoginAPI_CaptchaID0_HTTPAgent_Handler(srv LoginAPIAgent) http.HandlerFunc {
	return func(ctx http.Context) error {
		var in CaptchaIDRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoginAPICaptchaID)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CaptchaID(ctx, req.(*CaptchaIDRequest))
		})
		cctx := agent.NewHTTPContext(ctx, ctx)
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CaptchaIDResponse)
		if reply == nil {
			return nil
		}
		return ctx.Result(200, reply)
	}
}

func _LoginAPI_CaptchaImage0_HTTPAgent_Handler(srv LoginAPIAgent) http.HandlerFunc {
	return func(ctx http.Context) error {
		var in CaptchaImageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoginAPICaptchaImage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CaptchaImage(ctx, req.(*CaptchaImageRequest))
		})
		cctx := agent.NewHTTPContext(ctx, ctx)
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CaptchaImageResponse)
		if reply == nil {
			return nil
		}
		return ctx.Result(200, reply)
	}
}

func _LoginAPI_CaptchaResource0_HTTPAgent_Handler(srv LoginAPIAgent) http.HandlerFunc {
	return func(ctx http.Context) error {
		var in CaptchaResourceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoginAPICaptchaResource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CaptchaResource(ctx, req.(*CaptchaResourceRequest))
		})
		cctx := agent.NewHTTPContext(ctx, ctx)
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CaptchaResourceResponse)
		if reply == nil {
			return nil
		}
		return ctx.Result(200, reply)
	}
}

func _LoginAPI_CaptchaResources0_HTTPAgent_Handler(srv LoginAPIAgent) http.HandlerFunc {
	return func(ctx http.Context) error {
		var in CaptchaResourcesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoginAPICaptchaResources)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CaptchaResources(ctx, req.(*CaptchaResourcesRequest))
		})
		cctx := agent.NewHTTPContext(ctx, ctx)
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CaptchaResourcesResponse)
		if reply == nil {
			return nil
		}
		return ctx.Result(200, reply)
	}
}

func _LoginAPI_Login0_HTTPAgent_Handler(srv LoginAPIAgent) http.HandlerFunc {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoginAPILogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		cctx := agent.NewHTTPContext(ctx, ctx)
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginResponse)
		if reply == nil {
			return nil
		}
		return ctx.Result(200, reply)
	}
}

func _LoginAPI_Logout0_HTTPAgent_Handler(srv LoginAPIAgent) http.HandlerFunc {
	return func(ctx http.Context) error {
		var in LogoutRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoginAPILogout)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*LogoutRequest))
		})
		cctx := agent.NewHTTPContext(ctx, ctx)
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutResponse)
		if reply == nil {
			return nil
		}
		return ctx.Result(200, reply)
	}
}

func _LoginAPI_Register0_HTTPAgent_Handler(srv LoginAPIAgent) http.HandlerFunc {
	return func(ctx http.Context) error {
		var in RegisterRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoginAPIRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterRequest))
		})
		cctx := agent.NewHTTPContext(ctx, ctx)
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterResponse)
		if reply == nil {
			return nil
		}
		return ctx.Result(200, reply)
	}
}

func _LoginAPI_TokenRefresh0_HTTPAgent_Handler(srv LoginAPIAgent) http.HandlerFunc {
	return func(ctx http.Context) error {
		var in TokenRefreshRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoginAPITokenRefresh)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TokenRefresh(ctx, req.(*TokenRefreshRequest))
		})
		cctx := agent.NewHTTPContext(ctx, ctx)
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TokenRefreshResponse)
		if reply == nil {
			return nil
		}
		return ctx.Result(200, reply)
	}
}

func RegisterLoginAPIAgent(ag agent.HTTPAgent, srv LoginAPIAgent) {
	r := ag.Route()
	r.GET("/captcha/id", _LoginAPI_CaptchaID0_HTTPAgent_Handler(srv))
	r.GET("/captcha/image", _LoginAPI_CaptchaImage0_HTTPAgent_Handler(srv))
	r.GET("/captcha/id/:id/:resource", _LoginAPI_CaptchaResource0_HTTPAgent_Handler(srv))
	r.GET("/captcha/id/:id", _LoginAPI_CaptchaResources0_HTTPAgent_Handler(srv))
	r.POST("/login", _LoginAPI_Login0_HTTPAgent_Handler(srv))
	r.POST("/logout", _LoginAPI_Logout0_HTTPAgent_Handler(srv))
	r.POST("/register", _LoginAPI_Register0_HTTPAgent_Handler(srv))
	r.POST("/token/refresh", _LoginAPI_TokenRefresh0_HTTPAgent_Handler(srv))
}
