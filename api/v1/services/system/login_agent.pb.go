// Code generated by protoc-gen-go-agent. DO NOT EDIT.
// versions:
// - protoc-gen-go-agent unknown
// - protoc             (unknown)
// source: system/login.proto

package system

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	agent "github.com/origadmin/runtime/agent"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1
const _ = agent.ApiVersionV1

type LoginServiceAgent interface {
	Captcha(context.Context, *CaptchaRequest) (*CaptchaResponse, error)
	CaptchaAudio(context.Context, *CaptchaAudioRequest) (*CaptchaAudioResponse, error)
	CaptchaId(context.Context, *CaptchaIdRequest) (*CaptchaIdResponse, error)
	CaptchaImage(context.Context, *CaptchaImageRequest) (*CaptchaImageResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	TokenRefresh(context.Context, *TokenRefreshRequest) (*TokenRefreshResponse, error)
}

func _LoginService_Captcha0_HTTPAgent_Handler(srv LoginServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in CaptchaRequest
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationLoginServiceCaptcha)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.Captcha(ctx, req.(*CaptchaRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CaptchaResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func _LoginService_CaptchaId0_HTTPAgent_Handler(srv LoginServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in CaptchaIdRequest
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationLoginServiceCaptchaId)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.CaptchaId(ctx, req.(*CaptchaIdRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CaptchaIdResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func _LoginService_CaptchaImage0_HTTPAgent_Handler(srv LoginServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in CaptchaImageRequest
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationLoginServiceCaptchaImage)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.CaptchaImage(ctx, req.(*CaptchaImageRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CaptchaImageResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func _LoginService_CaptchaAudio0_HTTPAgent_Handler(srv LoginServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in CaptchaAudioRequest
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationLoginServiceCaptchaAudio)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.CaptchaAudio(ctx, req.(*CaptchaAudioRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CaptchaAudioResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func _LoginService_Login0_HTTPAgent_Handler(srv LoginServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in LoginRequest
		if err := cctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationLoginServiceLogin)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func _LoginService_Logout0_HTTPAgent_Handler(srv LoginServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in LogoutRequest
		if err := cctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationLoginServiceLogout)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.Logout(ctx, req.(*LogoutRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func _LoginService_Register0_HTTPAgent_Handler(srv LoginServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in RegisterRequest
		if err := cctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationLoginServiceRegister)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.Register(ctx, req.(*RegisterRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func _LoginService_TokenRefresh0_HTTPAgent_Handler(srv LoginServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in TokenRefreshRequest
		if err := cctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationLoginServiceTokenRefresh)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.TokenRefresh(ctx, req.(*TokenRefreshRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TokenRefreshResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func RegisterLoginServiceAgent(ag agent.HTTPAgent, srv LoginServiceAgent) {
	r := ag.Route()
	r.GET("/captcha", _LoginService_Captcha0_HTTPAgent_Handler(srv))
	r.GET("/captcha/id", _LoginService_CaptchaId0_HTTPAgent_Handler(srv))
	r.GET("/captcha/image", _LoginService_CaptchaImage0_HTTPAgent_Handler(srv))
	r.GET("/captcha/audio", _LoginService_CaptchaAudio0_HTTPAgent_Handler(srv))
	r.POST("/login", _LoginService_Login0_HTTPAgent_Handler(srv))
	r.POST("/logout", _LoginService_Logout0_HTTPAgent_Handler(srv))
	r.POST("/register", _LoginService_Register0_HTTPAgent_Handler(srv))
	r.POST("/token/refresh", _LoginService_TokenRefresh0_HTTPAgent_Handler(srv))
}
