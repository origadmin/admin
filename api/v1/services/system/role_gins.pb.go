// Code generated by protoc-gen-go-gins. DO NOT EDIT.
// versions:
// - protoc-gen-go-gins 0.0.11
// - protoc             (unknown)
// source: system/role.proto

package system

import (
	context "context"
	gins "github.com/origadmin/contrib/transport/gins"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)

const _ = gins.SupportPackageIsVersion1

const RoleAPI_CreateRole_OperationName = "/api.v1.services.system.RoleAPI/CreateRole"
const RoleAPI_DeleteRole_OperationName = "/api.v1.services.system.RoleAPI/DeleteRole"
const RoleAPI_GetRole_OperationName = "/api.v1.services.system.RoleAPI/GetRole"
const RoleAPI_ListRoles_OperationName = "/api.v1.services.system.RoleAPI/ListRoles"
const RoleAPI_UpdateRole_OperationName = "/api.v1.services.system.RoleAPI/UpdateRole"

type RoleAPIGINSServer interface {
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error)
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error)
}

func RegisterRoleAPIGINSServer(router gins.IRouter, srv RoleAPIGINSServer) {
	router.GET("/sys/roles", _RoleAPI_ListRoles0_GIN_Handler(srv))
	router.GET("/sys/roles/:id", _RoleAPI_GetRole0_GIN_Handler(srv))
	router.POST("/sys/roles", _RoleAPI_CreateRole0_GIN_Handler(srv))
	router.PUT("/sys/roles/:role.id", _RoleAPI_UpdateRole0_GIN_Handler(srv))
	router.DELETE("/sys/roles/:id", _RoleAPI_DeleteRole0_GIN_Handler(srv))
}

func _RoleAPI_ListRoles0_GIN_Handler(srv RoleAPIGINSServer) gins.HandlerFunc {
	return func(ctx *gins.Context) {
		var in ListRolesRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		gins.SetOperation(ctx, RoleAPI_ListRoles_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.ListRoles(newCtx, &in)
		if err != nil {
			gins.JSON(ctx, 500, err)
			return
		}
		gins.JSON(ctx, 200, reply)
		return
	}
}

func _RoleAPI_GetRole0_GIN_Handler(srv RoleAPIGINSServer) gins.HandlerFunc {
	return func(ctx *gins.Context) {
		var in GetRoleRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		if err := gins.BindURI(ctx, &in); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		gins.SetOperation(ctx, RoleAPI_GetRole_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.GetRole(newCtx, &in)
		if err != nil {
			gins.JSON(ctx, 500, err)
			return
		}
		gins.JSON(ctx, 200, reply)
		return
	}
}

func _RoleAPI_CreateRole0_GIN_Handler(srv RoleAPIGINSServer) gins.HandlerFunc {
	return func(ctx *gins.Context) {
		var in CreateRoleRequest
		if err := gins.BindBody(ctx, &in.Role); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		gins.SetOperation(ctx, RoleAPI_CreateRole_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.CreateRole(newCtx, &in)
		if err != nil {
			gins.JSON(ctx, 500, err)
			return
		}
		gins.JSON(ctx, 200, reply)
		return
	}
}

func _RoleAPI_UpdateRole0_GIN_Handler(srv RoleAPIGINSServer) gins.HandlerFunc {
	return func(ctx *gins.Context) {
		var in UpdateRoleRequest
		if err := gins.BindBody(ctx, &in.Role); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		if err := gins.BindURI(ctx, &in); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		gins.SetOperation(ctx, RoleAPI_UpdateRole_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.UpdateRole(newCtx, &in)
		if err != nil {
			gins.JSON(ctx, 500, err)
			return
		}
		gins.JSON(ctx, 200, reply)
		return
	}
}

func _RoleAPI_DeleteRole0_GIN_Handler(srv RoleAPIGINSServer) gins.HandlerFunc {
	return func(ctx *gins.Context) {
		var in DeleteRoleRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		if err := gins.BindURI(ctx, &in); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		gins.SetOperation(ctx, RoleAPI_DeleteRole_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.DeleteRole(newCtx, &in)
		if err != nil {
			gins.JSON(ctx, 500, err)
			return
		}
		gins.JSON(ctx, 200, reply)
		return
	}
}

type RoleAPIGINSClient interface {
	CreateRole(ctx context.Context, req *CreateRoleRequest, opts ...gins.CallOption) (rsp *CreateRoleResponse, err error)
	DeleteRole(ctx context.Context, req *DeleteRoleRequest, opts ...gins.CallOption) (rsp *DeleteRoleResponse, err error)
	GetRole(ctx context.Context, req *GetRoleRequest, opts ...gins.CallOption) (rsp *GetRoleResponse, err error)
	ListRoles(ctx context.Context, req *ListRolesRequest, opts ...gins.CallOption) (rsp *ListRolesResponse, err error)
	UpdateRole(ctx context.Context, req *UpdateRoleRequest, opts ...gins.CallOption) (rsp *UpdateRoleResponse, err error)
}

type RoleAPIGINSClientImpl struct {
	cc *gins.Client
}

func NewRoleAPIGINSClient(client *gins.Client) RoleAPIGINSClient {
	return &RoleAPIGINSClientImpl{client}
}

func (c *RoleAPIGINSClientImpl) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...gins.CallOption) (*CreateRoleResponse, error) {
	var out CreateRoleResponse
	pattern := "/sys/roles"
	path := gins.EncodeURL(pattern, in, false)
	opts = append(opts, gins.Operation(RoleAPI_CreateRole_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Role, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RoleAPIGINSClientImpl) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...gins.CallOption) (*DeleteRoleResponse, error) {
	var out DeleteRoleResponse
	pattern := "/sys/roles/{id}"
	path := gins.EncodeURL(pattern, in, true)
	opts = append(opts, gins.Operation(RoleAPI_DeleteRole_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RoleAPIGINSClientImpl) GetRole(ctx context.Context, in *GetRoleRequest, opts ...gins.CallOption) (*GetRoleResponse, error) {
	var out GetRoleResponse
	pattern := "/sys/roles/{id}"
	path := gins.EncodeURL(pattern, in, true)
	opts = append(opts, gins.Operation(RoleAPI_GetRole_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RoleAPIGINSClientImpl) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...gins.CallOption) (*ListRolesResponse, error) {
	var out ListRolesResponse
	pattern := "/sys/roles"
	path := gins.EncodeURL(pattern, in, true)
	opts = append(opts, gins.Operation(RoleAPI_ListRoles_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RoleAPIGINSClientImpl) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...gins.CallOption) (*UpdateRoleResponse, error) {
	var out UpdateRoleResponse
	pattern := "/sys/roles/{role.id}"
	path := gins.EncodeURL(pattern, in, false)
	opts = append(opts, gins.Operation(RoleAPI_UpdateRole_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Role, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
