// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: system/department.proto

package system

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListDepartmentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDepartmentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDepartmentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDepartmentsRequestMultiError, or nil if none found.
func (m *ListDepartmentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDepartmentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Current

	// no validation rules for PageSize

	// no validation rules for PageToken

	// no validation rules for NoPaging

	// no validation rules for OnlyCount

	if len(errors) > 0 {
		return ListDepartmentsRequestMultiError(errors)
	}

	return nil
}

// ListDepartmentsRequestMultiError is an error wrapping multiple validation
// errors returned by ListDepartmentsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDepartmentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDepartmentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDepartmentsRequestMultiError) AllErrors() []error { return m }

// ListDepartmentsRequestValidationError is the validation error returned by
// ListDepartmentsRequest.Validate if the designated constraints aren't met.
type ListDepartmentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDepartmentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDepartmentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDepartmentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDepartmentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDepartmentsRequestValidationError) ErrorName() string {
	return "ListDepartmentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDepartmentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDepartmentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDepartmentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDepartmentsRequestValidationError{}

// Validate checks the field values on ListDepartmentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDepartmentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDepartmentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDepartmentsResponseMultiError, or nil if none found.
func (m *ListDepartmentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDepartmentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalSize

	for idx, item := range m.GetDepartments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDepartmentsResponseValidationError{
						field:  fmt.Sprintf("Departments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDepartmentsResponseValidationError{
						field:  fmt.Sprintf("Departments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDepartmentsResponseValidationError{
					field:  fmt.Sprintf("Departments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Current

	// no validation rules for PageSize

	// no validation rules for NextPageToken

	if m.Extra != nil {

		if all {
			switch v := interface{}(m.GetExtra()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDepartmentsResponseValidationError{
						field:  "Extra",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDepartmentsResponseValidationError{
						field:  "Extra",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExtra()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDepartmentsResponseValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDepartmentsResponseMultiError(errors)
	}

	return nil
}

// ListDepartmentsResponseMultiError is an error wrapping multiple validation
// errors returned by ListDepartmentsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDepartmentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDepartmentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDepartmentsResponseMultiError) AllErrors() []error { return m }

// ListDepartmentsResponseValidationError is the validation error returned by
// ListDepartmentsResponse.Validate if the designated constraints aren't met.
type ListDepartmentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDepartmentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDepartmentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDepartmentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDepartmentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDepartmentsResponseValidationError) ErrorName() string {
	return "ListDepartmentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDepartmentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDepartmentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDepartmentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDepartmentsResponseValidationError{}

// Validate checks the field values on GetDepartmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDepartmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDepartmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDepartmentRequestMultiError, or nil if none found.
func (m *GetDepartmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDepartmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetDepartmentRequestMultiError(errors)
	}

	return nil
}

// GetDepartmentRequestMultiError is an error wrapping multiple validation
// errors returned by GetDepartmentRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDepartmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDepartmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDepartmentRequestMultiError) AllErrors() []error { return m }

// GetDepartmentRequestValidationError is the validation error returned by
// GetDepartmentRequest.Validate if the designated constraints aren't met.
type GetDepartmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDepartmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDepartmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDepartmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDepartmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDepartmentRequestValidationError) ErrorName() string {
	return "GetDepartmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDepartmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDepartmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDepartmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDepartmentRequestValidationError{}

// Validate checks the field values on GetDepartmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDepartmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDepartmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDepartmentResponseMultiError, or nil if none found.
func (m *GetDepartmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDepartmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDepartment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDepartmentResponseValidationError{
					field:  "Department",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDepartmentResponseValidationError{
					field:  "Department",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDepartment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDepartmentResponseValidationError{
				field:  "Department",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDepartmentResponseMultiError(errors)
	}

	return nil
}

// GetDepartmentResponseMultiError is an error wrapping multiple validation
// errors returned by GetDepartmentResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDepartmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDepartmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDepartmentResponseMultiError) AllErrors() []error { return m }

// GetDepartmentResponseValidationError is the validation error returned by
// GetDepartmentResponse.Validate if the designated constraints aren't met.
type GetDepartmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDepartmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDepartmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDepartmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDepartmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDepartmentResponseValidationError) ErrorName() string {
	return "GetDepartmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDepartmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDepartmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDepartmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDepartmentResponseValidationError{}

// Validate checks the field values on CreateDepartmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDepartmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDepartmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDepartmentRequestMultiError, or nil if none found.
func (m *CreateDepartmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDepartmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	// no validation rules for DepartmentId

	if all {
		switch v := interface{}(m.GetDepartment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDepartmentRequestValidationError{
					field:  "Department",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDepartmentRequestValidationError{
					field:  "Department",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDepartment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDepartmentRequestValidationError{
				field:  "Department",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDepartmentRequestMultiError(errors)
	}

	return nil
}

// CreateDepartmentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDepartmentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDepartmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDepartmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDepartmentRequestMultiError) AllErrors() []error { return m }

// CreateDepartmentRequestValidationError is the validation error returned by
// CreateDepartmentRequest.Validate if the designated constraints aren't met.
type CreateDepartmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDepartmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDepartmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDepartmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDepartmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDepartmentRequestValidationError) ErrorName() string {
	return "CreateDepartmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDepartmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDepartmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDepartmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDepartmentRequestValidationError{}

// Validate checks the field values on CreateDepartmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDepartmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDepartmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDepartmentResponseMultiError, or nil if none found.
func (m *CreateDepartmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDepartmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDepartment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDepartmentResponseValidationError{
					field:  "Department",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDepartmentResponseValidationError{
					field:  "Department",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDepartment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDepartmentResponseValidationError{
				field:  "Department",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDepartmentResponseMultiError(errors)
	}

	return nil
}

// CreateDepartmentResponseMultiError is an error wrapping multiple validation
// errors returned by CreateDepartmentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateDepartmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDepartmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDepartmentResponseMultiError) AllErrors() []error { return m }

// CreateDepartmentResponseValidationError is the validation error returned by
// CreateDepartmentResponse.Validate if the designated constraints aren't met.
type CreateDepartmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDepartmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDepartmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDepartmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDepartmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDepartmentResponseValidationError) ErrorName() string {
	return "CreateDepartmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDepartmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDepartmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDepartmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDepartmentResponseValidationError{}

// Validate checks the field values on UpdateDepartmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDepartmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDepartmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDepartmentRequestMultiError, or nil if none found.
func (m *UpdateDepartmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDepartmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDepartment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDepartmentRequestValidationError{
					field:  "Department",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDepartmentRequestValidationError{
					field:  "Department",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDepartment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDepartmentRequestValidationError{
				field:  "Department",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDepartmentRequestMultiError(errors)
	}

	return nil
}

// UpdateDepartmentRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDepartmentRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDepartmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDepartmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDepartmentRequestMultiError) AllErrors() []error { return m }

// UpdateDepartmentRequestValidationError is the validation error returned by
// UpdateDepartmentRequest.Validate if the designated constraints aren't met.
type UpdateDepartmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDepartmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDepartmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDepartmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDepartmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDepartmentRequestValidationError) ErrorName() string {
	return "UpdateDepartmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDepartmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDepartmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDepartmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDepartmentRequestValidationError{}

// Validate checks the field values on UpdateDepartmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDepartmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDepartmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDepartmentResponseMultiError, or nil if none found.
func (m *UpdateDepartmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDepartmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDepartment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDepartmentResponseValidationError{
					field:  "Department",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDepartmentResponseValidationError{
					field:  "Department",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDepartment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDepartmentResponseValidationError{
				field:  "Department",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDepartmentResponseMultiError(errors)
	}

	return nil
}

// UpdateDepartmentResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateDepartmentResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateDepartmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDepartmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDepartmentResponseMultiError) AllErrors() []error { return m }

// UpdateDepartmentResponseValidationError is the validation error returned by
// UpdateDepartmentResponse.Validate if the designated constraints aren't met.
type UpdateDepartmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDepartmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDepartmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDepartmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDepartmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDepartmentResponseValidationError) ErrorName() string {
	return "UpdateDepartmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDepartmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDepartmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDepartmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDepartmentResponseValidationError{}

// Validate checks the field values on DeleteDepartmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDepartmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDepartmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDepartmentRequestMultiError, or nil if none found.
func (m *DeleteDepartmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDepartmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteDepartmentRequestMultiError(errors)
	}

	return nil
}

// DeleteDepartmentRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDepartmentRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDepartmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDepartmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDepartmentRequestMultiError) AllErrors() []error { return m }

// DeleteDepartmentRequestValidationError is the validation error returned by
// DeleteDepartmentRequest.Validate if the designated constraints aren't met.
type DeleteDepartmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDepartmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDepartmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDepartmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDepartmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDepartmentRequestValidationError) ErrorName() string {
	return "DeleteDepartmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDepartmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDepartmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDepartmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDepartmentRequestValidationError{}

// Validate checks the field values on DeleteDepartmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDepartmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDepartmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDepartmentResponseMultiError, or nil if none found.
func (m *DeleteDepartmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDepartmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEmpty()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteDepartmentResponseValidationError{
					field:  "Empty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteDepartmentResponseValidationError{
					field:  "Empty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEmpty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteDepartmentResponseValidationError{
				field:  "Empty",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteDepartmentResponseMultiError(errors)
	}

	return nil
}

// DeleteDepartmentResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteDepartmentResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteDepartmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDepartmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDepartmentResponseMultiError) AllErrors() []error { return m }

// DeleteDepartmentResponseValidationError is the validation error returned by
// DeleteDepartmentResponse.Validate if the designated constraints aren't met.
type DeleteDepartmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDepartmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDepartmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDepartmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDepartmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDepartmentResponseValidationError) ErrorName() string {
	return "DeleteDepartmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDepartmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDepartmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDepartmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDepartmentResponseValidationError{}
