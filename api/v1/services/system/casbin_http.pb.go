// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             (unknown)
// source: system/casbin.proto

package system

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCasbinSourceServiceListGroupings = "/api.v1.services.system.CasbinSourceService/ListGroupings"
const OperationCasbinSourceServiceListPolicies = "/api.v1.services.system.CasbinSourceService/ListPolicies"
const OperationCasbinSourceServiceWatchUpdate = "/api.v1.services.system.CasbinSourceService/WatchUpdate"

type CasbinSourceServiceHTTPServer interface {
	ListGroupings(context.Context, *ListGroupingsRequest) (*ListGroupingsResponse, error)
	ListPolicies(context.Context, *ListPoliciesRequest) (*ListPoliciesResponse, error)
	WatchUpdate(context.Context, *WatchUpdateRequest) (*WatchUpdateResponse, error)
}

func RegisterCasbinSourceServiceHTTPServer(s *http.Server, srv CasbinSourceServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/casbin/policies", _CasbinSourceService_ListPolicies0_HTTP_Handler(srv))
	r.GET("/casbin/groupings", _CasbinSourceService_ListGroupings0_HTTP_Handler(srv))
	r.GET("/casbin/watch", _CasbinSourceService_WatchUpdate0_HTTP_Handler(srv))
}

func _CasbinSourceService_ListPolicies0_HTTP_Handler(srv CasbinSourceServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPoliciesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCasbinSourceServiceListPolicies)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPolicies(ctx, req.(*ListPoliciesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPoliciesResponse)
		return ctx.Result(200, reply)
	}
}

func _CasbinSourceService_ListGroupings0_HTTP_Handler(srv CasbinSourceServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListGroupingsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCasbinSourceServiceListGroupings)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListGroupings(ctx, req.(*ListGroupingsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListGroupingsResponse)
		return ctx.Result(200, reply)
	}
}

func _CasbinSourceService_WatchUpdate0_HTTP_Handler(srv CasbinSourceServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WatchUpdateRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCasbinSourceServiceWatchUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.WatchUpdate(ctx, req.(*WatchUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*WatchUpdateResponse)
		return ctx.Result(200, reply)
	}
}

type CasbinSourceServiceHTTPClient interface {
	ListGroupings(ctx context.Context, req *ListGroupingsRequest, opts ...http.CallOption) (rsp *ListGroupingsResponse, err error)
	ListPolicies(ctx context.Context, req *ListPoliciesRequest, opts ...http.CallOption) (rsp *ListPoliciesResponse, err error)
	WatchUpdate(ctx context.Context, req *WatchUpdateRequest, opts ...http.CallOption) (rsp *WatchUpdateResponse, err error)
}

type CasbinSourceServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewCasbinSourceServiceHTTPClient(client *http.Client) CasbinSourceServiceHTTPClient {
	return &CasbinSourceServiceHTTPClientImpl{client}
}

func (c *CasbinSourceServiceHTTPClientImpl) ListGroupings(ctx context.Context, in *ListGroupingsRequest, opts ...http.CallOption) (*ListGroupingsResponse, error) {
	var out ListGroupingsResponse
	pattern := "/casbin/groupings"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCasbinSourceServiceListGroupings))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CasbinSourceServiceHTTPClientImpl) ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...http.CallOption) (*ListPoliciesResponse, error) {
	var out ListPoliciesResponse
	pattern := "/casbin/policies"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCasbinSourceServiceListPolicies))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CasbinSourceServiceHTTPClientImpl) WatchUpdate(ctx context.Context, in *WatchUpdateRequest, opts ...http.CallOption) (*WatchUpdateResponse, error) {
	var out WatchUpdateResponse
	pattern := "/casbin/watch"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCasbinSourceServiceWatchUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
