// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             (unknown)
// source: system/department.proto

package system

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDepartmentServiceCreateDepartment = "/api.v1.services.system.DepartmentService/CreateDepartment"
const OperationDepartmentServiceDeleteDepartment = "/api.v1.services.system.DepartmentService/DeleteDepartment"
const OperationDepartmentServiceGetDepartment = "/api.v1.services.system.DepartmentService/GetDepartment"
const OperationDepartmentServiceListDepartments = "/api.v1.services.system.DepartmentService/ListDepartments"
const OperationDepartmentServiceUpdateDepartment = "/api.v1.services.system.DepartmentService/UpdateDepartment"

type DepartmentServiceHTTPServer interface {
	CreateDepartment(context.Context, *CreateDepartmentRequest) (*CreateDepartmentResponse, error)
	DeleteDepartment(context.Context, *DeleteDepartmentRequest) (*DeleteDepartmentResponse, error)
	GetDepartment(context.Context, *GetDepartmentRequest) (*GetDepartmentResponse, error)
	ListDepartments(context.Context, *ListDepartmentsRequest) (*ListDepartmentsResponse, error)
	UpdateDepartment(context.Context, *UpdateDepartmentRequest) (*UpdateDepartmentResponse, error)
}

func RegisterDepartmentServiceHTTPServer(s *http.Server, srv DepartmentServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/sys/departments", _DepartmentService_ListDepartments0_HTTP_Handler(srv))
	r.GET("/sys/departments/{id}", _DepartmentService_GetDepartment0_HTTP_Handler(srv))
	r.POST("/sys/departments", _DepartmentService_CreateDepartment0_HTTP_Handler(srv))
	r.PUT("/sys/departments/{department.id}", _DepartmentService_UpdateDepartment0_HTTP_Handler(srv))
	r.DELETE("/sys/departments/{id}", _DepartmentService_DeleteDepartment0_HTTP_Handler(srv))
}

func _DepartmentService_ListDepartments0_HTTP_Handler(srv DepartmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDepartmentsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDepartmentServiceListDepartments)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDepartments(ctx, req.(*ListDepartmentsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDepartmentsResponse)
		return ctx.Result(200, reply)
	}
}

func _DepartmentService_GetDepartment0_HTTP_Handler(srv DepartmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDepartmentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDepartmentServiceGetDepartment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDepartment(ctx, req.(*GetDepartmentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDepartmentResponse)
		return ctx.Result(200, reply)
	}
}

func _DepartmentService_CreateDepartment0_HTTP_Handler(srv DepartmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDepartmentRequest
		if err := ctx.Bind(&in.Department); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDepartmentServiceCreateDepartment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDepartment(ctx, req.(*CreateDepartmentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateDepartmentResponse)
		return ctx.Result(200, reply)
	}
}

func _DepartmentService_UpdateDepartment0_HTTP_Handler(srv DepartmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDepartmentRequest
		if err := ctx.Bind(&in.Department); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDepartmentServiceUpdateDepartment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDepartment(ctx, req.(*UpdateDepartmentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDepartmentResponse)
		return ctx.Result(200, reply)
	}
}

func _DepartmentService_DeleteDepartment0_HTTP_Handler(srv DepartmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDepartmentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDepartmentServiceDeleteDepartment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDepartment(ctx, req.(*DeleteDepartmentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDepartmentResponse)
		return ctx.Result(200, reply)
	}
}

type DepartmentServiceHTTPClient interface {
	CreateDepartment(ctx context.Context, req *CreateDepartmentRequest, opts ...http.CallOption) (rsp *CreateDepartmentResponse, err error)
	DeleteDepartment(ctx context.Context, req *DeleteDepartmentRequest, opts ...http.CallOption) (rsp *DeleteDepartmentResponse, err error)
	GetDepartment(ctx context.Context, req *GetDepartmentRequest, opts ...http.CallOption) (rsp *GetDepartmentResponse, err error)
	ListDepartments(ctx context.Context, req *ListDepartmentsRequest, opts ...http.CallOption) (rsp *ListDepartmentsResponse, err error)
	UpdateDepartment(ctx context.Context, req *UpdateDepartmentRequest, opts ...http.CallOption) (rsp *UpdateDepartmentResponse, err error)
}

type DepartmentServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewDepartmentServiceHTTPClient(client *http.Client) DepartmentServiceHTTPClient {
	return &DepartmentServiceHTTPClientImpl{client}
}

func (c *DepartmentServiceHTTPClientImpl) CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, opts ...http.CallOption) (*CreateDepartmentResponse, error) {
	var out CreateDepartmentResponse
	pattern := "/sys/departments"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDepartmentServiceCreateDepartment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Department, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DepartmentServiceHTTPClientImpl) DeleteDepartment(ctx context.Context, in *DeleteDepartmentRequest, opts ...http.CallOption) (*DeleteDepartmentResponse, error) {
	var out DeleteDepartmentResponse
	pattern := "/sys/departments/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDepartmentServiceDeleteDepartment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DepartmentServiceHTTPClientImpl) GetDepartment(ctx context.Context, in *GetDepartmentRequest, opts ...http.CallOption) (*GetDepartmentResponse, error) {
	var out GetDepartmentResponse
	pattern := "/sys/departments/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDepartmentServiceGetDepartment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DepartmentServiceHTTPClientImpl) ListDepartments(ctx context.Context, in *ListDepartmentsRequest, opts ...http.CallOption) (*ListDepartmentsResponse, error) {
	var out ListDepartmentsResponse
	pattern := "/sys/departments"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDepartmentServiceListDepartments))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DepartmentServiceHTTPClientImpl) UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, opts ...http.CallOption) (*UpdateDepartmentResponse, error) {
	var out UpdateDepartmentResponse
	pattern := "/sys/departments/{department.id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDepartmentServiceUpdateDepartment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Department, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
