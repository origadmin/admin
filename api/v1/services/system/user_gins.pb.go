// Code generated by protoc-gen-go-gins. DO NOT EDIT.
// versions:
// - protoc-gen-go-gins 0.0.6
// - protoc             (unknown)
// source: system/user.proto

package system

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	gins "github.com/origadmin/contrib/transport/gins"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = new(gin.H)
var _ = binding.EncodeURL

const _ = gins.SupportPackageIsVersion1

const UserAPI_CreateUser_OperationName = "/api.v1.services.system.UserAPI/CreateUser"
const UserAPI_DeleteUser_OperationName = "/api.v1.services.system.UserAPI/DeleteUser"
const UserAPI_GetUser_OperationName = "/api.v1.services.system.UserAPI/GetUser"
const UserAPI_ListUsers_OperationName = "/api.v1.services.system.UserAPI/ListUsers"
const UserAPI_UpdateUser_OperationName = "/api.v1.services.system.UserAPI/UpdateUser"

type UserAPIGINSServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
}

func RegisterUserAPIGINSServer(router gins.IRouter, srv UserAPIGINSServer) {
	router.GET("/api/v1/sys/users", _UserAPI_ListUsers0_GIN_Handler(srv))
	router.GET("/api/v1/sys/users/:id", _UserAPI_GetUser0_GIN_Handler(srv))
	router.POST("/api/v1/sys/users", _UserAPI_CreateUser0_GIN_Handler(srv))
	router.PUT("/api/v1/sys/users/:user.id", _UserAPI_UpdateUser0_GIN_Handler(srv))
	router.DELETE("/api/v1/sys/users/:id", _UserAPI_DeleteUser0_GIN_Handler(srv))
}

func _UserAPI_ListUsers0_GIN_Handler(srv UserAPIGINSServer) func(ctx *gins.Context) {
	return func(ctx *gins.Context) {
		var in ListUsersRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.SetOperation(ctx, UserAPI_ListUsers_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.ListUsers(newCtx, &in)
		if err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.ResultJSON(ctx, 200, reply)
		return
	}
}

func _UserAPI_GetUser0_GIN_Handler(srv UserAPIGINSServer) func(ctx *gins.Context) {
	return func(ctx *gins.Context) {
		var in GetUserRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		if err := gins.BindURI(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.SetOperation(ctx, UserAPI_GetUser_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.GetUser(newCtx, &in)
		if err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.ResultJSON(ctx, 200, reply)
		return
	}
}

func _UserAPI_CreateUser0_GIN_Handler(srv UserAPIGINSServer) func(ctx *gins.Context) {
	return func(ctx *gins.Context) {
		var in CreateUserRequest
		if err := gins.BindBody(ctx, &in.User); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.SetOperation(ctx, UserAPI_CreateUser_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.CreateUser(newCtx, &in)
		if err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.ResultJSON(ctx, 200, reply)
		return
	}
}

func _UserAPI_UpdateUser0_GIN_Handler(srv UserAPIGINSServer) func(ctx *gins.Context) {
	return func(ctx *gins.Context) {
		var in UpdateUserRequest
		if err := gins.BindBody(ctx, &in.User); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		if err := gins.BindURI(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.SetOperation(ctx, UserAPI_UpdateUser_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.UpdateUser(newCtx, &in)
		if err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.ResultJSON(ctx, 200, reply)
		return
	}
}

func _UserAPI_DeleteUser0_GIN_Handler(srv UserAPIGINSServer) func(ctx *gins.Context) {
	return func(ctx *gins.Context) {
		var in DeleteUserRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		if err := gins.BindURI(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.SetOperation(ctx, UserAPI_DeleteUser_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.DeleteUser(newCtx, &in)
		if err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.ResultJSON(ctx, 200, reply)
		return
	}
}

type UserAPIGINSClient interface {
	CreateUser(ctx context.Context, req *CreateUserRequest, opts ...gins.CallOption) (rsp *CreateUserResponse, err error)
	DeleteUser(ctx context.Context, req *DeleteUserRequest, opts ...gins.CallOption) (rsp *DeleteUserResponse, err error)
	GetUser(ctx context.Context, req *GetUserRequest, opts ...gins.CallOption) (rsp *GetUserResponse, err error)
	ListUsers(ctx context.Context, req *ListUsersRequest, opts ...gins.CallOption) (rsp *ListUsersResponse, err error)
	UpdateUser(ctx context.Context, req *UpdateUserRequest, opts ...gins.CallOption) (rsp *UpdateUserResponse, err error)
}

type UserAPIGINSClientImpl struct {
	cc *gins.Client
}

func NewUserAPIGINSClient(client *gins.Client) UserAPIGINSClient {
	return &UserAPIGINSClientImpl{client}
}

func (c *UserAPIGINSClientImpl) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...gins.CallOption) (*CreateUserResponse, error) {
	var out CreateUserResponse
	pattern := "/api/v1/sys/users"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, gins.Operation(UserAPI_CreateUser_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.User, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserAPIGINSClientImpl) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...gins.CallOption) (*DeleteUserResponse, error) {
	var out DeleteUserResponse
	pattern := "/api/v1/sys/users/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, gins.Operation(UserAPI_DeleteUser_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserAPIGINSClientImpl) GetUser(ctx context.Context, in *GetUserRequest, opts ...gins.CallOption) (*GetUserResponse, error) {
	var out GetUserResponse
	pattern := "/api/v1/sys/users/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, gins.Operation(UserAPI_GetUser_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserAPIGINSClientImpl) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...gins.CallOption) (*ListUsersResponse, error) {
	var out ListUsersResponse
	pattern := "/api/v1/sys/users"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, gins.Operation(UserAPI_ListUsers_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserAPIGINSClientImpl) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...gins.CallOption) (*UpdateUserResponse, error) {
	var out UpdateUserResponse
	pattern := "/api/v1/sys/users/{user.id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, gins.Operation(UserAPI_UpdateUser_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.User, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
