// Code generated by protoc-gen-go-agent. DO NOT EDIT.
// versions:
// - protoc-gen-go-agent unknown
// - protoc             (unknown)
// source: system/user.proto

package system

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	agent "github.com/origadmin/runtime/agent"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1
const _ = agent.ApiVersionV1

type UserServiceAgent interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	// ResetUserPassword ResetUserPassword reset the user s password
	ResetUserPassword(context.Context, *ResetUserPasswordRequest) (*ResetUserPasswordResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// UpdateUserRoles UpdateUserRoles update the user roles
	UpdateUserRoles(context.Context, *UpdateUserRolesRequest) (*UpdateUserRolesResponse, error)
	// UpdateUserStatus UpdateUserStatus Update the status of the user information
	UpdateUserStatus(context.Context, *UpdateUserStatusRequest) (*UpdateUserStatusResponse, error)
}

func _UserService_ListUsers0_HTTPAgent_Handler(srv UserServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in ListUsersRequest
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationUserServiceListUsers)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.ListUsers(ctx, req.(*ListUsersRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUsersResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func _UserService_GetUser0_HTTPAgent_Handler(srv UserServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in GetUserRequest
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		if err := cctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationUserServiceGetUser)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.GetUser(ctx, req.(*GetUserRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func _UserService_CreateUser0_HTTPAgent_Handler(srv UserServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in CreateUserRequest
		if err := cctx.Bind(&in.User); err != nil {
			return err
		}
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationUserServiceCreateUser)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.CreateUser(ctx, req.(*CreateUserRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateUserResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func _UserService_UpdateUser0_HTTPAgent_Handler(srv UserServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in UpdateUserRequest
		if err := cctx.Bind(&in.User); err != nil {
			return err
		}
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		if err := cctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationUserServiceUpdateUser)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.UpdateUser(ctx, req.(*UpdateUserRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateUserResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func _UserService_DeleteUser0_HTTPAgent_Handler(srv UserServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in DeleteUserRequest
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		if err := cctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationUserServiceDeleteUser)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.DeleteUser(ctx, req.(*DeleteUserRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteUserResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func _UserService_UpdateUserStatus0_HTTPAgent_Handler(srv UserServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in UpdateUserStatusRequest
		if err := cctx.Bind(&in.User); err != nil {
			return err
		}
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		if err := cctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationUserServiceUpdateUserStatus)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.UpdateUserStatus(ctx, req.(*UpdateUserStatusRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateUserStatusResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func _UserService_UpdateUserRoles0_HTTPAgent_Handler(srv UserServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in UpdateUserRolesRequest
		if err := cctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		if err := cctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationUserServiceUpdateUserRoles)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.UpdateUserRoles(ctx, req.(*UpdateUserRolesRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateUserRolesResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func _UserService_ResetUserPassword0_HTTPAgent_Handler(srv UserServiceAgent) http.HandlerFunc {
	return func(cctx http.Context) error {
		var in ResetUserPasswordRequest
		if err := cctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := cctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(cctx, OperationUserServiceResetUserPassword)
		h := cctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			ctx = agent.NewHTTPContext(ctx, cctx)
			return srv.ResetUserPassword(ctx, req.(*ResetUserPasswordRequest))
		})
		out, err := h(cctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResetUserPasswordResponse)
		if reply == nil {
			return nil
		}
		return cctx.Result(200, reply)
	}
}

func RegisterUserServiceAgent(ag agent.HTTPAgent, srv UserServiceAgent) {
	r := ag.Route()
	r.GET("/sys/users", _UserService_ListUsers0_HTTPAgent_Handler(srv))
	r.GET("/sys/users/:id", _UserService_GetUser0_HTTPAgent_Handler(srv))
	r.POST("/sys/users", _UserService_CreateUser0_HTTPAgent_Handler(srv))
	r.PUT("/sys/users/:user.id", _UserService_UpdateUser0_HTTPAgent_Handler(srv))
	r.DELETE("/sys/users/:user.id", _UserService_DeleteUser0_HTTPAgent_Handler(srv))
	r.PUT("/sys/users/:user.id/status", _UserService_UpdateUserStatus0_HTTPAgent_Handler(srv))
	r.PUT("/sys/users/:user.id/roles", _UserService_UpdateUserRoles0_HTTPAgent_Handler(srv))
	r.POST("/sys/users/password/reset", _UserService_ResetUserPassword0_HTTPAgent_Handler(srv))
}
