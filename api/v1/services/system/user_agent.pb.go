// Code generated by protoc-gen-go-agent. DO NOT EDIT.
// versions:
// - protoc-gen-go-agent unknown
// - protoc             (unknown)
// source: system/user.proto

package system

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type UserAPIAgent interface {
	CreateUser(http.Context, *CreateUserRequest) (*CreateUserResponse, error)
	DeleteUser(http.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	GetUser(http.Context, *GetUserRequest) (*GetUserResponse, error)
	ListUsers(http.Context, *ListUsersRequest) (*ListUsersResponse, error)
	UpdateUser(http.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
}

func RegisterUserAPIAgent(s *http.Server, srv UserAPIAgent) {
	r := s.Route("/")
	r.GET("/api/v1/sys/users", _UserAPI_ListUsers0_Agent_Handler(srv))
	r.GET("/api/v1/sys/users/:id", _UserAPI_GetUser0_Agent_Handler(srv))
	r.POST("/api/v1/sys/users", _UserAPI_CreateUser0_Agent_Handler(srv))
	r.PUT("/api/v1/sys/users/:user.id", _UserAPI_UpdateUser0_Agent_Handler(srv))
	r.DELETE("/api/v1/sys/users/:id", _UserAPI_DeleteUser0_Agent_Handler(srv))
}

func _UserAPI_ListUsers0_Agent_Handler(srv UserAPIAgent) http.HandlerFunc {
	return func(ctx http.Context) error {
		var in ListUsersRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserAPIListUsers)
		h := ctx.Middleware(func(_ context.Context, req interface{}) (interface{}, error) {
			return srv.ListUsers(ctx, req.(*ListUsersRequest))
		})
		_, err := h(ctx, &in)
		if err != nil {
			return err
		}
		return nil
	}
}

func _UserAPI_GetUser0_Agent_Handler(srv UserAPIAgent) http.HandlerFunc {
	return func(ctx http.Context) error {
		var in GetUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserAPIGetUser)
		h := ctx.Middleware(func(_ context.Context, req interface{}) (interface{}, error) {
			return srv.GetUser(ctx, req.(*GetUserRequest))
		})
		_, err := h(ctx, &in)
		if err != nil {
			return err
		}
		return nil
	}
}

func _UserAPI_CreateUser0_Agent_Handler(srv UserAPIAgent) http.HandlerFunc {
	return func(ctx http.Context) error {
		var in CreateUserRequest
		if err := ctx.Bind(&in.User); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserAPICreateUser)
		h := ctx.Middleware(func(_ context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUser(ctx, req.(*CreateUserRequest))
		})
		_, err := h(ctx, &in)
		if err != nil {
			return err
		}
		return nil
	}
}

func _UserAPI_UpdateUser0_Agent_Handler(srv UserAPIAgent) http.HandlerFunc {
	return func(ctx http.Context) error {
		var in UpdateUserRequest
		if err := ctx.Bind(&in.User); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserAPIUpdateUser)
		h := ctx.Middleware(func(_ context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUser(ctx, req.(*UpdateUserRequest))
		})
		_, err := h(ctx, &in)
		if err != nil {
			return err
		}
		return nil
	}
}

func _UserAPI_DeleteUser0_Agent_Handler(srv UserAPIAgent) http.HandlerFunc {
	return func(ctx http.Context) error {
		var in DeleteUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserAPIDeleteUser)
		h := ctx.Middleware(func(_ context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUser(ctx, req.(*DeleteUserRequest))
		})
		_, err := h(ctx, &in)
		if err != nil {
			return err
		}
		return nil
	}
}
