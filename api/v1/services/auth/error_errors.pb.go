// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package auth

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsBasisErrorReasonUnspecified(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AuthErrorReason_BASIS_ERROR_REASON_UNSPECIFIED.String() && e.Code == 500
}

func ErrorBasisErrorReasonUnspecified(format string, args ...interface{}) *errors.Error {
	return errors.New(500, AuthErrorReason_BASIS_ERROR_REASON_UNSPECIFIED.String(), fmt.Sprintf(format, args...))
}

func IsBasisErrorReasonInvalidToken(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AuthErrorReason_BASIS_ERROR_REASON_INVALID_TOKEN.String() && e.Code == 400
}

func ErrorBasisErrorReasonInvalidToken(format string, args ...interface{}) *errors.Error {
	return errors.New(400, AuthErrorReason_BASIS_ERROR_REASON_INVALID_TOKEN.String(), fmt.Sprintf(format, args...))
}

func IsBasisErrorReasonInvalidClaims(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AuthErrorReason_BASIS_ERROR_REASON_INVALID_CLAIMS.String() && e.Code == 400
}

func ErrorBasisErrorReasonInvalidClaims(format string, args ...interface{}) *errors.Error {
	return errors.New(400, AuthErrorReason_BASIS_ERROR_REASON_INVALID_CLAIMS.String(), fmt.Sprintf(format, args...))
}

func IsBasisErrorReasonInvalidAuthentication(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AuthErrorReason_BASIS_ERROR_REASON_INVALID_AUTHENTICATION.String() && e.Code == 400
}

func ErrorBasisErrorReasonInvalidAuthentication(format string, args ...interface{}) *errors.Error {
	return errors.New(400, AuthErrorReason_BASIS_ERROR_REASON_INVALID_AUTHENTICATION.String(), fmt.Sprintf(format, args...))
}

func IsBasisErrorReasonInvalidAuthorization(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AuthErrorReason_BASIS_ERROR_REASON_INVALID_AUTHORIZATION.String() && e.Code == 400
}

func ErrorBasisErrorReasonInvalidAuthorization(format string, args ...interface{}) *errors.Error {
	return errors.New(400, AuthErrorReason_BASIS_ERROR_REASON_INVALID_AUTHORIZATION.String(), fmt.Sprintf(format, args...))
}

func IsBasisErrorReasonMissingToken(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AuthErrorReason_BASIS_ERROR_REASON_MISSING_TOKEN.String() && e.Code == 400
}

func ErrorBasisErrorReasonMissingToken(format string, args ...interface{}) *errors.Error {
	return errors.New(400, AuthErrorReason_BASIS_ERROR_REASON_MISSING_TOKEN.String(), fmt.Sprintf(format, args...))
}

func IsBasisErrorReasonTokenNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AuthErrorReason_BASIS_ERROR_REASON_TOKEN_NOT_FOUND.String() && e.Code == 400
}

func ErrorBasisErrorReasonTokenNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, AuthErrorReason_BASIS_ERROR_REASON_TOKEN_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}
