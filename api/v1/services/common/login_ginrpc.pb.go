// Code generated by protoc-gen-go-ginrpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-ginrpc 0.0.6
// - protoc             (unknown)
// source: common/login.proto

package common

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	gins "github.com/origadmin/contrib/transport/gins"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = new(gin.H)
var _ = binding.EncodeURL

const _ = gins.SupportPackageIsVersion1

const LoginAPI_CaptchaID_FullOperation = "/api.v1.services.common.LoginAPI/CaptchaID"
const LoginAPI_CaptchaImage_FullOperation = "/api.v1.services.common.LoginAPI/CaptchaImage"
const LoginAPI_CurrentMenus_FullOperation = "/api.v1.services.common.LoginAPI/CurrentMenus"
const LoginAPI_CurrentUser_FullOperation = "/api.v1.services.common.LoginAPI/CurrentUser"
const LoginAPI_Login_FullOperation = "/api.v1.services.common.LoginAPI/Login"
const LoginAPI_Logout_FullOperation = "/api.v1.services.common.LoginAPI/Logout"

type LoginAPIGINRPCServer interface {
	CaptchaID(*gin.Context, *CaptchaIDRequest)
	CaptchaImage(*gin.Context, *CaptchaImageRequest)
	CurrentMenus(*gin.Context, *CurrentMenusRequest)
	CurrentUser(*gin.Context, *CurrentUserRequest)
	Login(*gin.Context, *LoginRequest)
	Logout(*gin.Context, *LogoutRequest)
}

func RegisterLoginAPIGINRPCServer(router gins.IRouter, srv LoginAPIGINRPCServer) {
	router.GET("/api/v1/captcha/id", _LoginAPI_CaptchaID0_GINRPC_Handler(srv))
	router.GET("/api/v1/captcha/image", _LoginAPI_CaptchaImage0_GINRPC_Handler(srv))
	router.POST("/api/v1/login", _LoginAPI_Login0_GINRPC_Handler(srv))
	router.POST("/api/v1/current/logout", _LoginAPI_Logout0_GINRPC_Handler(srv))
	router.POST("/api/v1/current/user", _LoginAPI_CurrentUser0_GINRPC_Handler(srv))
	router.GET("/api/v1/current/menus", _LoginAPI_CurrentMenus0_GINRPC_Handler(srv))
}

func _LoginAPI_CaptchaID0_GINRPC_Handler(srv LoginAPIGINRPCServer) func(ctx *gins.Context) {
	return func(ctx *gins.Context) {
		var in CaptchaIDRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.SetOperation(ctx, LoginAPI_CaptchaID_OperationName)
		srv.CaptchaID(ctx, &in)
	}
}

func _LoginAPI_CaptchaImage0_GINRPC_Handler(srv LoginAPIGINRPCServer) func(ctx *gins.Context) {
	return func(ctx *gins.Context) {
		var in CaptchaImageRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.SetOperation(ctx, LoginAPI_CaptchaImage_OperationName)
		srv.CaptchaImage(ctx, &in)
	}
}

func _LoginAPI_Login0_GINRPC_Handler(srv LoginAPIGINRPCServer) func(ctx *gins.Context) {
	return func(ctx *gins.Context) {
		var in LoginRequest
		if err := gins.BindBody(ctx, &in.Data); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.SetOperation(ctx, LoginAPI_Login_OperationName)
		srv.Login(ctx, &in)
	}
}

func _LoginAPI_Logout0_GINRPC_Handler(srv LoginAPIGINRPCServer) func(ctx *gins.Context) {
	return func(ctx *gins.Context) {
		var in LogoutRequest
		if err := gins.BindBody(ctx, &in.Data); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.SetOperation(ctx, LoginAPI_Logout_OperationName)
		srv.Logout(ctx, &in)
	}
}

func _LoginAPI_CurrentUser0_GINRPC_Handler(srv LoginAPIGINRPCServer) func(ctx *gins.Context) {
	return func(ctx *gins.Context) {
		var in CurrentUserRequest
		if err := gins.BindBody(ctx, &in.Data); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.SetOperation(ctx, LoginAPI_CurrentUser_OperationName)
		srv.CurrentUser(ctx, &in)
	}
}

func _LoginAPI_CurrentMenus0_GINRPC_Handler(srv LoginAPIGINRPCServer) func(ctx *gins.Context) {
	return func(ctx *gins.Context) {
		var in CurrentMenusRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.SetOperation(ctx, LoginAPI_CurrentMenus_OperationName)
		srv.CurrentMenus(ctx, &in)
	}
}
