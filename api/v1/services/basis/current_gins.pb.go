// Code generated by protoc-gen-go-gins. DO NOT EDIT.
// versions:
// - protoc-gen-go-gins 0.0.11
// - protoc             (unknown)
// source: basis/current.proto

package basis

import (
	context "context"
	gins "github.com/origadmin/contrib/transport/gins"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)

const _ = gins.SupportPackageIsVersion1

const CurrentAPI_CurrentLogout_OperationName = "/api.v1.services.basis.CurrentAPI/CurrentLogout"
const CurrentAPI_ListCurrentMenus_OperationName = "/api.v1.services.basis.CurrentAPI/ListCurrentMenus"
const CurrentAPI_UpdateCurrentRoles_OperationName = "/api.v1.services.basis.CurrentAPI/UpdateCurrentRoles"
const CurrentAPI_UpdateCurrentSetting_OperationName = "/api.v1.services.basis.CurrentAPI/UpdateCurrentSetting"
const CurrentAPI_UpdateCurrentUser_OperationName = "/api.v1.services.basis.CurrentAPI/UpdateCurrentUser"
const CurrentAPI_UpdateCurrentUserPassword_OperationName = "/api.v1.services.basis.CurrentAPI/UpdateCurrentUserPassword"

type CurrentAPIGINSServer interface {
	CurrentLogout(context.Context, *CurrentLogoutRequest) (*CurrentLogoutResponse, error)
	ListCurrentMenus(context.Context, *ListCurrentMenusRequest) (*ListCurrentMenusResponse, error)
	// UpdateCurrentRoles UpdateCurrentRoles Switch the user's current role
	UpdateCurrentRoles(context.Context, *UpdateCurrentRolesRequest) (*UpdateCurrentRolesResponse, error)
	// UpdateCurrentSetting UpdateCurrentSetting User settings are saved
	UpdateCurrentSetting(context.Context, *UpdateCurrentSettingRequest) (*UpdateCurrentSettingResponse, error)
	// UpdateCurrentUser UpdateCurrentUser Update the current user information
	UpdateCurrentUser(context.Context, *UpdateCurrentUserRequest) (*UpdateCurrentUserResponse, error)
	// UpdateCurrentUserPassword UpdateCurrentUserPassword The user changes the password
	UpdateCurrentUserPassword(context.Context, *UpdateCurrentUserPasswordRequest) (*UpdateCurrentUserPasswordResponse, error)
}

func RegisterCurrentAPIGINSServer(router gins.IRouter, srv CurrentAPIGINSServer) {
	router.POST("/current/logout", _CurrentAPI_CurrentLogout0_GIN_Handler(srv))
	router.PUT("/current/user/password", _CurrentAPI_UpdateCurrentUserPassword0_GIN_Handler(srv))
	router.PUT("/current/user", _CurrentAPI_UpdateCurrentUser0_GIN_Handler(srv))
	router.GET("/current/menus", _CurrentAPI_ListCurrentMenus0_GIN_Handler(srv))
	router.PUT("/current/roles", _CurrentAPI_UpdateCurrentRoles0_GIN_Handler(srv))
	router.PUT("/current/setting", _CurrentAPI_UpdateCurrentSetting0_GIN_Handler(srv))
}

func _CurrentAPI_CurrentLogout0_GIN_Handler(srv CurrentAPIGINSServer) gins.HandlerFunc {
	return func(ctx *gins.Context) {
		var in CurrentLogoutRequest
		if err := gins.BindBody(ctx, &in.Data); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		gins.SetOperation(ctx, CurrentAPI_CurrentLogout_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.CurrentLogout(newCtx, &in)
		if err != nil {
			gins.JSON(ctx, 500, err)
			return
		}
		gins.JSON(ctx, 200, reply)
		return
	}
}

func _CurrentAPI_UpdateCurrentUserPassword0_GIN_Handler(srv CurrentAPIGINSServer) gins.HandlerFunc {
	return func(ctx *gins.Context) {
		var in UpdateCurrentUserPasswordRequest
		if err := gins.BindBody(ctx, &in.Data); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		gins.SetOperation(ctx, CurrentAPI_UpdateCurrentUserPassword_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.UpdateCurrentUserPassword(newCtx, &in)
		if err != nil {
			gins.JSON(ctx, 500, err)
			return
		}
		gins.JSON(ctx, 200, reply)
		return
	}
}

func _CurrentAPI_UpdateCurrentUser0_GIN_Handler(srv CurrentAPIGINSServer) gins.HandlerFunc {
	return func(ctx *gins.Context) {
		var in UpdateCurrentUserRequest
		if err := gins.BindBody(ctx, &in.Data); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		gins.SetOperation(ctx, CurrentAPI_UpdateCurrentUser_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.UpdateCurrentUser(newCtx, &in)
		if err != nil {
			gins.JSON(ctx, 500, err)
			return
		}
		gins.JSON(ctx, 200, reply)
		return
	}
}

func _CurrentAPI_ListCurrentMenus0_GIN_Handler(srv CurrentAPIGINSServer) gins.HandlerFunc {
	return func(ctx *gins.Context) {
		var in ListCurrentMenusRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		gins.SetOperation(ctx, CurrentAPI_ListCurrentMenus_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.ListCurrentMenus(newCtx, &in)
		if err != nil {
			gins.JSON(ctx, 500, err)
			return
		}
		gins.JSON(ctx, 200, reply)
		return
	}
}

func _CurrentAPI_UpdateCurrentRoles0_GIN_Handler(srv CurrentAPIGINSServer) gins.HandlerFunc {
	return func(ctx *gins.Context) {
		var in UpdateCurrentRolesRequest
		if err := gins.BindBody(ctx, &in.Data); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		gins.SetOperation(ctx, CurrentAPI_UpdateCurrentRoles_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.UpdateCurrentRoles(newCtx, &in)
		if err != nil {
			gins.JSON(ctx, 500, err)
			return
		}
		gins.JSON(ctx, 200, reply)
		return
	}
}

func _CurrentAPI_UpdateCurrentSetting0_GIN_Handler(srv CurrentAPIGINSServer) gins.HandlerFunc {
	return func(ctx *gins.Context) {
		var in UpdateCurrentSettingRequest
		if err := gins.BindBody(ctx, &in.Data); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		gins.SetOperation(ctx, CurrentAPI_UpdateCurrentSetting_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.UpdateCurrentSetting(newCtx, &in)
		if err != nil {
			gins.JSON(ctx, 500, err)
			return
		}
		gins.JSON(ctx, 200, reply)
		return
	}
}

type CurrentAPIGINSClient interface {
	CurrentLogout(ctx context.Context, req *CurrentLogoutRequest, opts ...gins.CallOption) (rsp *CurrentLogoutResponse, err error)
	ListCurrentMenus(ctx context.Context, req *ListCurrentMenusRequest, opts ...gins.CallOption) (rsp *ListCurrentMenusResponse, err error)
	UpdateCurrentRoles(ctx context.Context, req *UpdateCurrentRolesRequest, opts ...gins.CallOption) (rsp *UpdateCurrentRolesResponse, err error)
	UpdateCurrentSetting(ctx context.Context, req *UpdateCurrentSettingRequest, opts ...gins.CallOption) (rsp *UpdateCurrentSettingResponse, err error)
	UpdateCurrentUser(ctx context.Context, req *UpdateCurrentUserRequest, opts ...gins.CallOption) (rsp *UpdateCurrentUserResponse, err error)
	UpdateCurrentUserPassword(ctx context.Context, req *UpdateCurrentUserPasswordRequest, opts ...gins.CallOption) (rsp *UpdateCurrentUserPasswordResponse, err error)
}

type CurrentAPIGINSClientImpl struct {
	cc *gins.Client
}

func NewCurrentAPIGINSClient(client *gins.Client) CurrentAPIGINSClient {
	return &CurrentAPIGINSClientImpl{client}
}

func (c *CurrentAPIGINSClientImpl) CurrentLogout(ctx context.Context, in *CurrentLogoutRequest, opts ...gins.CallOption) (*CurrentLogoutResponse, error) {
	var out CurrentLogoutResponse
	pattern := "/current/logout"
	path := gins.EncodeURL(pattern, in, false)
	opts = append(opts, gins.Operation(CurrentAPI_CurrentLogout_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CurrentAPIGINSClientImpl) ListCurrentMenus(ctx context.Context, in *ListCurrentMenusRequest, opts ...gins.CallOption) (*ListCurrentMenusResponse, error) {
	var out ListCurrentMenusResponse
	pattern := "/current/menus"
	path := gins.EncodeURL(pattern, in, true)
	opts = append(opts, gins.Operation(CurrentAPI_ListCurrentMenus_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CurrentAPIGINSClientImpl) UpdateCurrentRoles(ctx context.Context, in *UpdateCurrentRolesRequest, opts ...gins.CallOption) (*UpdateCurrentRolesResponse, error) {
	var out UpdateCurrentRolesResponse
	pattern := "/current/roles"
	path := gins.EncodeURL(pattern, in, false)
	opts = append(opts, gins.Operation(CurrentAPI_UpdateCurrentRoles_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CurrentAPIGINSClientImpl) UpdateCurrentSetting(ctx context.Context, in *UpdateCurrentSettingRequest, opts ...gins.CallOption) (*UpdateCurrentSettingResponse, error) {
	var out UpdateCurrentSettingResponse
	pattern := "/current/setting"
	path := gins.EncodeURL(pattern, in, false)
	opts = append(opts, gins.Operation(CurrentAPI_UpdateCurrentSetting_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CurrentAPIGINSClientImpl) UpdateCurrentUser(ctx context.Context, in *UpdateCurrentUserRequest, opts ...gins.CallOption) (*UpdateCurrentUserResponse, error) {
	var out UpdateCurrentUserResponse
	pattern := "/current/user"
	path := gins.EncodeURL(pattern, in, false)
	opts = append(opts, gins.Operation(CurrentAPI_UpdateCurrentUser_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CurrentAPIGINSClientImpl) UpdateCurrentUserPassword(ctx context.Context, in *UpdateCurrentUserPasswordRequest, opts ...gins.CallOption) (*UpdateCurrentUserPasswordResponse, error) {
	var out UpdateCurrentUserPasswordResponse
	pattern := "/current/user/password"
	path := gins.EncodeURL(pattern, in, false)
	opts = append(opts, gins.Operation(CurrentAPI_UpdateCurrentUserPassword_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
