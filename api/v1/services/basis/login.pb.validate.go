// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: basis/login.proto

package basis

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResponseMultiError, or
// nil if none found.
func (m *LoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginResponseValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginResponseValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginResponseValidationError{
				field:  "Token",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoginResponseMultiError(errors)
	}

	return nil
}

// LoginResponseMultiError is an error wrapping multiple validation errors
// returned by LoginResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseMultiError) AllErrors() []error { return m }

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on LogoutRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutRequestMultiError, or
// nil if none found.
func (m *LogoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogoutRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogoutRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogoutRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LogoutRequestMultiError(errors)
	}

	return nil
}

// LogoutRequestMultiError is an error wrapping multiple validation errors
// returned by LogoutRequest.ValidateAll() if the designated constraints
// aren't met.
type LogoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutRequestMultiError) AllErrors() []error { return m }

// LogoutRequestValidationError is the validation error returned by
// LogoutRequest.Validate if the designated constraints aren't met.
type LogoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutRequestValidationError) ErrorName() string { return "LogoutRequestValidationError" }

// Error satisfies the builtin error interface
func (e LogoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutRequestValidationError{}

// Validate checks the field values on LogoutResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutResponseMultiError,
// or nil if none found.
func (m *LogoutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return LogoutResponseMultiError(errors)
	}

	return nil
}

// LogoutResponseMultiError is an error wrapping multiple validation errors
// returned by LogoutResponse.ValidateAll() if the designated constraints
// aren't met.
type LogoutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutResponseMultiError) AllErrors() []error { return m }

// LogoutResponseValidationError is the validation error returned by
// LogoutResponse.Validate if the designated constraints aren't met.
type LogoutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutResponseValidationError) ErrorName() string { return "LogoutResponseValidationError" }

// Error satisfies the builtin error interface
func (e LogoutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutResponseValidationError{}

// Validate checks the field values on CurrentUserRequestQuery with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CurrentUserRequestQuery) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CurrentUserRequestQuery with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CurrentUserRequestQueryMultiError, or nil if none found.
func (m *CurrentUserRequestQuery) ValidateAll() error {
	return m.validate(true)
}

func (m *CurrentUserRequestQuery) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return CurrentUserRequestQueryMultiError(errors)
	}

	return nil
}

// CurrentUserRequestQueryMultiError is an error wrapping multiple validation
// errors returned by CurrentUserRequestQuery.ValidateAll() if the designated
// constraints aren't met.
type CurrentUserRequestQueryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CurrentUserRequestQueryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CurrentUserRequestQueryMultiError) AllErrors() []error { return m }

// CurrentUserRequestQueryValidationError is the validation error returned by
// CurrentUserRequestQuery.Validate if the designated constraints aren't met.
type CurrentUserRequestQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CurrentUserRequestQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CurrentUserRequestQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CurrentUserRequestQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CurrentUserRequestQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CurrentUserRequestQueryValidationError) ErrorName() string {
	return "CurrentUserRequestQueryValidationError"
}

// Error satisfies the builtin error interface
func (e CurrentUserRequestQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCurrentUserRequestQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CurrentUserRequestQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CurrentUserRequestQueryValidationError{}

// Validate checks the field values on CurrentUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CurrentUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CurrentUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CurrentUserRequestMultiError, or nil if none found.
func (m *CurrentUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CurrentUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CurrentUserRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CurrentUserRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CurrentUserRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CurrentUserRequestMultiError(errors)
	}

	return nil
}

// CurrentUserRequestMultiError is an error wrapping multiple validation errors
// returned by CurrentUserRequest.ValidateAll() if the designated constraints
// aren't met.
type CurrentUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CurrentUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CurrentUserRequestMultiError) AllErrors() []error { return m }

// CurrentUserRequestValidationError is the validation error returned by
// CurrentUserRequest.Validate if the designated constraints aren't met.
type CurrentUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CurrentUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CurrentUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CurrentUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CurrentUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CurrentUserRequestValidationError) ErrorName() string {
	return "CurrentUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CurrentUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCurrentUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CurrentUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CurrentUserRequestValidationError{}

// Validate checks the field values on CurrentUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CurrentUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CurrentUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CurrentUserResponseMultiError, or nil if none found.
func (m *CurrentUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CurrentUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CurrentUserResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CurrentUserResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CurrentUserResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CurrentUserResponseMultiError(errors)
	}

	return nil
}

// CurrentUserResponseMultiError is an error wrapping multiple validation
// errors returned by CurrentUserResponse.ValidateAll() if the designated
// constraints aren't met.
type CurrentUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CurrentUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CurrentUserResponseMultiError) AllErrors() []error { return m }

// CurrentUserResponseValidationError is the validation error returned by
// CurrentUserResponse.Validate if the designated constraints aren't met.
type CurrentUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CurrentUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CurrentUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CurrentUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CurrentUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CurrentUserResponseValidationError) ErrorName() string {
	return "CurrentUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CurrentUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCurrentUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CurrentUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CurrentUserResponseValidationError{}

// Validate checks the field values on CaptchaIDRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CaptchaIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CaptchaIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CaptchaIDRequestMultiError, or nil if none found.
func (m *CaptchaIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CaptchaIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ts

	if len(errors) > 0 {
		return CaptchaIDRequestMultiError(errors)
	}

	return nil
}

// CaptchaIDRequestMultiError is an error wrapping multiple validation errors
// returned by CaptchaIDRequest.ValidateAll() if the designated constraints
// aren't met.
type CaptchaIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CaptchaIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CaptchaIDRequestMultiError) AllErrors() []error { return m }

// CaptchaIDRequestValidationError is the validation error returned by
// CaptchaIDRequest.Validate if the designated constraints aren't met.
type CaptchaIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CaptchaIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CaptchaIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CaptchaIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CaptchaIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CaptchaIDRequestValidationError) ErrorName() string { return "CaptchaIDRequestValidationError" }

// Error satisfies the builtin error interface
func (e CaptchaIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCaptchaIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CaptchaIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CaptchaIDRequestValidationError{}

// Validate checks the field values on CaptchaIDResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CaptchaIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CaptchaIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CaptchaIDResponseMultiError, or nil if none found.
func (m *CaptchaIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CaptchaIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return CaptchaIDResponseMultiError(errors)
	}

	return nil
}

// CaptchaIDResponseMultiError is an error wrapping multiple validation errors
// returned by CaptchaIDResponse.ValidateAll() if the designated constraints
// aren't met.
type CaptchaIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CaptchaIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CaptchaIDResponseMultiError) AllErrors() []error { return m }

// CaptchaIDResponseValidationError is the validation error returned by
// CaptchaIDResponse.Validate if the designated constraints aren't met.
type CaptchaIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CaptchaIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CaptchaIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CaptchaIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CaptchaIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CaptchaIDResponseValidationError) ErrorName() string {
	return "CaptchaIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CaptchaIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCaptchaIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CaptchaIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CaptchaIDResponseValidationError{}

// Validate checks the field values on CaptchaImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CaptchaImageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CaptchaImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CaptchaImageRequestMultiError, or nil if none found.
func (m *CaptchaImageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CaptchaImageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Reload

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CaptchaImageRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CaptchaImageRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CaptchaImageRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CaptchaImageRequestMultiError(errors)
	}

	return nil
}

// CaptchaImageRequestMultiError is an error wrapping multiple validation
// errors returned by CaptchaImageRequest.ValidateAll() if the designated
// constraints aren't met.
type CaptchaImageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CaptchaImageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CaptchaImageRequestMultiError) AllErrors() []error { return m }

// CaptchaImageRequestValidationError is the validation error returned by
// CaptchaImageRequest.Validate if the designated constraints aren't met.
type CaptchaImageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CaptchaImageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CaptchaImageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CaptchaImageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CaptchaImageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CaptchaImageRequestValidationError) ErrorName() string {
	return "CaptchaImageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CaptchaImageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCaptchaImageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CaptchaImageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CaptchaImageRequestValidationError{}

// Validate checks the field values on CaptchaData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CaptchaData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CaptchaData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CaptchaDataMultiError, or
// nil if none found.
func (m *CaptchaData) ValidateAll() error {
	return m.validate(true)
}

func (m *CaptchaData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CaptchaId

	// no validation rules for CaptchaImg

	if len(errors) > 0 {
		return CaptchaDataMultiError(errors)
	}

	return nil
}

// CaptchaDataMultiError is an error wrapping multiple validation errors
// returned by CaptchaData.ValidateAll() if the designated constraints aren't met.
type CaptchaDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CaptchaDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CaptchaDataMultiError) AllErrors() []error { return m }

// CaptchaDataValidationError is the validation error returned by
// CaptchaData.Validate if the designated constraints aren't met.
type CaptchaDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CaptchaDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CaptchaDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CaptchaDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CaptchaDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CaptchaDataValidationError) ErrorName() string { return "CaptchaDataValidationError" }

// Error satisfies the builtin error interface
func (e CaptchaDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCaptchaData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CaptchaDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CaptchaDataValidationError{}

// Validate checks the field values on CaptchaImageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CaptchaImageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CaptchaImageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CaptchaImageResponseMultiError, or nil if none found.
func (m *CaptchaImageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CaptchaImageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Headers

	// no validation rules for Image

	if len(errors) > 0 {
		return CaptchaImageResponseMultiError(errors)
	}

	return nil
}

// CaptchaImageResponseMultiError is an error wrapping multiple validation
// errors returned by CaptchaImageResponse.ValidateAll() if the designated
// constraints aren't met.
type CaptchaImageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CaptchaImageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CaptchaImageResponseMultiError) AllErrors() []error { return m }

// CaptchaImageResponseValidationError is the validation error returned by
// CaptchaImageResponse.Validate if the designated constraints aren't met.
type CaptchaImageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CaptchaImageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CaptchaImageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CaptchaImageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CaptchaImageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CaptchaImageResponseValidationError) ErrorName() string {
	return "CaptchaImageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CaptchaImageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCaptchaImageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CaptchaImageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CaptchaImageResponseValidationError{}

// Validate checks the field values on CurrentMenusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CurrentMenusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CurrentMenusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CurrentMenusRequestMultiError, or nil if none found.
func (m *CurrentMenusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CurrentMenusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CurrentMenusRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CurrentMenusRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CurrentMenusRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CurrentMenusRequestMultiError(errors)
	}

	return nil
}

// CurrentMenusRequestMultiError is an error wrapping multiple validation
// errors returned by CurrentMenusRequest.ValidateAll() if the designated
// constraints aren't met.
type CurrentMenusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CurrentMenusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CurrentMenusRequestMultiError) AllErrors() []error { return m }

// CurrentMenusRequestValidationError is the validation error returned by
// CurrentMenusRequest.Validate if the designated constraints aren't met.
type CurrentMenusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CurrentMenusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CurrentMenusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CurrentMenusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CurrentMenusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CurrentMenusRequestValidationError) ErrorName() string {
	return "CurrentMenusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CurrentMenusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCurrentMenusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CurrentMenusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CurrentMenusRequestValidationError{}

// Validate checks the field values on CurrentMenusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CurrentMenusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CurrentMenusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CurrentMenusResponseMultiError, or nil if none found.
func (m *CurrentMenusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CurrentMenusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CurrentMenusResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CurrentMenusResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CurrentMenusResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CurrentMenusResponseMultiError(errors)
	}

	return nil
}

// CurrentMenusResponseMultiError is an error wrapping multiple validation
// errors returned by CurrentMenusResponse.ValidateAll() if the designated
// constraints aren't met.
type CurrentMenusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CurrentMenusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CurrentMenusResponseMultiError) AllErrors() []error { return m }

// CurrentMenusResponseValidationError is the validation error returned by
// CurrentMenusResponse.Validate if the designated constraints aren't met.
type CurrentMenusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CurrentMenusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CurrentMenusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CurrentMenusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CurrentMenusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CurrentMenusResponseValidationError) ErrorName() string {
	return "CurrentMenusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CurrentMenusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCurrentMenusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CurrentMenusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CurrentMenusResponseValidationError{}

// Validate checks the field values on CaptchaResourcesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CaptchaResourcesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CaptchaResourcesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CaptchaResourcesRequestMultiError, or nil if none found.
func (m *CaptchaResourcesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CaptchaResourcesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CaptchaResourcesRequestMultiError(errors)
	}

	return nil
}

// CaptchaResourcesRequestMultiError is an error wrapping multiple validation
// errors returned by CaptchaResourcesRequest.ValidateAll() if the designated
// constraints aren't met.
type CaptchaResourcesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CaptchaResourcesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CaptchaResourcesRequestMultiError) AllErrors() []error { return m }

// CaptchaResourcesRequestValidationError is the validation error returned by
// CaptchaResourcesRequest.Validate if the designated constraints aren't met.
type CaptchaResourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CaptchaResourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CaptchaResourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CaptchaResourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CaptchaResourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CaptchaResourcesRequestValidationError) ErrorName() string {
	return "CaptchaResourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CaptchaResourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCaptchaResourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CaptchaResourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CaptchaResourcesRequestValidationError{}

// Validate checks the field values on CaptchaResourcesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CaptchaResourcesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CaptchaResourcesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CaptchaResourcesResponseMultiError, or nil if none found.
func (m *CaptchaResourcesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CaptchaResourcesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Image

	// no validation rules for Audio

	// no validation rules for AudioType

	if len(errors) > 0 {
		return CaptchaResourcesResponseMultiError(errors)
	}

	return nil
}

// CaptchaResourcesResponseMultiError is an error wrapping multiple validation
// errors returned by CaptchaResourcesResponse.ValidateAll() if the designated
// constraints aren't met.
type CaptchaResourcesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CaptchaResourcesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CaptchaResourcesResponseMultiError) AllErrors() []error { return m }

// CaptchaResourcesResponseValidationError is the validation error returned by
// CaptchaResourcesResponse.Validate if the designated constraints aren't met.
type CaptchaResourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CaptchaResourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CaptchaResourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CaptchaResourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CaptchaResourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CaptchaResourcesResponseValidationError) ErrorName() string {
	return "CaptchaResourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CaptchaResourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCaptchaResourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CaptchaResourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CaptchaResourcesResponseValidationError{}

// Validate checks the field values on CaptchaResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CaptchaResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CaptchaResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CaptchaResourceRequestMultiError, or nil if none found.
func (m *CaptchaResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CaptchaResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := CaptchaResourceRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CaptchaResourceRequest_Resource_InLookup[m.GetResource()]; !ok {
		err := CaptchaResourceRequestValidationError{
			field:  "Resource",
			reason: "value must be in list [image audio]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CaptchaResourceRequestMultiError(errors)
	}

	return nil
}

// CaptchaResourceRequestMultiError is an error wrapping multiple validation
// errors returned by CaptchaResourceRequest.ValidateAll() if the designated
// constraints aren't met.
type CaptchaResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CaptchaResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CaptchaResourceRequestMultiError) AllErrors() []error { return m }

// CaptchaResourceRequestValidationError is the validation error returned by
// CaptchaResourceRequest.Validate if the designated constraints aren't met.
type CaptchaResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CaptchaResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CaptchaResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CaptchaResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CaptchaResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CaptchaResourceRequestValidationError) ErrorName() string {
	return "CaptchaResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CaptchaResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCaptchaResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CaptchaResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CaptchaResourceRequestValidationError{}

var _CaptchaResourceRequest_Resource_InLookup = map[string]struct{}{
	"image": {},
	"audio": {},
}

// Validate checks the field values on CaptchaResourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CaptchaResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CaptchaResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CaptchaResourceResponseMultiError, or nil if none found.
func (m *CaptchaResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CaptchaResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Headers

	// no validation rules for Data

	if len(errors) > 0 {
		return CaptchaResourceResponseMultiError(errors)
	}

	return nil
}

// CaptchaResourceResponseMultiError is an error wrapping multiple validation
// errors returned by CaptchaResourceResponse.ValidateAll() if the designated
// constraints aren't met.
type CaptchaResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CaptchaResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CaptchaResourceResponseMultiError) AllErrors() []error { return m }

// CaptchaResourceResponseValidationError is the validation error returned by
// CaptchaResourceResponse.Validate if the designated constraints aren't met.
type CaptchaResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CaptchaResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CaptchaResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CaptchaResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CaptchaResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CaptchaResourceResponseValidationError) ErrorName() string {
	return "CaptchaResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CaptchaResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCaptchaResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CaptchaResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CaptchaResourceResponseValidationError{}

// Validate checks the field values on LoginRequest_Data with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginRequest_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginRequest_DataMultiError, or nil if none found.
func (m *LoginRequest_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := LoginRequest_DataValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := LoginRequest_DataValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptchaId()) < 1 {
		err := LoginRequest_DataValidationError{
			field:  "CaptchaId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptchaCode()) < 1 {
		err := LoginRequest_DataValidationError{
			field:  "CaptchaCode",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginRequest_DataMultiError(errors)
	}

	return nil
}

// LoginRequest_DataMultiError is an error wrapping multiple validation errors
// returned by LoginRequest_Data.ValidateAll() if the designated constraints
// aren't met.
type LoginRequest_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequest_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequest_DataMultiError) AllErrors() []error { return m }

// LoginRequest_DataValidationError is the validation error returned by
// LoginRequest_Data.Validate if the designated constraints aren't met.
type LoginRequest_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequest_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequest_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequest_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequest_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequest_DataValidationError) ErrorName() string {
	return "LoginRequest_DataValidationError"
}

// Error satisfies the builtin error interface
func (e LoginRequest_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequest_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequest_DataValidationError{}
