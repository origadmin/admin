// Code generated by protoc-gen-go-gins. DO NOT EDIT.
// versions:
// - protoc-gen-go-gins 0.0.11
// - protoc             (unknown)
// source: basis/login.proto

package basis

import (
	context "context"
	gins "github.com/origadmin/contrib/transport/gins"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)

const _ = gins.SupportPackageIsVersion1

const LoginAPI_CaptchaID_OperationName = "/api.v1.services.basis.LoginAPI/CaptchaID"
const LoginAPI_CaptchaImage_OperationName = "/api.v1.services.basis.LoginAPI/CaptchaImage"
const LoginAPI_CaptchaResource_OperationName = "/api.v1.services.basis.LoginAPI/CaptchaResource"
const LoginAPI_CaptchaResources_OperationName = "/api.v1.services.basis.LoginAPI/CaptchaResources"
const LoginAPI_CurrentTokenRefresh_OperationName = "/api.v1.services.basis.LoginAPI/CurrentTokenRefresh"
const LoginAPI_Login_OperationName = "/api.v1.services.basis.LoginAPI/Login"
const LoginAPI_Refresh_OperationName = "/api.v1.services.basis.LoginAPI/Refresh"
const LoginAPI_Register_OperationName = "/api.v1.services.basis.LoginAPI/Register"

type LoginAPIGINSServer interface {
	CaptchaID(context.Context, *CaptchaIDRequest) (*CaptchaIDResponse, error)
	CaptchaImage(context.Context, *CaptchaImageRequest) (*CaptchaImageResponse, error)
	CaptchaResource(context.Context, *CaptchaResourceRequest) (*CaptchaResourceResponse, error)
	CaptchaResources(context.Context, *CaptchaResourcesRequest) (*CaptchaResourcesResponse, error)
	CurrentTokenRefresh(context.Context, *CurrentTokenRefreshRequest) (*CurrentTokenRefreshResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
}

func RegisterLoginAPIGINSServer(router gins.IRouter, srv LoginAPIGINSServer) {
	router.GET("/captcha/id", _LoginAPI_CaptchaID0_GIN_Handler(srv))
	router.GET("/captcha/image", _LoginAPI_CaptchaImage0_GIN_Handler(srv))
	router.GET("/captcha/id/:id/:resource", _LoginAPI_CaptchaResource0_GIN_Handler(srv))
	router.GET("/captcha/id/:id", _LoginAPI_CaptchaResources0_GIN_Handler(srv))
	router.POST("/login", _LoginAPI_Login0_GIN_Handler(srv))
	router.POST("/register", _LoginAPI_Register0_GIN_Handler(srv))
	router.POST("/refresh_token", _LoginAPI_Refresh0_GIN_Handler(srv))
	router.POST("/current/token/refresh", _LoginAPI_CurrentTokenRefresh0_GIN_Handler(srv))
}

func _LoginAPI_CaptchaID0_GIN_Handler(srv LoginAPIGINSServer) gins.HandlerFunc {
	return func(ctx *gins.Context) {
		var in CaptchaIDRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		gins.SetOperation(ctx, LoginAPI_CaptchaID_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.CaptchaID(newCtx, &in)
		if err != nil {
			gins.JSON(ctx, 500, err)
			return
		}
		gins.JSON(ctx, 200, reply)
		return
	}
}

func _LoginAPI_CaptchaImage0_GIN_Handler(srv LoginAPIGINSServer) gins.HandlerFunc {
	return func(ctx *gins.Context) {
		var in CaptchaImageRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		gins.SetOperation(ctx, LoginAPI_CaptchaImage_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.CaptchaImage(newCtx, &in)
		if err != nil {
			gins.JSON(ctx, 500, err)
			return
		}
		gins.JSON(ctx, 200, reply)
		return
	}
}

func _LoginAPI_CaptchaResource0_GIN_Handler(srv LoginAPIGINSServer) gins.HandlerFunc {
	return func(ctx *gins.Context) {
		var in CaptchaResourceRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		if err := gins.BindURI(ctx, &in); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		gins.SetOperation(ctx, LoginAPI_CaptchaResource_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.CaptchaResource(newCtx, &in)
		if err != nil {
			gins.JSON(ctx, 500, err)
			return
		}
		gins.JSON(ctx, 200, reply)
		return
	}
}

func _LoginAPI_CaptchaResources0_GIN_Handler(srv LoginAPIGINSServer) gins.HandlerFunc {
	return func(ctx *gins.Context) {
		var in CaptchaResourcesRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		if err := gins.BindURI(ctx, &in); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		gins.SetOperation(ctx, LoginAPI_CaptchaResources_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.CaptchaResources(newCtx, &in)
		if err != nil {
			gins.JSON(ctx, 500, err)
			return
		}
		gins.JSON(ctx, 200, reply)
		return
	}
}

func _LoginAPI_Login0_GIN_Handler(srv LoginAPIGINSServer) gins.HandlerFunc {
	return func(ctx *gins.Context) {
		var in LoginRequest
		if err := gins.BindBody(ctx, &in.Data); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		gins.SetOperation(ctx, LoginAPI_Login_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.Login(newCtx, &in)
		if err != nil {
			gins.JSON(ctx, 500, err)
			return
		}
		gins.JSON(ctx, 200, reply)
		return
	}
}

func _LoginAPI_Register0_GIN_Handler(srv LoginAPIGINSServer) gins.HandlerFunc {
	return func(ctx *gins.Context) {
		var in RegisterRequest
		if err := gins.BindBody(ctx, &in.Data); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		gins.SetOperation(ctx, LoginAPI_Register_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.Register(newCtx, &in)
		if err != nil {
			gins.JSON(ctx, 500, err)
			return
		}
		gins.JSON(ctx, 200, reply)
		return
	}
}

func _LoginAPI_Refresh0_GIN_Handler(srv LoginAPIGINSServer) gins.HandlerFunc {
	return func(ctx *gins.Context) {
		var in RefreshRequest
		if err := gins.BindBody(ctx, &in.Data); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		gins.SetOperation(ctx, LoginAPI_Refresh_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.Refresh(newCtx, &in)
		if err != nil {
			gins.JSON(ctx, 500, err)
			return
		}
		gins.JSON(ctx, 200, reply)
		return
	}
}

func _LoginAPI_CurrentTokenRefresh0_GIN_Handler(srv LoginAPIGINSServer) gins.HandlerFunc {
	return func(ctx *gins.Context) {
		var in CurrentTokenRefreshRequest
		if err := gins.BindBody(ctx, &in); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.JSON(ctx, 400, err)
			return
		}
		gins.SetOperation(ctx, LoginAPI_CurrentTokenRefresh_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.CurrentTokenRefresh(newCtx, &in)
		if err != nil {
			gins.JSON(ctx, 500, err)
			return
		}
		gins.JSON(ctx, 200, reply)
		return
	}
}

type LoginAPIGINSClient interface {
	CaptchaID(ctx context.Context, req *CaptchaIDRequest, opts ...gins.CallOption) (rsp *CaptchaIDResponse, err error)
	CaptchaImage(ctx context.Context, req *CaptchaImageRequest, opts ...gins.CallOption) (rsp *CaptchaImageResponse, err error)
	CaptchaResource(ctx context.Context, req *CaptchaResourceRequest, opts ...gins.CallOption) (rsp *CaptchaResourceResponse, err error)
	CaptchaResources(ctx context.Context, req *CaptchaResourcesRequest, opts ...gins.CallOption) (rsp *CaptchaResourcesResponse, err error)
	CurrentTokenRefresh(ctx context.Context, req *CurrentTokenRefreshRequest, opts ...gins.CallOption) (rsp *CurrentTokenRefreshResponse, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...gins.CallOption) (rsp *LoginResponse, err error)
	Refresh(ctx context.Context, req *RefreshRequest, opts ...gins.CallOption) (rsp *RefreshResponse, err error)
	Register(ctx context.Context, req *RegisterRequest, opts ...gins.CallOption) (rsp *RegisterResponse, err error)
}

type LoginAPIGINSClientImpl struct {
	cc *gins.Client
}

func NewLoginAPIGINSClient(client *gins.Client) LoginAPIGINSClient {
	return &LoginAPIGINSClientImpl{client}
}

func (c *LoginAPIGINSClientImpl) CaptchaID(ctx context.Context, in *CaptchaIDRequest, opts ...gins.CallOption) (*CaptchaIDResponse, error) {
	var out CaptchaIDResponse
	pattern := "/captcha/id"
	path := gins.EncodeURL(pattern, in, true)
	opts = append(opts, gins.Operation(LoginAPI_CaptchaID_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *LoginAPIGINSClientImpl) CaptchaImage(ctx context.Context, in *CaptchaImageRequest, opts ...gins.CallOption) (*CaptchaImageResponse, error) {
	var out CaptchaImageResponse
	pattern := "/captcha/image"
	path := gins.EncodeURL(pattern, in, true)
	opts = append(opts, gins.Operation(LoginAPI_CaptchaImage_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *LoginAPIGINSClientImpl) CaptchaResource(ctx context.Context, in *CaptchaResourceRequest, opts ...gins.CallOption) (*CaptchaResourceResponse, error) {
	var out CaptchaResourceResponse
	pattern := "/captcha/id/{id}/{resource}"
	path := gins.EncodeURL(pattern, in, true)
	opts = append(opts, gins.Operation(LoginAPI_CaptchaResource_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *LoginAPIGINSClientImpl) CaptchaResources(ctx context.Context, in *CaptchaResourcesRequest, opts ...gins.CallOption) (*CaptchaResourcesResponse, error) {
	var out CaptchaResourcesResponse
	pattern := "/captcha/id/{id}"
	path := gins.EncodeURL(pattern, in, true)
	opts = append(opts, gins.Operation(LoginAPI_CaptchaResources_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *LoginAPIGINSClientImpl) CurrentTokenRefresh(ctx context.Context, in *CurrentTokenRefreshRequest, opts ...gins.CallOption) (*CurrentTokenRefreshResponse, error) {
	var out CurrentTokenRefreshResponse
	pattern := "/current/token/refresh"
	path := gins.EncodeURL(pattern, in, false)
	opts = append(opts, gins.Operation(LoginAPI_CurrentTokenRefresh_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *LoginAPIGINSClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...gins.CallOption) (*LoginResponse, error) {
	var out LoginResponse
	pattern := "/login"
	path := gins.EncodeURL(pattern, in, false)
	opts = append(opts, gins.Operation(LoginAPI_Login_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *LoginAPIGINSClientImpl) Refresh(ctx context.Context, in *RefreshRequest, opts ...gins.CallOption) (*RefreshResponse, error) {
	var out RefreshResponse
	pattern := "/refresh_token"
	path := gins.EncodeURL(pattern, in, false)
	opts = append(opts, gins.Operation(LoginAPI_Refresh_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *LoginAPIGINSClientImpl) Register(ctx context.Context, in *RegisterRequest, opts ...gins.CallOption) (*RegisterResponse, error) {
	var out RegisterResponse
	pattern := "/register"
	path := gins.EncodeURL(pattern, in, false)
	opts = append(opts, gins.Operation(LoginAPI_Register_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
