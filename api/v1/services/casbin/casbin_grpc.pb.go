// Copyright 2018 The casbin Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: casbin/casbin.proto

package casbin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CasbinService_NewEnforcer_FullMethodName                       = "/api.v1.services.casbin.CasbinService/NewEnforcer"
	CasbinService_NewAdapter_FullMethodName                        = "/api.v1.services.casbin.CasbinService/NewAdapter"
	CasbinService_Enforce_FullMethodName                           = "/api.v1.services.casbin.CasbinService/Enforce"
	CasbinService_LoadPolicy_FullMethodName                        = "/api.v1.services.casbin.CasbinService/LoadPolicy"
	CasbinService_SavePolicy_FullMethodName                        = "/api.v1.services.casbin.CasbinService/SavePolicy"
	CasbinService_AddPolicy_FullMethodName                         = "/api.v1.services.casbin.CasbinService/AddPolicy"
	CasbinService_AddNamedPolicy_FullMethodName                    = "/api.v1.services.casbin.CasbinService/AddNamedPolicy"
	CasbinService_RemovePolicy_FullMethodName                      = "/api.v1.services.casbin.CasbinService/RemovePolicy"
	CasbinService_RemoveNamedPolicy_FullMethodName                 = "/api.v1.services.casbin.CasbinService/RemoveNamedPolicy"
	CasbinService_RemoveFilteredPolicy_FullMethodName              = "/api.v1.services.casbin.CasbinService/RemoveFilteredPolicy"
	CasbinService_RemoveFilteredNamedPolicy_FullMethodName         = "/api.v1.services.casbin.CasbinService/RemoveFilteredNamedPolicy"
	CasbinService_GetPolicy_FullMethodName                         = "/api.v1.services.casbin.CasbinService/GetPolicy"
	CasbinService_GetNamedPolicy_FullMethodName                    = "/api.v1.services.casbin.CasbinService/GetNamedPolicy"
	CasbinService_GetFilteredPolicy_FullMethodName                 = "/api.v1.services.casbin.CasbinService/GetFilteredPolicy"
	CasbinService_GetFilteredNamedPolicy_FullMethodName            = "/api.v1.services.casbin.CasbinService/GetFilteredNamedPolicy"
	CasbinService_AddGroupingPolicy_FullMethodName                 = "/api.v1.services.casbin.CasbinService/AddGroupingPolicy"
	CasbinService_AddNamedGroupingPolicy_FullMethodName            = "/api.v1.services.casbin.CasbinService/AddNamedGroupingPolicy"
	CasbinService_RemoveGroupingPolicy_FullMethodName              = "/api.v1.services.casbin.CasbinService/RemoveGroupingPolicy"
	CasbinService_RemoveNamedGroupingPolicy_FullMethodName         = "/api.v1.services.casbin.CasbinService/RemoveNamedGroupingPolicy"
	CasbinService_RemoveFilteredGroupingPolicy_FullMethodName      = "/api.v1.services.casbin.CasbinService/RemoveFilteredGroupingPolicy"
	CasbinService_RemoveFilteredNamedGroupingPolicy_FullMethodName = "/api.v1.services.casbin.CasbinService/RemoveFilteredNamedGroupingPolicy"
	CasbinService_GetGroupingPolicy_FullMethodName                 = "/api.v1.services.casbin.CasbinService/GetGroupingPolicy"
	CasbinService_GetNamedGroupingPolicy_FullMethodName            = "/api.v1.services.casbin.CasbinService/GetNamedGroupingPolicy"
	CasbinService_GetFilteredGroupingPolicy_FullMethodName         = "/api.v1.services.casbin.CasbinService/GetFilteredGroupingPolicy"
	CasbinService_GetFilteredNamedGroupingPolicy_FullMethodName    = "/api.v1.services.casbin.CasbinService/GetFilteredNamedGroupingPolicy"
	CasbinService_GetAllSubjects_FullMethodName                    = "/api.v1.services.casbin.CasbinService/GetAllSubjects"
	CasbinService_GetAllNamedSubjects_FullMethodName               = "/api.v1.services.casbin.CasbinService/GetAllNamedSubjects"
	CasbinService_GetAllObjects_FullMethodName                     = "/api.v1.services.casbin.CasbinService/GetAllObjects"
	CasbinService_GetAllNamedObjects_FullMethodName                = "/api.v1.services.casbin.CasbinService/GetAllNamedObjects"
	CasbinService_GetAllActions_FullMethodName                     = "/api.v1.services.casbin.CasbinService/GetAllActions"
	CasbinService_GetAllNamedActions_FullMethodName                = "/api.v1.services.casbin.CasbinService/GetAllNamedActions"
	CasbinService_GetAllRoles_FullMethodName                       = "/api.v1.services.casbin.CasbinService/GetAllRoles"
	CasbinService_GetAllNamedRoles_FullMethodName                  = "/api.v1.services.casbin.CasbinService/GetAllNamedRoles"
	CasbinService_HasPolicy_FullMethodName                         = "/api.v1.services.casbin.CasbinService/HasPolicy"
	CasbinService_HasNamedPolicy_FullMethodName                    = "/api.v1.services.casbin.CasbinService/HasNamedPolicy"
	CasbinService_HasGroupingPolicy_FullMethodName                 = "/api.v1.services.casbin.CasbinService/HasGroupingPolicy"
	CasbinService_HasNamedGroupingPolicy_FullMethodName            = "/api.v1.services.casbin.CasbinService/HasNamedGroupingPolicy"
	CasbinService_GetDomains_FullMethodName                        = "/api.v1.services.casbin.CasbinService/GetDomains"
	CasbinService_GetRolesForUser_FullMethodName                   = "/api.v1.services.casbin.CasbinService/GetRolesForUser"
	CasbinService_GetImplicitRolesForUser_FullMethodName           = "/api.v1.services.casbin.CasbinService/GetImplicitRolesForUser"
	CasbinService_GetUsersForRole_FullMethodName                   = "/api.v1.services.casbin.CasbinService/GetUsersForRole"
	CasbinService_HasRoleForUser_FullMethodName                    = "/api.v1.services.casbin.CasbinService/HasRoleForUser"
	CasbinService_AddRoleForUser_FullMethodName                    = "/api.v1.services.casbin.CasbinService/AddRoleForUser"
	CasbinService_DeleteRoleForUser_FullMethodName                 = "/api.v1.services.casbin.CasbinService/DeleteRoleForUser"
	CasbinService_DeleteRolesForUser_FullMethodName                = "/api.v1.services.casbin.CasbinService/DeleteRolesForUser"
	CasbinService_DeleteUser_FullMethodName                        = "/api.v1.services.casbin.CasbinService/DeleteUser"
	CasbinService_DeleteRole_FullMethodName                        = "/api.v1.services.casbin.CasbinService/DeleteRole"
	CasbinService_GetPermissionsForUser_FullMethodName             = "/api.v1.services.casbin.CasbinService/GetPermissionsForUser"
	CasbinService_GetImplicitPermissionsForUser_FullMethodName     = "/api.v1.services.casbin.CasbinService/GetImplicitPermissionsForUser"
	CasbinService_DeletePermission_FullMethodName                  = "/api.v1.services.casbin.CasbinService/DeletePermission"
	CasbinService_AddPermissionForUser_FullMethodName              = "/api.v1.services.casbin.CasbinService/AddPermissionForUser"
	CasbinService_DeletePermissionForUser_FullMethodName           = "/api.v1.services.casbin.CasbinService/DeletePermissionForUser"
	CasbinService_DeletePermissionsForUser_FullMethodName          = "/api.v1.services.casbin.CasbinService/DeletePermissionsForUser"
	CasbinService_HasPermissionForUser_FullMethodName              = "/api.v1.services.casbin.CasbinService/HasPermissionForUser"
)

// CasbinServiceClient is the client API for CasbinService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The Casbin service definition.
type CasbinServiceClient interface {
	NewEnforcer(ctx context.Context, in *NewEnforcerRequest, opts ...grpc.CallOption) (*NewEnforcerReply, error)
	NewAdapter(ctx context.Context, in *NewAdapterRequest, opts ...grpc.CallOption) (*NewAdapterReply, error)
	Enforce(ctx context.Context, in *EnforceRequest, opts ...grpc.CallOption) (*BoolReply, error)
	LoadPolicy(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	SavePolicy(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	AddPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	AddNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	RemovePolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	RemoveNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	RemoveFilteredPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	RemoveFilteredNamedPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	GetPolicy(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Array2DReply, error)
	GetNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*Array2DReply, error)
	GetFilteredPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*Array2DReply, error)
	GetFilteredNamedPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*Array2DReply, error)
	AddGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	AddNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	RemoveGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	RemoveNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	RemoveFilteredGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	RemoveFilteredNamedGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	GetGroupingPolicy(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Array2DReply, error)
	GetNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*Array2DReply, error)
	GetFilteredGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*Array2DReply, error)
	GetFilteredNamedGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*Array2DReply, error)
	GetAllSubjects(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ArrayReply, error)
	GetAllNamedSubjects(ctx context.Context, in *SimpleGetRequest, opts ...grpc.CallOption) (*ArrayReply, error)
	GetAllObjects(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ArrayReply, error)
	GetAllNamedObjects(ctx context.Context, in *SimpleGetRequest, opts ...grpc.CallOption) (*ArrayReply, error)
	GetAllActions(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ArrayReply, error)
	GetAllNamedActions(ctx context.Context, in *SimpleGetRequest, opts ...grpc.CallOption) (*ArrayReply, error)
	GetAllRoles(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ArrayReply, error)
	GetAllNamedRoles(ctx context.Context, in *SimpleGetRequest, opts ...grpc.CallOption) (*ArrayReply, error)
	HasPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	HasNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	HasGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	HasNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	GetDomains(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*ArrayReply, error)
	GetRolesForUser(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*ArrayReply, error)
	GetImplicitRolesForUser(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*ArrayReply, error)
	GetUsersForRole(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*ArrayReply, error)
	HasRoleForUser(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*BoolReply, error)
	AddRoleForUser(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*BoolReply, error)
	DeleteRoleForUser(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*BoolReply, error)
	DeleteRolesForUser(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*BoolReply, error)
	DeleteUser(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*BoolReply, error)
	DeleteRole(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	GetPermissionsForUser(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*Array2DReply, error)
	GetImplicitPermissionsForUser(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*Array2DReply, error)
	DeletePermission(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*BoolReply, error)
	AddPermissionForUser(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*BoolReply, error)
	DeletePermissionForUser(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*BoolReply, error)
	DeletePermissionsForUser(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*BoolReply, error)
	HasPermissionForUser(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*BoolReply, error)
}

type casbinServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCasbinServiceClient(cc grpc.ClientConnInterface) CasbinServiceClient {
	return &casbinServiceClient{cc}
}

func (c *casbinServiceClient) NewEnforcer(ctx context.Context, in *NewEnforcerRequest, opts ...grpc.CallOption) (*NewEnforcerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewEnforcerReply)
	err := c.cc.Invoke(ctx, CasbinService_NewEnforcer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) NewAdapter(ctx context.Context, in *NewAdapterRequest, opts ...grpc.CallOption) (*NewAdapterReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewAdapterReply)
	err := c.cc.Invoke(ctx, CasbinService_NewAdapter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) Enforce(ctx context.Context, in *EnforceRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, CasbinService_Enforce_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) LoadPolicy(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, CasbinService_LoadPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) SavePolicy(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, CasbinService_SavePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) AddPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, CasbinService_AddPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) AddNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, CasbinService_AddNamedPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) RemovePolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, CasbinService_RemovePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) RemoveNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, CasbinService_RemoveNamedPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) RemoveFilteredPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, CasbinService_RemoveFilteredPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) RemoveFilteredNamedPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, CasbinService_RemoveFilteredNamedPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) GetPolicy(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Array2DReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Array2DReply)
	err := c.cc.Invoke(ctx, CasbinService_GetPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) GetNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*Array2DReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Array2DReply)
	err := c.cc.Invoke(ctx, CasbinService_GetNamedPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) GetFilteredPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*Array2DReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Array2DReply)
	err := c.cc.Invoke(ctx, CasbinService_GetFilteredPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) GetFilteredNamedPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*Array2DReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Array2DReply)
	err := c.cc.Invoke(ctx, CasbinService_GetFilteredNamedPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) AddGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, CasbinService_AddGroupingPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) AddNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, CasbinService_AddNamedGroupingPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) RemoveGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, CasbinService_RemoveGroupingPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) RemoveNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, CasbinService_RemoveNamedGroupingPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) RemoveFilteredGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, CasbinService_RemoveFilteredGroupingPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) RemoveFilteredNamedGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, CasbinService_RemoveFilteredNamedGroupingPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) GetGroupingPolicy(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Array2DReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Array2DReply)
	err := c.cc.Invoke(ctx, CasbinService_GetGroupingPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) GetNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*Array2DReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Array2DReply)
	err := c.cc.Invoke(ctx, CasbinService_GetNamedGroupingPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) GetFilteredGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*Array2DReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Array2DReply)
	err := c.cc.Invoke(ctx, CasbinService_GetFilteredGroupingPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) GetFilteredNamedGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*Array2DReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Array2DReply)
	err := c.cc.Invoke(ctx, CasbinService_GetFilteredNamedGroupingPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) GetAllSubjects(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ArrayReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArrayReply)
	err := c.cc.Invoke(ctx, CasbinService_GetAllSubjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) GetAllNamedSubjects(ctx context.Context, in *SimpleGetRequest, opts ...grpc.CallOption) (*ArrayReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArrayReply)
	err := c.cc.Invoke(ctx, CasbinService_GetAllNamedSubjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) GetAllObjects(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ArrayReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArrayReply)
	err := c.cc.Invoke(ctx, CasbinService_GetAllObjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) GetAllNamedObjects(ctx context.Context, in *SimpleGetRequest, opts ...grpc.CallOption) (*ArrayReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArrayReply)
	err := c.cc.Invoke(ctx, CasbinService_GetAllNamedObjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) GetAllActions(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ArrayReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArrayReply)
	err := c.cc.Invoke(ctx, CasbinService_GetAllActions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) GetAllNamedActions(ctx context.Context, in *SimpleGetRequest, opts ...grpc.CallOption) (*ArrayReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArrayReply)
	err := c.cc.Invoke(ctx, CasbinService_GetAllNamedActions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) GetAllRoles(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ArrayReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArrayReply)
	err := c.cc.Invoke(ctx, CasbinService_GetAllRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) GetAllNamedRoles(ctx context.Context, in *SimpleGetRequest, opts ...grpc.CallOption) (*ArrayReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArrayReply)
	err := c.cc.Invoke(ctx, CasbinService_GetAllNamedRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) HasPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, CasbinService_HasPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) HasNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, CasbinService_HasNamedPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) HasGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, CasbinService_HasGroupingPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) HasNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, CasbinService_HasNamedGroupingPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) GetDomains(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*ArrayReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArrayReply)
	err := c.cc.Invoke(ctx, CasbinService_GetDomains_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) GetRolesForUser(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*ArrayReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArrayReply)
	err := c.cc.Invoke(ctx, CasbinService_GetRolesForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) GetImplicitRolesForUser(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*ArrayReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArrayReply)
	err := c.cc.Invoke(ctx, CasbinService_GetImplicitRolesForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) GetUsersForRole(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*ArrayReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArrayReply)
	err := c.cc.Invoke(ctx, CasbinService_GetUsersForRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) HasRoleForUser(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, CasbinService_HasRoleForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) AddRoleForUser(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, CasbinService_AddRoleForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) DeleteRoleForUser(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, CasbinService_DeleteRoleForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) DeleteRolesForUser(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, CasbinService_DeleteRolesForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) DeleteUser(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, CasbinService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) DeleteRole(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, CasbinService_DeleteRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) GetPermissionsForUser(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*Array2DReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Array2DReply)
	err := c.cc.Invoke(ctx, CasbinService_GetPermissionsForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) GetImplicitPermissionsForUser(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*Array2DReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Array2DReply)
	err := c.cc.Invoke(ctx, CasbinService_GetImplicitPermissionsForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) DeletePermission(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, CasbinService_DeletePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) AddPermissionForUser(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, CasbinService_AddPermissionForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) DeletePermissionForUser(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, CasbinService_DeletePermissionForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) DeletePermissionsForUser(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, CasbinService_DeletePermissionsForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinServiceClient) HasPermissionForUser(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, CasbinService_HasPermissionForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CasbinServiceServer is the server API for CasbinService service.
// All implementations must embed UnimplementedCasbinServiceServer
// for forward compatibility.
//
// The Casbin service definition.
type CasbinServiceServer interface {
	NewEnforcer(context.Context, *NewEnforcerRequest) (*NewEnforcerReply, error)
	NewAdapter(context.Context, *NewAdapterRequest) (*NewAdapterReply, error)
	Enforce(context.Context, *EnforceRequest) (*BoolReply, error)
	LoadPolicy(context.Context, *EmptyRequest) (*EmptyReply, error)
	SavePolicy(context.Context, *EmptyRequest) (*EmptyReply, error)
	AddPolicy(context.Context, *PolicyRequest) (*BoolReply, error)
	AddNamedPolicy(context.Context, *PolicyRequest) (*BoolReply, error)
	RemovePolicy(context.Context, *PolicyRequest) (*BoolReply, error)
	RemoveNamedPolicy(context.Context, *PolicyRequest) (*BoolReply, error)
	RemoveFilteredPolicy(context.Context, *FilteredPolicyRequest) (*BoolReply, error)
	RemoveFilteredNamedPolicy(context.Context, *FilteredPolicyRequest) (*BoolReply, error)
	GetPolicy(context.Context, *EmptyRequest) (*Array2DReply, error)
	GetNamedPolicy(context.Context, *PolicyRequest) (*Array2DReply, error)
	GetFilteredPolicy(context.Context, *FilteredPolicyRequest) (*Array2DReply, error)
	GetFilteredNamedPolicy(context.Context, *FilteredPolicyRequest) (*Array2DReply, error)
	AddGroupingPolicy(context.Context, *PolicyRequest) (*BoolReply, error)
	AddNamedGroupingPolicy(context.Context, *PolicyRequest) (*BoolReply, error)
	RemoveGroupingPolicy(context.Context, *PolicyRequest) (*BoolReply, error)
	RemoveNamedGroupingPolicy(context.Context, *PolicyRequest) (*BoolReply, error)
	RemoveFilteredGroupingPolicy(context.Context, *FilteredPolicyRequest) (*BoolReply, error)
	RemoveFilteredNamedGroupingPolicy(context.Context, *FilteredPolicyRequest) (*BoolReply, error)
	GetGroupingPolicy(context.Context, *EmptyRequest) (*Array2DReply, error)
	GetNamedGroupingPolicy(context.Context, *PolicyRequest) (*Array2DReply, error)
	GetFilteredGroupingPolicy(context.Context, *FilteredPolicyRequest) (*Array2DReply, error)
	GetFilteredNamedGroupingPolicy(context.Context, *FilteredPolicyRequest) (*Array2DReply, error)
	GetAllSubjects(context.Context, *EmptyRequest) (*ArrayReply, error)
	GetAllNamedSubjects(context.Context, *SimpleGetRequest) (*ArrayReply, error)
	GetAllObjects(context.Context, *EmptyRequest) (*ArrayReply, error)
	GetAllNamedObjects(context.Context, *SimpleGetRequest) (*ArrayReply, error)
	GetAllActions(context.Context, *EmptyRequest) (*ArrayReply, error)
	GetAllNamedActions(context.Context, *SimpleGetRequest) (*ArrayReply, error)
	GetAllRoles(context.Context, *EmptyRequest) (*ArrayReply, error)
	GetAllNamedRoles(context.Context, *SimpleGetRequest) (*ArrayReply, error)
	HasPolicy(context.Context, *PolicyRequest) (*BoolReply, error)
	HasNamedPolicy(context.Context, *PolicyRequest) (*BoolReply, error)
	HasGroupingPolicy(context.Context, *PolicyRequest) (*BoolReply, error)
	HasNamedGroupingPolicy(context.Context, *PolicyRequest) (*BoolReply, error)
	GetDomains(context.Context, *UserRoleRequest) (*ArrayReply, error)
	GetRolesForUser(context.Context, *UserRoleRequest) (*ArrayReply, error)
	GetImplicitRolesForUser(context.Context, *UserRoleRequest) (*ArrayReply, error)
	GetUsersForRole(context.Context, *UserRoleRequest) (*ArrayReply, error)
	HasRoleForUser(context.Context, *UserRoleRequest) (*BoolReply, error)
	AddRoleForUser(context.Context, *UserRoleRequest) (*BoolReply, error)
	DeleteRoleForUser(context.Context, *UserRoleRequest) (*BoolReply, error)
	DeleteRolesForUser(context.Context, *UserRoleRequest) (*BoolReply, error)
	DeleteUser(context.Context, *UserRoleRequest) (*BoolReply, error)
	DeleteRole(context.Context, *UserRoleRequest) (*EmptyReply, error)
	GetPermissionsForUser(context.Context, *PermissionRequest) (*Array2DReply, error)
	GetImplicitPermissionsForUser(context.Context, *PermissionRequest) (*Array2DReply, error)
	DeletePermission(context.Context, *PermissionRequest) (*BoolReply, error)
	AddPermissionForUser(context.Context, *PermissionRequest) (*BoolReply, error)
	DeletePermissionForUser(context.Context, *PermissionRequest) (*BoolReply, error)
	DeletePermissionsForUser(context.Context, *PermissionRequest) (*BoolReply, error)
	HasPermissionForUser(context.Context, *PermissionRequest) (*BoolReply, error)
	mustEmbedUnimplementedCasbinServiceServer()
}

// UnimplementedCasbinServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCasbinServiceServer struct{}

func (UnimplementedCasbinServiceServer) NewEnforcer(context.Context, *NewEnforcerRequest) (*NewEnforcerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewEnforcer not implemented")
}
func (UnimplementedCasbinServiceServer) NewAdapter(context.Context, *NewAdapterRequest) (*NewAdapterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAdapter not implemented")
}
func (UnimplementedCasbinServiceServer) Enforce(context.Context, *EnforceRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enforce not implemented")
}
func (UnimplementedCasbinServiceServer) LoadPolicy(context.Context, *EmptyRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadPolicy not implemented")
}
func (UnimplementedCasbinServiceServer) SavePolicy(context.Context, *EmptyRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePolicy not implemented")
}
func (UnimplementedCasbinServiceServer) AddPolicy(context.Context, *PolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPolicy not implemented")
}
func (UnimplementedCasbinServiceServer) AddNamedPolicy(context.Context, *PolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNamedPolicy not implemented")
}
func (UnimplementedCasbinServiceServer) RemovePolicy(context.Context, *PolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePolicy not implemented")
}
func (UnimplementedCasbinServiceServer) RemoveNamedPolicy(context.Context, *PolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNamedPolicy not implemented")
}
func (UnimplementedCasbinServiceServer) RemoveFilteredPolicy(context.Context, *FilteredPolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFilteredPolicy not implemented")
}
func (UnimplementedCasbinServiceServer) RemoveFilteredNamedPolicy(context.Context, *FilteredPolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFilteredNamedPolicy not implemented")
}
func (UnimplementedCasbinServiceServer) GetPolicy(context.Context, *EmptyRequest) (*Array2DReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (UnimplementedCasbinServiceServer) GetNamedPolicy(context.Context, *PolicyRequest) (*Array2DReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamedPolicy not implemented")
}
func (UnimplementedCasbinServiceServer) GetFilteredPolicy(context.Context, *FilteredPolicyRequest) (*Array2DReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredPolicy not implemented")
}
func (UnimplementedCasbinServiceServer) GetFilteredNamedPolicy(context.Context, *FilteredPolicyRequest) (*Array2DReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredNamedPolicy not implemented")
}
func (UnimplementedCasbinServiceServer) AddGroupingPolicy(context.Context, *PolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroupingPolicy not implemented")
}
func (UnimplementedCasbinServiceServer) AddNamedGroupingPolicy(context.Context, *PolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNamedGroupingPolicy not implemented")
}
func (UnimplementedCasbinServiceServer) RemoveGroupingPolicy(context.Context, *PolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGroupingPolicy not implemented")
}
func (UnimplementedCasbinServiceServer) RemoveNamedGroupingPolicy(context.Context, *PolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNamedGroupingPolicy not implemented")
}
func (UnimplementedCasbinServiceServer) RemoveFilteredGroupingPolicy(context.Context, *FilteredPolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFilteredGroupingPolicy not implemented")
}
func (UnimplementedCasbinServiceServer) RemoveFilteredNamedGroupingPolicy(context.Context, *FilteredPolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFilteredNamedGroupingPolicy not implemented")
}
func (UnimplementedCasbinServiceServer) GetGroupingPolicy(context.Context, *EmptyRequest) (*Array2DReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupingPolicy not implemented")
}
func (UnimplementedCasbinServiceServer) GetNamedGroupingPolicy(context.Context, *PolicyRequest) (*Array2DReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamedGroupingPolicy not implemented")
}
func (UnimplementedCasbinServiceServer) GetFilteredGroupingPolicy(context.Context, *FilteredPolicyRequest) (*Array2DReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredGroupingPolicy not implemented")
}
func (UnimplementedCasbinServiceServer) GetFilteredNamedGroupingPolicy(context.Context, *FilteredPolicyRequest) (*Array2DReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredNamedGroupingPolicy not implemented")
}
func (UnimplementedCasbinServiceServer) GetAllSubjects(context.Context, *EmptyRequest) (*ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSubjects not implemented")
}
func (UnimplementedCasbinServiceServer) GetAllNamedSubjects(context.Context, *SimpleGetRequest) (*ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNamedSubjects not implemented")
}
func (UnimplementedCasbinServiceServer) GetAllObjects(context.Context, *EmptyRequest) (*ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllObjects not implemented")
}
func (UnimplementedCasbinServiceServer) GetAllNamedObjects(context.Context, *SimpleGetRequest) (*ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNamedObjects not implemented")
}
func (UnimplementedCasbinServiceServer) GetAllActions(context.Context, *EmptyRequest) (*ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllActions not implemented")
}
func (UnimplementedCasbinServiceServer) GetAllNamedActions(context.Context, *SimpleGetRequest) (*ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNamedActions not implemented")
}
func (UnimplementedCasbinServiceServer) GetAllRoles(context.Context, *EmptyRequest) (*ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRoles not implemented")
}
func (UnimplementedCasbinServiceServer) GetAllNamedRoles(context.Context, *SimpleGetRequest) (*ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNamedRoles not implemented")
}
func (UnimplementedCasbinServiceServer) HasPolicy(context.Context, *PolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasPolicy not implemented")
}
func (UnimplementedCasbinServiceServer) HasNamedPolicy(context.Context, *PolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasNamedPolicy not implemented")
}
func (UnimplementedCasbinServiceServer) HasGroupingPolicy(context.Context, *PolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasGroupingPolicy not implemented")
}
func (UnimplementedCasbinServiceServer) HasNamedGroupingPolicy(context.Context, *PolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasNamedGroupingPolicy not implemented")
}
func (UnimplementedCasbinServiceServer) GetDomains(context.Context, *UserRoleRequest) (*ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomains not implemented")
}
func (UnimplementedCasbinServiceServer) GetRolesForUser(context.Context, *UserRoleRequest) (*ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolesForUser not implemented")
}
func (UnimplementedCasbinServiceServer) GetImplicitRolesForUser(context.Context, *UserRoleRequest) (*ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImplicitRolesForUser not implemented")
}
func (UnimplementedCasbinServiceServer) GetUsersForRole(context.Context, *UserRoleRequest) (*ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersForRole not implemented")
}
func (UnimplementedCasbinServiceServer) HasRoleForUser(context.Context, *UserRoleRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasRoleForUser not implemented")
}
func (UnimplementedCasbinServiceServer) AddRoleForUser(context.Context, *UserRoleRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoleForUser not implemented")
}
func (UnimplementedCasbinServiceServer) DeleteRoleForUser(context.Context, *UserRoleRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleForUser not implemented")
}
func (UnimplementedCasbinServiceServer) DeleteRolesForUser(context.Context, *UserRoleRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRolesForUser not implemented")
}
func (UnimplementedCasbinServiceServer) DeleteUser(context.Context, *UserRoleRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedCasbinServiceServer) DeleteRole(context.Context, *UserRoleRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedCasbinServiceServer) GetPermissionsForUser(context.Context, *PermissionRequest) (*Array2DReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionsForUser not implemented")
}
func (UnimplementedCasbinServiceServer) GetImplicitPermissionsForUser(context.Context, *PermissionRequest) (*Array2DReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImplicitPermissionsForUser not implemented")
}
func (UnimplementedCasbinServiceServer) DeletePermission(context.Context, *PermissionRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermission not implemented")
}
func (UnimplementedCasbinServiceServer) AddPermissionForUser(context.Context, *PermissionRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPermissionForUser not implemented")
}
func (UnimplementedCasbinServiceServer) DeletePermissionForUser(context.Context, *PermissionRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermissionForUser not implemented")
}
func (UnimplementedCasbinServiceServer) DeletePermissionsForUser(context.Context, *PermissionRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermissionsForUser not implemented")
}
func (UnimplementedCasbinServiceServer) HasPermissionForUser(context.Context, *PermissionRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasPermissionForUser not implemented")
}
func (UnimplementedCasbinServiceServer) mustEmbedUnimplementedCasbinServiceServer() {}
func (UnimplementedCasbinServiceServer) testEmbeddedByValue()                       {}

// UnsafeCasbinServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CasbinServiceServer will
// result in compilation errors.
type UnsafeCasbinServiceServer interface {
	mustEmbedUnimplementedCasbinServiceServer()
}

func RegisterCasbinServiceServer(s grpc.ServiceRegistrar, srv CasbinServiceServer) {
	// If the following call pancis, it indicates UnimplementedCasbinServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CasbinService_ServiceDesc, srv)
}

func _CasbinService_NewEnforcer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewEnforcerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).NewEnforcer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_NewEnforcer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).NewEnforcer(ctx, req.(*NewEnforcerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_NewAdapter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAdapterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).NewAdapter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_NewAdapter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).NewAdapter(ctx, req.(*NewAdapterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_Enforce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnforceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).Enforce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_Enforce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).Enforce(ctx, req.(*EnforceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_LoadPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).LoadPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_LoadPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).LoadPolicy(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_SavePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).SavePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_SavePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).SavePolicy(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_AddPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).AddPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_AddPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).AddPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_AddNamedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).AddNamedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_AddNamedPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).AddNamedPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_RemovePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).RemovePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_RemovePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).RemovePolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_RemoveNamedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).RemoveNamedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_RemoveNamedPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).RemoveNamedPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_RemoveFilteredPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).RemoveFilteredPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_RemoveFilteredPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).RemoveFilteredPolicy(ctx, req.(*FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_RemoveFilteredNamedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).RemoveFilteredNamedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_RemoveFilteredNamedPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).RemoveFilteredNamedPolicy(ctx, req.(*FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_GetPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).GetPolicy(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_GetNamedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).GetNamedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_GetNamedPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).GetNamedPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_GetFilteredPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).GetFilteredPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_GetFilteredPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).GetFilteredPolicy(ctx, req.(*FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_GetFilteredNamedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).GetFilteredNamedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_GetFilteredNamedPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).GetFilteredNamedPolicy(ctx, req.(*FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_AddGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).AddGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_AddGroupingPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).AddGroupingPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_AddNamedGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).AddNamedGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_AddNamedGroupingPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).AddNamedGroupingPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_RemoveGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).RemoveGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_RemoveGroupingPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).RemoveGroupingPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_RemoveNamedGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).RemoveNamedGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_RemoveNamedGroupingPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).RemoveNamedGroupingPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_RemoveFilteredGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).RemoveFilteredGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_RemoveFilteredGroupingPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).RemoveFilteredGroupingPolicy(ctx, req.(*FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_RemoveFilteredNamedGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).RemoveFilteredNamedGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_RemoveFilteredNamedGroupingPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).RemoveFilteredNamedGroupingPolicy(ctx, req.(*FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_GetGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).GetGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_GetGroupingPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).GetGroupingPolicy(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_GetNamedGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).GetNamedGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_GetNamedGroupingPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).GetNamedGroupingPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_GetFilteredGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).GetFilteredGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_GetFilteredGroupingPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).GetFilteredGroupingPolicy(ctx, req.(*FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_GetFilteredNamedGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).GetFilteredNamedGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_GetFilteredNamedGroupingPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).GetFilteredNamedGroupingPolicy(ctx, req.(*FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_GetAllSubjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).GetAllSubjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_GetAllSubjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).GetAllSubjects(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_GetAllNamedSubjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).GetAllNamedSubjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_GetAllNamedSubjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).GetAllNamedSubjects(ctx, req.(*SimpleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_GetAllObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).GetAllObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_GetAllObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).GetAllObjects(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_GetAllNamedObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).GetAllNamedObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_GetAllNamedObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).GetAllNamedObjects(ctx, req.(*SimpleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_GetAllActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).GetAllActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_GetAllActions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).GetAllActions(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_GetAllNamedActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).GetAllNamedActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_GetAllNamedActions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).GetAllNamedActions(ctx, req.(*SimpleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_GetAllRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).GetAllRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_GetAllRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).GetAllRoles(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_GetAllNamedRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).GetAllNamedRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_GetAllNamedRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).GetAllNamedRoles(ctx, req.(*SimpleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_HasPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).HasPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_HasPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).HasPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_HasNamedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).HasNamedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_HasNamedPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).HasNamedPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_HasGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).HasGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_HasGroupingPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).HasGroupingPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_HasNamedGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).HasNamedGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_HasNamedGroupingPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).HasNamedGroupingPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_GetDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).GetDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_GetDomains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).GetDomains(ctx, req.(*UserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_GetRolesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).GetRolesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_GetRolesForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).GetRolesForUser(ctx, req.(*UserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_GetImplicitRolesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).GetImplicitRolesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_GetImplicitRolesForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).GetImplicitRolesForUser(ctx, req.(*UserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_GetUsersForRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).GetUsersForRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_GetUsersForRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).GetUsersForRole(ctx, req.(*UserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_HasRoleForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).HasRoleForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_HasRoleForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).HasRoleForUser(ctx, req.(*UserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_AddRoleForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).AddRoleForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_AddRoleForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).AddRoleForUser(ctx, req.(*UserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_DeleteRoleForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).DeleteRoleForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_DeleteRoleForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).DeleteRoleForUser(ctx, req.(*UserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_DeleteRolesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).DeleteRolesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_DeleteRolesForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).DeleteRolesForUser(ctx, req.(*UserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).DeleteUser(ctx, req.(*UserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).DeleteRole(ctx, req.(*UserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_GetPermissionsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).GetPermissionsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_GetPermissionsForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).GetPermissionsForUser(ctx, req.(*PermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_GetImplicitPermissionsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).GetImplicitPermissionsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_GetImplicitPermissionsForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).GetImplicitPermissionsForUser(ctx, req.(*PermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_DeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).DeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_DeletePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).DeletePermission(ctx, req.(*PermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_AddPermissionForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).AddPermissionForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_AddPermissionForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).AddPermissionForUser(ctx, req.(*PermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_DeletePermissionForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).DeletePermissionForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_DeletePermissionForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).DeletePermissionForUser(ctx, req.(*PermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_DeletePermissionsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).DeletePermissionsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_DeletePermissionsForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).DeletePermissionsForUser(ctx, req.(*PermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinService_HasPermissionForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServiceServer).HasPermissionForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasbinService_HasPermissionForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServiceServer).HasPermissionForUser(ctx, req.(*PermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CasbinService_ServiceDesc is the grpc.ServiceDesc for CasbinService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CasbinService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.services.casbin.CasbinService",
	HandlerType: (*CasbinServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewEnforcer",
			Handler:    _CasbinService_NewEnforcer_Handler,
		},
		{
			MethodName: "NewAdapter",
			Handler:    _CasbinService_NewAdapter_Handler,
		},
		{
			MethodName: "Enforce",
			Handler:    _CasbinService_Enforce_Handler,
		},
		{
			MethodName: "LoadPolicy",
			Handler:    _CasbinService_LoadPolicy_Handler,
		},
		{
			MethodName: "SavePolicy",
			Handler:    _CasbinService_SavePolicy_Handler,
		},
		{
			MethodName: "AddPolicy",
			Handler:    _CasbinService_AddPolicy_Handler,
		},
		{
			MethodName: "AddNamedPolicy",
			Handler:    _CasbinService_AddNamedPolicy_Handler,
		},
		{
			MethodName: "RemovePolicy",
			Handler:    _CasbinService_RemovePolicy_Handler,
		},
		{
			MethodName: "RemoveNamedPolicy",
			Handler:    _CasbinService_RemoveNamedPolicy_Handler,
		},
		{
			MethodName: "RemoveFilteredPolicy",
			Handler:    _CasbinService_RemoveFilteredPolicy_Handler,
		},
		{
			MethodName: "RemoveFilteredNamedPolicy",
			Handler:    _CasbinService_RemoveFilteredNamedPolicy_Handler,
		},
		{
			MethodName: "GetPolicy",
			Handler:    _CasbinService_GetPolicy_Handler,
		},
		{
			MethodName: "GetNamedPolicy",
			Handler:    _CasbinService_GetNamedPolicy_Handler,
		},
		{
			MethodName: "GetFilteredPolicy",
			Handler:    _CasbinService_GetFilteredPolicy_Handler,
		},
		{
			MethodName: "GetFilteredNamedPolicy",
			Handler:    _CasbinService_GetFilteredNamedPolicy_Handler,
		},
		{
			MethodName: "AddGroupingPolicy",
			Handler:    _CasbinService_AddGroupingPolicy_Handler,
		},
		{
			MethodName: "AddNamedGroupingPolicy",
			Handler:    _CasbinService_AddNamedGroupingPolicy_Handler,
		},
		{
			MethodName: "RemoveGroupingPolicy",
			Handler:    _CasbinService_RemoveGroupingPolicy_Handler,
		},
		{
			MethodName: "RemoveNamedGroupingPolicy",
			Handler:    _CasbinService_RemoveNamedGroupingPolicy_Handler,
		},
		{
			MethodName: "RemoveFilteredGroupingPolicy",
			Handler:    _CasbinService_RemoveFilteredGroupingPolicy_Handler,
		},
		{
			MethodName: "RemoveFilteredNamedGroupingPolicy",
			Handler:    _CasbinService_RemoveFilteredNamedGroupingPolicy_Handler,
		},
		{
			MethodName: "GetGroupingPolicy",
			Handler:    _CasbinService_GetGroupingPolicy_Handler,
		},
		{
			MethodName: "GetNamedGroupingPolicy",
			Handler:    _CasbinService_GetNamedGroupingPolicy_Handler,
		},
		{
			MethodName: "GetFilteredGroupingPolicy",
			Handler:    _CasbinService_GetFilteredGroupingPolicy_Handler,
		},
		{
			MethodName: "GetFilteredNamedGroupingPolicy",
			Handler:    _CasbinService_GetFilteredNamedGroupingPolicy_Handler,
		},
		{
			MethodName: "GetAllSubjects",
			Handler:    _CasbinService_GetAllSubjects_Handler,
		},
		{
			MethodName: "GetAllNamedSubjects",
			Handler:    _CasbinService_GetAllNamedSubjects_Handler,
		},
		{
			MethodName: "GetAllObjects",
			Handler:    _CasbinService_GetAllObjects_Handler,
		},
		{
			MethodName: "GetAllNamedObjects",
			Handler:    _CasbinService_GetAllNamedObjects_Handler,
		},
		{
			MethodName: "GetAllActions",
			Handler:    _CasbinService_GetAllActions_Handler,
		},
		{
			MethodName: "GetAllNamedActions",
			Handler:    _CasbinService_GetAllNamedActions_Handler,
		},
		{
			MethodName: "GetAllRoles",
			Handler:    _CasbinService_GetAllRoles_Handler,
		},
		{
			MethodName: "GetAllNamedRoles",
			Handler:    _CasbinService_GetAllNamedRoles_Handler,
		},
		{
			MethodName: "HasPolicy",
			Handler:    _CasbinService_HasPolicy_Handler,
		},
		{
			MethodName: "HasNamedPolicy",
			Handler:    _CasbinService_HasNamedPolicy_Handler,
		},
		{
			MethodName: "HasGroupingPolicy",
			Handler:    _CasbinService_HasGroupingPolicy_Handler,
		},
		{
			MethodName: "HasNamedGroupingPolicy",
			Handler:    _CasbinService_HasNamedGroupingPolicy_Handler,
		},
		{
			MethodName: "GetDomains",
			Handler:    _CasbinService_GetDomains_Handler,
		},
		{
			MethodName: "GetRolesForUser",
			Handler:    _CasbinService_GetRolesForUser_Handler,
		},
		{
			MethodName: "GetImplicitRolesForUser",
			Handler:    _CasbinService_GetImplicitRolesForUser_Handler,
		},
		{
			MethodName: "GetUsersForRole",
			Handler:    _CasbinService_GetUsersForRole_Handler,
		},
		{
			MethodName: "HasRoleForUser",
			Handler:    _CasbinService_HasRoleForUser_Handler,
		},
		{
			MethodName: "AddRoleForUser",
			Handler:    _CasbinService_AddRoleForUser_Handler,
		},
		{
			MethodName: "DeleteRoleForUser",
			Handler:    _CasbinService_DeleteRoleForUser_Handler,
		},
		{
			MethodName: "DeleteRolesForUser",
			Handler:    _CasbinService_DeleteRolesForUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _CasbinService_DeleteUser_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _CasbinService_DeleteRole_Handler,
		},
		{
			MethodName: "GetPermissionsForUser",
			Handler:    _CasbinService_GetPermissionsForUser_Handler,
		},
		{
			MethodName: "GetImplicitPermissionsForUser",
			Handler:    _CasbinService_GetImplicitPermissionsForUser_Handler,
		},
		{
			MethodName: "DeletePermission",
			Handler:    _CasbinService_DeletePermission_Handler,
		},
		{
			MethodName: "AddPermissionForUser",
			Handler:    _CasbinService_AddPermissionForUser_Handler,
		},
		{
			MethodName: "DeletePermissionForUser",
			Handler:    _CasbinService_DeletePermissionForUser_Handler,
		},
		{
			MethodName: "DeletePermissionsForUser",
			Handler:    _CasbinService_DeletePermissionsForUser_Handler,
		},
		{
			MethodName: "HasPermissionForUser",
			Handler:    _CasbinService_HasPermissionForUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "casbin/casbin.proto",
}
