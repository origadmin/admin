// Copyright 2018 The casbin Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: casbin/casbin.proto

package casbin

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListPoliciesRequest) Reset() {
	*x = ListPoliciesRequest{}
	mi := &file_casbin_casbin_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPoliciesRequest) ProtoMessage() {}

func (x *ListPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_casbin_casbin_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_casbin_casbin_proto_rawDescGZIP(), []int{0}
}

type ListPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*PolicyRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *ListPoliciesResponse) Reset() {
	*x = ListPoliciesResponse{}
	mi := &file_casbin_casbin_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPoliciesResponse) ProtoMessage() {}

func (x *ListPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_casbin_casbin_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPoliciesResponse.ProtoReflect.Descriptor instead.
func (*ListPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_casbin_casbin_proto_rawDescGZIP(), []int{1}
}

func (x *ListPoliciesResponse) GetRules() []*PolicyRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type PolicyRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ptype  string   `protobuf:"bytes,1,opt,name=ptype,proto3" json:"ptype,omitempty"`
	Params []string `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *PolicyRule) Reset() {
	*x = PolicyRule{}
	mi := &file_casbin_casbin_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyRule) ProtoMessage() {}

func (x *PolicyRule) ProtoReflect() protoreflect.Message {
	mi := &file_casbin_casbin_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyRule.ProtoReflect.Descriptor instead.
func (*PolicyRule) Descriptor() ([]byte, []int) {
	return file_casbin_casbin_proto_rawDescGZIP(), []int{2}
}

func (x *PolicyRule) GetPtype() string {
	if x != nil {
		return x.Ptype
	}
	return ""
}

func (x *PolicyRule) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

type ListGroupingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListGroupingsRequest) Reset() {
	*x = ListGroupingsRequest{}
	mi := &file_casbin_casbin_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListGroupingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupingsRequest) ProtoMessage() {}

func (x *ListGroupingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_casbin_casbin_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupingsRequest.ProtoReflect.Descriptor instead.
func (*ListGroupingsRequest) Descriptor() ([]byte, []int) {
	return file_casbin_casbin_proto_rawDescGZIP(), []int{3}
}

type ListGroupingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*GroupingRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *ListGroupingsResponse) Reset() {
	*x = ListGroupingsResponse{}
	mi := &file_casbin_casbin_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListGroupingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupingsResponse) ProtoMessage() {}

func (x *ListGroupingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_casbin_casbin_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupingsResponse.ProtoReflect.Descriptor instead.
func (*ListGroupingsResponse) Descriptor() ([]byte, []int) {
	return file_casbin_casbin_proto_rawDescGZIP(), []int{4}
}

func (x *ListGroupingsResponse) GetRules() []*GroupingRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type GroupingRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ptype  string   `protobuf:"bytes,1,opt,name=ptype,proto3" json:"ptype,omitempty"`
	Params []string `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *GroupingRule) Reset() {
	*x = GroupingRule{}
	mi := &file_casbin_casbin_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupingRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupingRule) ProtoMessage() {}

func (x *GroupingRule) ProtoReflect() protoreflect.Message {
	mi := &file_casbin_casbin_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupingRule.ProtoReflect.Descriptor instead.
func (*GroupingRule) Descriptor() ([]byte, []int) {
	return file_casbin_casbin_proto_rawDescGZIP(), []int{5}
}

func (x *GroupingRule) GetPtype() string {
	if x != nil {
		return x.Ptype
	}
	return ""
}

func (x *GroupingRule) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

type StreamRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WithPolicies  bool `protobuf:"varint,1,opt,name=with_policies,proto3" json:"with_policies,omitempty"`
	WithGroupings bool `protobuf:"varint,2,opt,name=with_groupings,proto3" json:"with_groupings,omitempty"`
}

func (x *StreamRulesRequest) Reset() {
	*x = StreamRulesRequest{}
	mi := &file_casbin_casbin_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRulesRequest) ProtoMessage() {}

func (x *StreamRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_casbin_casbin_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRulesRequest.ProtoReflect.Descriptor instead.
func (*StreamRulesRequest) Descriptor() ([]byte, []int) {
	return file_casbin_casbin_proto_rawDescGZIP(), []int{6}
}

func (x *StreamRulesRequest) GetWithPolicies() bool {
	if x != nil {
		return x.WithPolicies
	}
	return false
}

func (x *StreamRulesRequest) GetWithGroupings() bool {
	if x != nil {
		return x.WithGroupings
	}
	return false
}

type StreamRulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RuleType:
	//
	//	*StreamRulesResponse_Policy
	//	*StreamRulesResponse_Grouping
	RuleType isStreamRulesResponse_RuleType `protobuf_oneof:"rule_type"`
}

func (x *StreamRulesResponse) Reset() {
	*x = StreamRulesResponse{}
	mi := &file_casbin_casbin_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRulesResponse) ProtoMessage() {}

func (x *StreamRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_casbin_casbin_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRulesResponse.ProtoReflect.Descriptor instead.
func (*StreamRulesResponse) Descriptor() ([]byte, []int) {
	return file_casbin_casbin_proto_rawDescGZIP(), []int{7}
}

func (m *StreamRulesResponse) GetRuleType() isStreamRulesResponse_RuleType {
	if m != nil {
		return m.RuleType
	}
	return nil
}

func (x *StreamRulesResponse) GetPolicy() *PolicyRule {
	if x, ok := x.GetRuleType().(*StreamRulesResponse_Policy); ok {
		return x.Policy
	}
	return nil
}

func (x *StreamRulesResponse) GetGrouping() *GroupingRule {
	if x, ok := x.GetRuleType().(*StreamRulesResponse_Grouping); ok {
		return x.Grouping
	}
	return nil
}

type isStreamRulesResponse_RuleType interface {
	isStreamRulesResponse_RuleType()
}

type StreamRulesResponse_Policy struct {
	Policy *PolicyRule `protobuf:"bytes,1,opt,name=policy,proto3,oneof"`
}

type StreamRulesResponse_Grouping struct {
	Grouping *GroupingRule `protobuf:"bytes,2,opt,name=grouping,proto3,oneof"`
}

func (*StreamRulesResponse_Policy) isStreamRulesResponse_RuleType() {}

func (*StreamRulesResponse_Grouping) isStreamRulesResponse_RuleType() {}

var File_casbin_casbin_proto protoreflect.FileDescriptor

var file_casbin_casbin_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x2f, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x22, 0x15, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x50, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x05,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61,
	0x73, 0x62, 0x69, 0x6e, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x3a, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22,
	0x3c, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x62, 0x0a,
	0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0xa4, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x73, 0x62,
	0x69, 0x6e, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52,
	0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x42, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x73, 0x62,
	0x69, 0x6e, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x32, 0xde, 0x02, 0x0a, 0x13, 0x43, 0x61, 0x73,
	0x62, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x6b, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a,
	0x0d, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x61, 0x73, 0x62, 0x69, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a,
	0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x61, 0x73, 0x62, 0x69, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x73, 0x62, 0x69,
	0x6e, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0xc0, 0x01, 0x0a, 0x1a, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x42, 0x0b, 0x43, 0x61, 0x73, 0x62, 0x69, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x19, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x3b, 0x63, 0x61, 0x73, 0x62,
	0x69, 0x6e, 0xa2, 0x02, 0x04, 0x41, 0x56, 0x53, 0x43, 0xaa, 0x02, 0x16, 0x41, 0x70, 0x69, 0x2e,
	0x56, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x73, 0x62,
	0x69, 0x6e, 0xca, 0x02, 0x16, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x5c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x5c, 0x43, 0x61, 0x73, 0x62, 0x69, 0x6e, 0xe2, 0x02, 0x22, 0x41, 0x70,
	0x69, 0x5c, 0x56, 0x31, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5c, 0x43, 0x61,
	0x73, 0x62, 0x69, 0x6e, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x19, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x56, 0x31, 0x3a, 0x3a, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x3a, 0x3a, 0x43, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_casbin_casbin_proto_rawDescOnce sync.Once
	file_casbin_casbin_proto_rawDescData = file_casbin_casbin_proto_rawDesc
)

func file_casbin_casbin_proto_rawDescGZIP() []byte {
	file_casbin_casbin_proto_rawDescOnce.Do(func() {
		file_casbin_casbin_proto_rawDescData = protoimpl.X.CompressGZIP(file_casbin_casbin_proto_rawDescData)
	})
	return file_casbin_casbin_proto_rawDescData
}

var file_casbin_casbin_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_casbin_casbin_proto_goTypes = []any{
	(*ListPoliciesRequest)(nil),   // 0: api.v1.services.casbin.ListPoliciesRequest
	(*ListPoliciesResponse)(nil),  // 1: api.v1.services.casbin.ListPoliciesResponse
	(*PolicyRule)(nil),            // 2: api.v1.services.casbin.PolicyRule
	(*ListGroupingsRequest)(nil),  // 3: api.v1.services.casbin.ListGroupingsRequest
	(*ListGroupingsResponse)(nil), // 4: api.v1.services.casbin.ListGroupingsResponse
	(*GroupingRule)(nil),          // 5: api.v1.services.casbin.GroupingRule
	(*StreamRulesRequest)(nil),    // 6: api.v1.services.casbin.StreamRulesRequest
	(*StreamRulesResponse)(nil),   // 7: api.v1.services.casbin.StreamRulesResponse
}
var file_casbin_casbin_proto_depIdxs = []int32{
	2, // 0: api.v1.services.casbin.ListPoliciesResponse.rules:type_name -> api.v1.services.casbin.PolicyRule
	5, // 1: api.v1.services.casbin.ListGroupingsResponse.rules:type_name -> api.v1.services.casbin.GroupingRule
	2, // 2: api.v1.services.casbin.StreamRulesResponse.policy:type_name -> api.v1.services.casbin.PolicyRule
	5, // 3: api.v1.services.casbin.StreamRulesResponse.grouping:type_name -> api.v1.services.casbin.GroupingRule
	0, // 4: api.v1.services.casbin.CasbinSourceService.ListPolicies:input_type -> api.v1.services.casbin.ListPoliciesRequest
	3, // 5: api.v1.services.casbin.CasbinSourceService.ListGroupings:input_type -> api.v1.services.casbin.ListGroupingsRequest
	6, // 6: api.v1.services.casbin.CasbinSourceService.StreamRules:input_type -> api.v1.services.casbin.StreamRulesRequest
	1, // 7: api.v1.services.casbin.CasbinSourceService.ListPolicies:output_type -> api.v1.services.casbin.ListPoliciesResponse
	4, // 8: api.v1.services.casbin.CasbinSourceService.ListGroupings:output_type -> api.v1.services.casbin.ListGroupingsResponse
	7, // 9: api.v1.services.casbin.CasbinSourceService.StreamRules:output_type -> api.v1.services.casbin.StreamRulesResponse
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_casbin_casbin_proto_init() }
func file_casbin_casbin_proto_init() {
	if File_casbin_casbin_proto != nil {
		return
	}
	file_casbin_casbin_proto_msgTypes[7].OneofWrappers = []any{
		(*StreamRulesResponse_Policy)(nil),
		(*StreamRulesResponse_Grouping)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_casbin_casbin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_casbin_casbin_proto_goTypes,
		DependencyIndexes: file_casbin_casbin_proto_depIdxs,
		MessageInfos:      file_casbin_casbin_proto_msgTypes,
	}.Build()
	File_casbin_casbin_proto = out.File
	file_casbin_casbin_proto_rawDesc = nil
	file_casbin_casbin_proto_goTypes = nil
	file_casbin_casbin_proto_depIdxs = nil
}
