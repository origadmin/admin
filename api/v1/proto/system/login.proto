syntax = "proto3";

package api.v1.services.system;

import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "security/jwt/v1/token.proto";
import "validate/validate.proto";

option go_package = "v1/services/system;system";
option java_multiple_files = true;
option java_outer_classname = "APIV1ServicesSystemProto";
option java_package = "com.origadmin.api.v1.services.system";

// The login service definition.
service LoginService {
  rpc Captcha (CaptchaRequest) returns (CaptchaResponse) {
    option (google.api.http) = {
      get: "/captcha"
      response_body: "*"
    };
  }
  rpc CaptchaId (CaptchaIdRequest) returns (CaptchaIdResponse) {
    option (google.api.http) = {get: "/captcha/id"};
  }
  rpc CaptchaImage (CaptchaImageRequest) returns (CaptchaImageResponse) {
    option (google.api.http) = {
      get: "/captcha/image"
      response_body: "*"
    };
  }
  rpc CaptchaAudio (CaptchaAudioRequest) returns (CaptchaAudioResponse) {
    option (google.api.http) = {
      get: "/captcha/audio"
      response_body: "*"
    };
  }

  rpc Login (LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/login"
      body: "data"
    };
  }
  rpc Logout (LogoutRequest) returns (LogoutResponse) {
    option (google.api.http) = {
      post: "/logout"
      body: "data"
    };
  }
  rpc Register (RegisterRequest) returns (RegisterResponse) {
    option (google.api.http) = {
      post: "/register"
      body: "data"
    };
  }

  rpc TokenRefresh (TokenRefreshRequest) returns (TokenRefreshResponse) {
    option (google.api.http) = {
      post: "/token/refresh"
      body: "data"
    };
  }
}

message TokenRefreshRequest {
  message Data {
    string refresh_token = 1 [
      json_name = "refresh_token",
      (validate.rules).string = {min_len: 1}
    ];
  }
  Data data = 2 [json_name = "data"];
}

message TokenRefreshResponse {
  security.jwt.v1.Token token = 1;
}

message LoginRequest {
  message Data {
    string username = 1 [
      json_name = "username",
      (validate.rules).string = {min_len: 1}
    ];
    string password = 2 [
      json_name = "password",
      (validate.rules).string = {min_len: 1}
    ];
    string captcha_id = 3 [
      json_name = "captcha_id",
      (validate.rules).string = {min_len: 1}
    ];
    string captcha_code = 4 [
      json_name = "captcha_code",
      (validate.rules).string = {min_len: 1}
    ];
  }
  Data data = 2 [json_name = "data"];
}

message LoginResponse {
  security.jwt.v1.Token token = 1;
}

message CurrentUserRequestQuery {
  int64 user_id = 1 [json_name = "user_id"];
}

message CurrentUserRequest {
  CurrentUserRequestQuery data = 1 [json_name = "data"];
}

message CurrentUserResponse {
  bool success = 1;
  google.protobuf.Any data = 2 [json_name = "data"];
}

message CaptchaIdRequest {
  // The timestamp of the request prevent caching of the same result
  string ts = 1 [json_name = "ts"];
  bool reload = 2 [json_name = "reload"];
}

message CaptchaIdResponse {
  string data = 1;
}

// The request message containing the user's name.
message CaptchaImageRequest {
  string id = 1 [json_name = "id"];
  string reload = 2 [json_name = "reload"];
  google.protobuf.Any data = 3 [json_name = "data"];
}

message CaptchaData {
  string captcha_id = 1;
  string captcha_img = 2;
}

// The response message containing the greetings
message CaptchaImageResponse {
  map<string, string> headers = 1;
  bytes image = 2 [json_name = "image"];
}

// The request message containing the user's name.
message CaptchaAudioRequest {
  string id = 1 [json_name = "id"];
  string reload = 2 [json_name = "reload"];
  google.protobuf.Any data = 3 [json_name = "data"];
}

// The response message containing the greetings
message CaptchaAudioResponse {
  map<string, string> headers = 1;
  bytes audio = 2 [json_name = "audio"];
}


message CaptchaRequest {
  string id = 1 [json_name = "id"];
  string type = 2 [json_name = "type"];
  bool reload = 3 [json_name = "reload"];
  // The timestamp of the request prevent caching of the same result
  string ts = 4 [json_name = "ts"];
}

message CaptchaResponse {
  string id = 1 [json_name = "id"];
  string type = 2 [json_name = "type"];
  string data = 3 [json_name = "data"];
}

message RegisterRequest {
  message Data {
    string username = 1 [
      json_name = "username",
      (validate.rules).string = {min_len: 1}
    ];
    string password = 2 [
      json_name = "password",
      (validate.rules).string = {min_len: 1}
    ];
    string captcha_id = 3 [
      json_name = "captcha_id",
      (validate.rules).string = {min_len: 1}
    ];
    string captcha_code = 4 [
      json_name = "captcha_code",
      (validate.rules).string = {min_len: 1}
    ];
  }
  Data data = 2 [json_name = "data"];
}

message RegisterResponse {
  bool success = 1;
  message Data {
    string redirect = 1;
  }
  Data data = 2 [json_name = "data"];
}

message LogoutRequest {
  google.protobuf.Any data = 2 [json_name = "data"];
}

message LogoutResponse {
  bool success = 1;
}
