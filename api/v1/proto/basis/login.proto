syntax = "proto3";

package api.v1.services.basis;

import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "security/jwt/v1/token.proto";
import "validate/validate.proto";

option go_package = "v1/services/basis;basis";
option java_multiple_files = true;
option java_outer_classname = "APIV1ServicesBasisProto";
option java_package = "com.origadmin.api.v1.admin.services.basis";

// The login service definition.
service LoginAPI {
  rpc CaptchaID(CaptchaIDRequest) returns (CaptchaIDResponse) {
    option (google.api.http) = {get: "/captcha/id"};
  }
  rpc CaptchaImage(CaptchaImageRequest) returns (CaptchaImageResponse) {
    option (google.api.http) = {
      get: "/captcha/image"
      response_body: "*"
    };
  }
  rpc CaptchaResource(CaptchaResourceRequest) returns (CaptchaResourceResponse) {
    option (google.api.http) = {
      get: "/captcha/id/{id}/{resource}"
      response_body: "*"
    };
  }
  rpc CaptchaResources(CaptchaResourcesRequest) returns (CaptchaResourcesResponse) {
    option (google.api.http) = {
      get: "/captcha/id/{id}"
      response_body: "*"
    };
  }
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/login"
      body: "data"
    };
  }

  rpc Register(RegisterRequest) returns (RegisterResponse) {
    option (google.api.http) = {
      post: "/register"
      body: "data"
    };
  }

  rpc Refresh(RefreshRequest) returns (RefreshResponse) {
    option (google.api.http) = {
      post: "/refresh_token"
      body: "data"
    };
  }

  rpc Logout(LogoutRequest) returns (LogoutResponse) {
    option (google.api.http) = {
      post: "/current/logout"
      body: "data"
    };
  }
  rpc CurrentUser(CurrentUserRequest) returns (CurrentUserResponse) {
    option (google.api.http) = {
      post: "/current/user"
      body: "data"
    };
  }
  rpc CurrentMenus(CurrentMenusRequest) returns (CurrentMenusResponse) {
    option (google.api.http) = {get: "/current/menus"};
  }
}

message LoginRequest {
  message Data {
    string username = 1 [
      json_name = "username",
      (validate.rules).string = {min_len: 1}
    ];
    string password = 2 [
      json_name = "password",
      (validate.rules).string = {min_len: 1}
    ];
    string captcha_id = 3 [
      json_name = "captcha_id",
      (validate.rules).string = {min_len: 1}
    ];
    string captcha_code = 4 [
      json_name = "captcha_code",
      (validate.rules).string = {min_len: 1}
    ];
  }
  Data data = 2 [json_name = "data"];
}

message LoginResponse {
  security.jwt.v1.Token token = 1;
}

message LogoutRequest {
  google.protobuf.Any data = 2 [json_name = "data"];
}

message LogoutResponse {
  bool success = 1;
}

message CurrentUserRequestQuery {
  string user_id = 1 [json_name = "user_id"];
}

message CurrentUserRequest {
  CurrentUserRequestQuery data = 1 [json_name = "data"];
}

message CurrentUserResponse {
  bool success = 1;
  google.protobuf.Any data = 2 [json_name = "data"];
}

message CaptchaIDRequest {
  // The timestamp of the request prevent caching of the same result
  string ts = 1 [json_name = "ts"];
}

message CaptchaIDResponse {
  string data = 1;
}

// The request message containing the user's name.
message CaptchaImageRequest {
  string id = 1 [json_name = "id"];
  string reload = 2 [json_name = "reload"];
  google.protobuf.Any data = 3 [json_name = "data"];
}

message CaptchaData {
  string captcha_id = 1;
  string captcha_img = 2;
}

// The response message containing the greetings
message CaptchaImageResponse {
  map<string, string> headers = 1;
  bytes image = 2 [json_name = "image"];
}

message CurrentMenusRequest {
  string user_id = 1 [json_name = "user_id"];
  google.protobuf.Any data = 2 [json_name = "data"];
}
message CurrentMenusResponse {
  bool success = 1;
  repeated google.protobuf.Any data = 2 [json_name = "data"];
}

message CaptchaResourcesRequest {
  string id = 1 [json_name = "id"];
}

message CaptchaResourcesResponse {
  enum AudioType {
    WAV = 0;
    MP3 = 1;
  }
  //  message AudioText {
  //    string text = 1;
  //    string lang = 2;
  //  }
  bytes image = 2 [json_name = "image"]; // base64 encoded
  bytes audio = 3 [json_name = "audio"]; // 16k pcm encoded
  AudioType audio_type = 4;
  //  AudioText audio_text = 5;
}

message CaptchaResourceRequest {
  string id = 1 [
    json_name = "id",
    (validate.rules).string = {min_len: 1}
  ];
  string resource = 2 [
    json_name = "resource",
    (validate.rules).string = {
      in: [
        "image",
        "audio"
      ]
    }
  ];
}

message CaptchaResourceResponse {
  map<string, string> headers = 1 [json_name = "headers"];
  bytes data = 2 [json_name = "data"];
}

message RefreshRequest {
  message Data {
    string refresh_token = 1 [
      json_name = "refresh_token",
      (validate.rules).string = {min_len: 1}
    ];
  }
  Data data = 2 [json_name = "data"];
}

message RefreshResponse {
  security.jwt.v1.Token token = 1;
}

message RegisterRequest {
  message Data {
    string username = 1 [
      json_name = "username",
      (validate.rules).string = {min_len: 1}
    ];
    string password = 2 [
      json_name = "password",
      (validate.rules).string = {min_len: 1}
    ];
    string captcha_id = 3 [
      json_name = "captcha_id",
      (validate.rules).string = {min_len: 1}
    ];
    string captcha_code = 4 [
      json_name = "captcha_code",
      (validate.rules).string = {min_len: 1}
    ];
  }
  Data data = 2 [json_name = "data"];
}

message RegisterResponse {
  bool success = 1;
  message Data {
    string redirect = 1;
  }
  Data data = 2 [json_name = "data"];
}
