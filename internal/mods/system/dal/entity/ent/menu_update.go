// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/menu"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/predicate"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/resource"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/role"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/rolemenu"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MenuUpdate is the builder for updating Menu entities.
type MenuUpdate struct {
	config
	hooks     []Hook
	mutation  *MenuMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MenuUpdate builder.
func (mu *MenuUpdate) Where(ps ...predicate.Menu) *MenuUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUpdateTime sets the "update_time" field.
func (mu *MenuUpdate) SetUpdateTime(t time.Time) *MenuUpdate {
	mu.mutation.SetUpdateTime(t)
	return mu
}

// SetKeyword sets the "keyword" field.
func (mu *MenuUpdate) SetKeyword(s string) *MenuUpdate {
	mu.mutation.SetKeyword(s)
	return mu
}

// SetNillableKeyword sets the "keyword" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableKeyword(s *string) *MenuUpdate {
	if s != nil {
		mu.SetKeyword(*s)
	}
	return mu
}

// SetName sets the "name" field.
func (mu *MenuUpdate) SetName(s string) *MenuUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableName(s *string) *MenuUpdate {
	if s != nil {
		mu.SetName(*s)
	}
	return mu
}

// SetDescription sets the "description" field.
func (mu *MenuUpdate) SetDescription(s string) *MenuUpdate {
	mu.mutation.SetDescription(s)
	return mu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableDescription(s *string) *MenuUpdate {
	if s != nil {
		mu.SetDescription(*s)
	}
	return mu
}

// SetType sets the "type" field.
func (mu *MenuUpdate) SetType(u uint8) *MenuUpdate {
	mu.mutation.ResetType()
	mu.mutation.SetType(u)
	return mu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableType(u *uint8) *MenuUpdate {
	if u != nil {
		mu.SetType(*u)
	}
	return mu
}

// AddType adds u to the "type" field.
func (mu *MenuUpdate) AddType(u int8) *MenuUpdate {
	mu.mutation.AddType(u)
	return mu
}

// SetIcon sets the "icon" field.
func (mu *MenuUpdate) SetIcon(s string) *MenuUpdate {
	mu.mutation.SetIcon(s)
	return mu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableIcon(s *string) *MenuUpdate {
	if s != nil {
		mu.SetIcon(*s)
	}
	return mu
}

// SetPath sets the "path" field.
func (mu *MenuUpdate) SetPath(s string) *MenuUpdate {
	mu.mutation.SetPath(s)
	return mu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (mu *MenuUpdate) SetNillablePath(s *string) *MenuUpdate {
	if s != nil {
		mu.SetPath(*s)
	}
	return mu
}

// SetStatus sets the "status" field.
func (mu *MenuUpdate) SetStatus(i int8) *MenuUpdate {
	mu.mutation.ResetStatus()
	mu.mutation.SetStatus(i)
	return mu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableStatus(i *int8) *MenuUpdate {
	if i != nil {
		mu.SetStatus(*i)
	}
	return mu
}

// AddStatus adds i to the "status" field.
func (mu *MenuUpdate) AddStatus(i int8) *MenuUpdate {
	mu.mutation.AddStatus(i)
	return mu
}

// SetParentID sets the "parent_id" field.
func (mu *MenuUpdate) SetParentID(s string) *MenuUpdate {
	mu.mutation.SetParentID(s)
	return mu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableParentID(s *string) *MenuUpdate {
	if s != nil {
		mu.SetParentID(*s)
	}
	return mu
}

// ClearParentID clears the value of the "parent_id" field.
func (mu *MenuUpdate) ClearParentID() *MenuUpdate {
	mu.mutation.ClearParentID()
	return mu
}

// SetParentPath sets the "parent_path" field.
func (mu *MenuUpdate) SetParentPath(s string) *MenuUpdate {
	mu.mutation.SetParentPath(s)
	return mu
}

// SetNillableParentPath sets the "parent_path" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableParentPath(s *string) *MenuUpdate {
	if s != nil {
		mu.SetParentPath(*s)
	}
	return mu
}

// SetSequence sets the "sequence" field.
func (mu *MenuUpdate) SetSequence(i int) *MenuUpdate {
	mu.mutation.ResetSequence()
	mu.mutation.SetSequence(i)
	return mu
}

// SetNillableSequence sets the "sequence" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableSequence(i *int) *MenuUpdate {
	if i != nil {
		mu.SetSequence(*i)
	}
	return mu
}

// AddSequence adds i to the "sequence" field.
func (mu *MenuUpdate) AddSequence(i int) *MenuUpdate {
	mu.mutation.AddSequence(i)
	return mu
}

// SetProperties sets the "properties" field.
func (mu *MenuUpdate) SetProperties(s string) *MenuUpdate {
	mu.mutation.SetProperties(s)
	return mu
}

// SetNillableProperties sets the "properties" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableProperties(s *string) *MenuUpdate {
	if s != nil {
		mu.SetProperties(*s)
	}
	return mu
}

// ClearProperties clears the value of the "properties" field.
func (mu *MenuUpdate) ClearProperties() *MenuUpdate {
	mu.mutation.ClearProperties()
	return mu
}

// AddChildIDs adds the "children" edge to the Menu entity by IDs.
func (mu *MenuUpdate) AddChildIDs(ids ...string) *MenuUpdate {
	mu.mutation.AddChildIDs(ids...)
	return mu
}

// AddChildren adds the "children" edges to the Menu entity.
func (mu *MenuUpdate) AddChildren(m ...*Menu) *MenuUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddChildIDs(ids...)
}

// SetParent sets the "parent" edge to the Menu entity.
func (mu *MenuUpdate) SetParent(m *Menu) *MenuUpdate {
	return mu.SetParentID(m.ID)
}

// AddResourceIDs adds the "resources" edge to the Resource entity by IDs.
func (mu *MenuUpdate) AddResourceIDs(ids ...string) *MenuUpdate {
	mu.mutation.AddResourceIDs(ids...)
	return mu
}

// AddResources adds the "resources" edges to the Resource entity.
func (mu *MenuUpdate) AddResources(r ...*Resource) *MenuUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mu.AddResourceIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (mu *MenuUpdate) AddRoleIDs(ids ...string) *MenuUpdate {
	mu.mutation.AddRoleIDs(ids...)
	return mu
}

// AddRoles adds the "roles" edges to the Role entity.
func (mu *MenuUpdate) AddRoles(r ...*Role) *MenuUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mu.AddRoleIDs(ids...)
}

// AddRoleMenuIDs adds the "role_menus" edge to the RoleMenu entity by IDs.
func (mu *MenuUpdate) AddRoleMenuIDs(ids ...string) *MenuUpdate {
	mu.mutation.AddRoleMenuIDs(ids...)
	return mu
}

// AddRoleMenus adds the "role_menus" edges to the RoleMenu entity.
func (mu *MenuUpdate) AddRoleMenus(r ...*RoleMenu) *MenuUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mu.AddRoleMenuIDs(ids...)
}

// Mutation returns the MenuMutation object of the builder.
func (mu *MenuUpdate) Mutation() *MenuMutation {
	return mu.mutation
}

// ClearChildren clears all "children" edges to the Menu entity.
func (mu *MenuUpdate) ClearChildren() *MenuUpdate {
	mu.mutation.ClearChildren()
	return mu
}

// RemoveChildIDs removes the "children" edge to Menu entities by IDs.
func (mu *MenuUpdate) RemoveChildIDs(ids ...string) *MenuUpdate {
	mu.mutation.RemoveChildIDs(ids...)
	return mu
}

// RemoveChildren removes "children" edges to Menu entities.
func (mu *MenuUpdate) RemoveChildren(m ...*Menu) *MenuUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveChildIDs(ids...)
}

// ClearParent clears the "parent" edge to the Menu entity.
func (mu *MenuUpdate) ClearParent() *MenuUpdate {
	mu.mutation.ClearParent()
	return mu
}

// ClearResources clears all "resources" edges to the Resource entity.
func (mu *MenuUpdate) ClearResources() *MenuUpdate {
	mu.mutation.ClearResources()
	return mu
}

// RemoveResourceIDs removes the "resources" edge to Resource entities by IDs.
func (mu *MenuUpdate) RemoveResourceIDs(ids ...string) *MenuUpdate {
	mu.mutation.RemoveResourceIDs(ids...)
	return mu
}

// RemoveResources removes "resources" edges to Resource entities.
func (mu *MenuUpdate) RemoveResources(r ...*Resource) *MenuUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mu.RemoveResourceIDs(ids...)
}

// ClearRoles clears all "roles" edges to the Role entity.
func (mu *MenuUpdate) ClearRoles() *MenuUpdate {
	mu.mutation.ClearRoles()
	return mu
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (mu *MenuUpdate) RemoveRoleIDs(ids ...string) *MenuUpdate {
	mu.mutation.RemoveRoleIDs(ids...)
	return mu
}

// RemoveRoles removes "roles" edges to Role entities.
func (mu *MenuUpdate) RemoveRoles(r ...*Role) *MenuUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mu.RemoveRoleIDs(ids...)
}

// ClearRoleMenus clears all "role_menus" edges to the RoleMenu entity.
func (mu *MenuUpdate) ClearRoleMenus() *MenuUpdate {
	mu.mutation.ClearRoleMenus()
	return mu
}

// RemoveRoleMenuIDs removes the "role_menus" edge to RoleMenu entities by IDs.
func (mu *MenuUpdate) RemoveRoleMenuIDs(ids ...string) *MenuUpdate {
	mu.mutation.RemoveRoleMenuIDs(ids...)
	return mu
}

// RemoveRoleMenus removes "role_menus" edges to RoleMenu entities.
func (mu *MenuUpdate) RemoveRoleMenus(r ...*RoleMenu) *MenuUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mu.RemoveRoleMenuIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MenuUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MenuUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MenuUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MenuUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MenuUpdate) defaults() {
	if _, ok := mu.mutation.UpdateTime(); !ok {
		v := menu.UpdateDefaultUpdateTime()
		mu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MenuUpdate) check() error {
	if v, ok := mu.mutation.Keyword(); ok {
		if err := menu.KeywordValidator(v); err != nil {
			return &ValidationError{Name: "keyword", err: fmt.Errorf(`ent: validator failed for field "Menu.keyword": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Name(); ok {
		if err := menu.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Menu.name": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Description(); ok {
		if err := menu.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Menu.description": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Icon(); ok {
		if err := menu.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`ent: validator failed for field "Menu.icon": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Path(); ok {
		if err := menu.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Menu.path": %w`, err)}
		}
	}
	if v, ok := mu.mutation.ParentID(); ok {
		if err := menu.ParentIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_id", err: fmt.Errorf(`ent: validator failed for field "Menu.parent_id": %w`, err)}
		}
	}
	if v, ok := mu.mutation.ParentPath(); ok {
		if err := menu.ParentPathValidator(v); err != nil {
			return &ValidationError{Name: "parent_path", err: fmt.Errorf(`ent: validator failed for field "Menu.parent_path": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mu *MenuUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MenuUpdate {
	mu.modifiers = append(mu.modifiers, modifiers...)
	return mu
}

func (mu *MenuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(menu.Table, menu.Columns, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.UpdateTime(); ok {
		_spec.SetField(menu.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := mu.mutation.Keyword(); ok {
		_spec.SetField(menu.FieldKeyword, field.TypeString, value)
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.SetField(menu.FieldName, field.TypeString, value)
	}
	if value, ok := mu.mutation.Description(); ok {
		_spec.SetField(menu.FieldDescription, field.TypeString, value)
	}
	if value, ok := mu.mutation.GetType(); ok {
		_spec.SetField(menu.FieldType, field.TypeUint8, value)
	}
	if value, ok := mu.mutation.AddedType(); ok {
		_spec.AddField(menu.FieldType, field.TypeUint8, value)
	}
	if value, ok := mu.mutation.Icon(); ok {
		_spec.SetField(menu.FieldIcon, field.TypeString, value)
	}
	if value, ok := mu.mutation.Path(); ok {
		_spec.SetField(menu.FieldPath, field.TypeString, value)
	}
	if value, ok := mu.mutation.Status(); ok {
		_spec.SetField(menu.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := mu.mutation.AddedStatus(); ok {
		_spec.AddField(menu.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := mu.mutation.ParentPath(); ok {
		_spec.SetField(menu.FieldParentPath, field.TypeString, value)
	}
	if value, ok := mu.mutation.Sequence(); ok {
		_spec.SetField(menu.FieldSequence, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedSequence(); ok {
		_spec.AddField(menu.FieldSequence, field.TypeInt, value)
	}
	if value, ok := mu.mutation.Properties(); ok {
		_spec.SetField(menu.FieldProperties, field.TypeString, value)
	}
	if mu.mutation.PropertiesCleared() {
		_spec.ClearField(menu.FieldProperties, field.TypeString)
	}
	if mu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !mu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ResourcesTable,
			Columns: []string{menu.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedResourcesIDs(); len(nodes) > 0 && !mu.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ResourcesTable,
			Columns: []string{menu.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ResourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ResourcesTable,
			Columns: []string{menu.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedRolesIDs(); len(nodes) > 0 && !mu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.RoleMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   menu.RoleMenusTable,
			Columns: []string{menu.RoleMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemenu.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedRoleMenusIDs(); len(nodes) > 0 && !mu.mutation.RoleMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   menu.RoleMenusTable,
			Columns: []string{menu.RoleMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemenu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RoleMenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   menu.RoleMenusTable,
			Columns: []string{menu.RoleMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemenu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(mu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MenuUpdateOne is the builder for updating a single Menu entity.
type MenuUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MenuMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (muo *MenuUpdateOne) SetUpdateTime(t time.Time) *MenuUpdateOne {
	muo.mutation.SetUpdateTime(t)
	return muo
}

// SetKeyword sets the "keyword" field.
func (muo *MenuUpdateOne) SetKeyword(s string) *MenuUpdateOne {
	muo.mutation.SetKeyword(s)
	return muo
}

// SetNillableKeyword sets the "keyword" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableKeyword(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetKeyword(*s)
	}
	return muo
}

// SetName sets the "name" field.
func (muo *MenuUpdateOne) SetName(s string) *MenuUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableName(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetName(*s)
	}
	return muo
}

// SetDescription sets the "description" field.
func (muo *MenuUpdateOne) SetDescription(s string) *MenuUpdateOne {
	muo.mutation.SetDescription(s)
	return muo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableDescription(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetDescription(*s)
	}
	return muo
}

// SetType sets the "type" field.
func (muo *MenuUpdateOne) SetType(u uint8) *MenuUpdateOne {
	muo.mutation.ResetType()
	muo.mutation.SetType(u)
	return muo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableType(u *uint8) *MenuUpdateOne {
	if u != nil {
		muo.SetType(*u)
	}
	return muo
}

// AddType adds u to the "type" field.
func (muo *MenuUpdateOne) AddType(u int8) *MenuUpdateOne {
	muo.mutation.AddType(u)
	return muo
}

// SetIcon sets the "icon" field.
func (muo *MenuUpdateOne) SetIcon(s string) *MenuUpdateOne {
	muo.mutation.SetIcon(s)
	return muo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableIcon(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetIcon(*s)
	}
	return muo
}

// SetPath sets the "path" field.
func (muo *MenuUpdateOne) SetPath(s string) *MenuUpdateOne {
	muo.mutation.SetPath(s)
	return muo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillablePath(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetPath(*s)
	}
	return muo
}

// SetStatus sets the "status" field.
func (muo *MenuUpdateOne) SetStatus(i int8) *MenuUpdateOne {
	muo.mutation.ResetStatus()
	muo.mutation.SetStatus(i)
	return muo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableStatus(i *int8) *MenuUpdateOne {
	if i != nil {
		muo.SetStatus(*i)
	}
	return muo
}

// AddStatus adds i to the "status" field.
func (muo *MenuUpdateOne) AddStatus(i int8) *MenuUpdateOne {
	muo.mutation.AddStatus(i)
	return muo
}

// SetParentID sets the "parent_id" field.
func (muo *MenuUpdateOne) SetParentID(s string) *MenuUpdateOne {
	muo.mutation.SetParentID(s)
	return muo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableParentID(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetParentID(*s)
	}
	return muo
}

// ClearParentID clears the value of the "parent_id" field.
func (muo *MenuUpdateOne) ClearParentID() *MenuUpdateOne {
	muo.mutation.ClearParentID()
	return muo
}

// SetParentPath sets the "parent_path" field.
func (muo *MenuUpdateOne) SetParentPath(s string) *MenuUpdateOne {
	muo.mutation.SetParentPath(s)
	return muo
}

// SetNillableParentPath sets the "parent_path" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableParentPath(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetParentPath(*s)
	}
	return muo
}

// SetSequence sets the "sequence" field.
func (muo *MenuUpdateOne) SetSequence(i int) *MenuUpdateOne {
	muo.mutation.ResetSequence()
	muo.mutation.SetSequence(i)
	return muo
}

// SetNillableSequence sets the "sequence" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableSequence(i *int) *MenuUpdateOne {
	if i != nil {
		muo.SetSequence(*i)
	}
	return muo
}

// AddSequence adds i to the "sequence" field.
func (muo *MenuUpdateOne) AddSequence(i int) *MenuUpdateOne {
	muo.mutation.AddSequence(i)
	return muo
}

// SetProperties sets the "properties" field.
func (muo *MenuUpdateOne) SetProperties(s string) *MenuUpdateOne {
	muo.mutation.SetProperties(s)
	return muo
}

// SetNillableProperties sets the "properties" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableProperties(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetProperties(*s)
	}
	return muo
}

// ClearProperties clears the value of the "properties" field.
func (muo *MenuUpdateOne) ClearProperties() *MenuUpdateOne {
	muo.mutation.ClearProperties()
	return muo
}

// AddChildIDs adds the "children" edge to the Menu entity by IDs.
func (muo *MenuUpdateOne) AddChildIDs(ids ...string) *MenuUpdateOne {
	muo.mutation.AddChildIDs(ids...)
	return muo
}

// AddChildren adds the "children" edges to the Menu entity.
func (muo *MenuUpdateOne) AddChildren(m ...*Menu) *MenuUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddChildIDs(ids...)
}

// SetParent sets the "parent" edge to the Menu entity.
func (muo *MenuUpdateOne) SetParent(m *Menu) *MenuUpdateOne {
	return muo.SetParentID(m.ID)
}

// AddResourceIDs adds the "resources" edge to the Resource entity by IDs.
func (muo *MenuUpdateOne) AddResourceIDs(ids ...string) *MenuUpdateOne {
	muo.mutation.AddResourceIDs(ids...)
	return muo
}

// AddResources adds the "resources" edges to the Resource entity.
func (muo *MenuUpdateOne) AddResources(r ...*Resource) *MenuUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return muo.AddResourceIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (muo *MenuUpdateOne) AddRoleIDs(ids ...string) *MenuUpdateOne {
	muo.mutation.AddRoleIDs(ids...)
	return muo
}

// AddRoles adds the "roles" edges to the Role entity.
func (muo *MenuUpdateOne) AddRoles(r ...*Role) *MenuUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return muo.AddRoleIDs(ids...)
}

// AddRoleMenuIDs adds the "role_menus" edge to the RoleMenu entity by IDs.
func (muo *MenuUpdateOne) AddRoleMenuIDs(ids ...string) *MenuUpdateOne {
	muo.mutation.AddRoleMenuIDs(ids...)
	return muo
}

// AddRoleMenus adds the "role_menus" edges to the RoleMenu entity.
func (muo *MenuUpdateOne) AddRoleMenus(r ...*RoleMenu) *MenuUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return muo.AddRoleMenuIDs(ids...)
}

// Mutation returns the MenuMutation object of the builder.
func (muo *MenuUpdateOne) Mutation() *MenuMutation {
	return muo.mutation
}

// ClearChildren clears all "children" edges to the Menu entity.
func (muo *MenuUpdateOne) ClearChildren() *MenuUpdateOne {
	muo.mutation.ClearChildren()
	return muo
}

// RemoveChildIDs removes the "children" edge to Menu entities by IDs.
func (muo *MenuUpdateOne) RemoveChildIDs(ids ...string) *MenuUpdateOne {
	muo.mutation.RemoveChildIDs(ids...)
	return muo
}

// RemoveChildren removes "children" edges to Menu entities.
func (muo *MenuUpdateOne) RemoveChildren(m ...*Menu) *MenuUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveChildIDs(ids...)
}

// ClearParent clears the "parent" edge to the Menu entity.
func (muo *MenuUpdateOne) ClearParent() *MenuUpdateOne {
	muo.mutation.ClearParent()
	return muo
}

// ClearResources clears all "resources" edges to the Resource entity.
func (muo *MenuUpdateOne) ClearResources() *MenuUpdateOne {
	muo.mutation.ClearResources()
	return muo
}

// RemoveResourceIDs removes the "resources" edge to Resource entities by IDs.
func (muo *MenuUpdateOne) RemoveResourceIDs(ids ...string) *MenuUpdateOne {
	muo.mutation.RemoveResourceIDs(ids...)
	return muo
}

// RemoveResources removes "resources" edges to Resource entities.
func (muo *MenuUpdateOne) RemoveResources(r ...*Resource) *MenuUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return muo.RemoveResourceIDs(ids...)
}

// ClearRoles clears all "roles" edges to the Role entity.
func (muo *MenuUpdateOne) ClearRoles() *MenuUpdateOne {
	muo.mutation.ClearRoles()
	return muo
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (muo *MenuUpdateOne) RemoveRoleIDs(ids ...string) *MenuUpdateOne {
	muo.mutation.RemoveRoleIDs(ids...)
	return muo
}

// RemoveRoles removes "roles" edges to Role entities.
func (muo *MenuUpdateOne) RemoveRoles(r ...*Role) *MenuUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return muo.RemoveRoleIDs(ids...)
}

// ClearRoleMenus clears all "role_menus" edges to the RoleMenu entity.
func (muo *MenuUpdateOne) ClearRoleMenus() *MenuUpdateOne {
	muo.mutation.ClearRoleMenus()
	return muo
}

// RemoveRoleMenuIDs removes the "role_menus" edge to RoleMenu entities by IDs.
func (muo *MenuUpdateOne) RemoveRoleMenuIDs(ids ...string) *MenuUpdateOne {
	muo.mutation.RemoveRoleMenuIDs(ids...)
	return muo
}

// RemoveRoleMenus removes "role_menus" edges to RoleMenu entities.
func (muo *MenuUpdateOne) RemoveRoleMenus(r ...*RoleMenu) *MenuUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return muo.RemoveRoleMenuIDs(ids...)
}

// Where appends a list predicates to the MenuUpdate builder.
func (muo *MenuUpdateOne) Where(ps ...predicate.Menu) *MenuUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MenuUpdateOne) Select(field string, fields ...string) *MenuUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Menu entity.
func (muo *MenuUpdateOne) Save(ctx context.Context) (*Menu, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MenuUpdateOne) SaveX(ctx context.Context) *Menu {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MenuUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MenuUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MenuUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdateTime(); !ok {
		v := menu.UpdateDefaultUpdateTime()
		muo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MenuUpdateOne) check() error {
	if v, ok := muo.mutation.Keyword(); ok {
		if err := menu.KeywordValidator(v); err != nil {
			return &ValidationError{Name: "keyword", err: fmt.Errorf(`ent: validator failed for field "Menu.keyword": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Name(); ok {
		if err := menu.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Menu.name": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Description(); ok {
		if err := menu.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Menu.description": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Icon(); ok {
		if err := menu.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`ent: validator failed for field "Menu.icon": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Path(); ok {
		if err := menu.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Menu.path": %w`, err)}
		}
	}
	if v, ok := muo.mutation.ParentID(); ok {
		if err := menu.ParentIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_id", err: fmt.Errorf(`ent: validator failed for field "Menu.parent_id": %w`, err)}
		}
	}
	if v, ok := muo.mutation.ParentPath(); ok {
		if err := menu.ParentPathValidator(v); err != nil {
			return &ValidationError{Name: "parent_path", err: fmt.Errorf(`ent: validator failed for field "Menu.parent_path": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (muo *MenuUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MenuUpdateOne {
	muo.modifiers = append(muo.modifiers, modifiers...)
	return muo
}

func (muo *MenuUpdateOne) sqlSave(ctx context.Context) (_node *Menu, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(menu.Table, menu.Columns, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Menu.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, menu.FieldID)
		for _, f := range fields {
			if !menu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != menu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.UpdateTime(); ok {
		_spec.SetField(menu.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := muo.mutation.Keyword(); ok {
		_spec.SetField(menu.FieldKeyword, field.TypeString, value)
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.SetField(menu.FieldName, field.TypeString, value)
	}
	if value, ok := muo.mutation.Description(); ok {
		_spec.SetField(menu.FieldDescription, field.TypeString, value)
	}
	if value, ok := muo.mutation.GetType(); ok {
		_spec.SetField(menu.FieldType, field.TypeUint8, value)
	}
	if value, ok := muo.mutation.AddedType(); ok {
		_spec.AddField(menu.FieldType, field.TypeUint8, value)
	}
	if value, ok := muo.mutation.Icon(); ok {
		_spec.SetField(menu.FieldIcon, field.TypeString, value)
	}
	if value, ok := muo.mutation.Path(); ok {
		_spec.SetField(menu.FieldPath, field.TypeString, value)
	}
	if value, ok := muo.mutation.Status(); ok {
		_spec.SetField(menu.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := muo.mutation.AddedStatus(); ok {
		_spec.AddField(menu.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := muo.mutation.ParentPath(); ok {
		_spec.SetField(menu.FieldParentPath, field.TypeString, value)
	}
	if value, ok := muo.mutation.Sequence(); ok {
		_spec.SetField(menu.FieldSequence, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedSequence(); ok {
		_spec.AddField(menu.FieldSequence, field.TypeInt, value)
	}
	if value, ok := muo.mutation.Properties(); ok {
		_spec.SetField(menu.FieldProperties, field.TypeString, value)
	}
	if muo.mutation.PropertiesCleared() {
		_spec.ClearField(menu.FieldProperties, field.TypeString)
	}
	if muo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !muo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ResourcesTable,
			Columns: []string{menu.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedResourcesIDs(); len(nodes) > 0 && !muo.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ResourcesTable,
			Columns: []string{menu.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ResourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ResourcesTable,
			Columns: []string{menu.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !muo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.RoleMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   menu.RoleMenusTable,
			Columns: []string{menu.RoleMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemenu.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedRoleMenusIDs(); len(nodes) > 0 && !muo.mutation.RoleMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   menu.RoleMenusTable,
			Columns: []string{menu.RoleMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemenu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RoleMenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   menu.RoleMenusTable,
			Columns: []string{menu.RoleMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemenu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(muo.modifiers...)
	_node = &Menu{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}

// SetMenu set the Menu
func (mu *MenuUpdate) SetMenu(input *Menu, fields ...string) *MenuUpdate {
	m := mu.mutation
	if len(fields) == 0 {
		fields = menu.OmitColumns(menu.FieldID)
	}
	_ = m.SetFields(input, fields...)
	return mu
}

// SetMenuWithZero set the Menu
func (mu *MenuUpdate) SetMenuWithZero(input *Menu, fields ...string) *MenuUpdate {
	m := mu.mutation
	if len(fields) == 0 {
		fields = menu.Columns
	}
	_ = m.SetFieldsWithZero(input, fields...)
	return mu
}

// SetMenu set the Menu
func (muo *MenuUpdateOne) SetMenu(input *Menu, fields ...string) *MenuUpdateOne {
	m := muo.mutation
	if len(fields) == 0 {
		fields = menu.OmitColumns(menu.FieldID)
	}
	_ = m.SetFields(input, fields...)
	return muo
}

// SetMenuWithZero set the Menu
func (muo *MenuUpdateOne) SetMenuWithZero(input *Menu, fields ...string) *MenuUpdateOne {
	m := muo.mutation
	if len(fields) == 0 {
		fields = menu.Columns
	}
	_ = m.SetFieldsWithZero(input, fields...)
	return muo
}

// Omit allows the unselect one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (muo *MenuUpdateOne) Omit(fields ...string) *MenuUpdateOne {
	omits := make(map[string]struct{}, len(fields))
	for i := range fields {
		omits[fields[i]] = struct{}{}
	}
	muo.fields = []string(nil)
	for _, col := range menu.Columns {
		if _, ok := omits[col]; !ok {
			muo.fields = append(muo.fields, col)
		}
	}
	return muo
}
