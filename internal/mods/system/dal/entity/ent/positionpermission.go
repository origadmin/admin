// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/permission"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/position"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/positionpermission"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// position_permission.table.comment
type PositionPermission struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// position_permission.field.position_id
	PositionID int64 `json:"position_id,omitempty"`
	// position_permission.field.permission_id
	PermissionID int64 `json:"permission_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PositionPermissionQuery when eager-loading is set.
	Edges        PositionPermissionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PositionPermissionEdges holds the relations/edges for other nodes in the graph.
type PositionPermissionEdges struct {
	// Position holds the value of the position edge.
	Position *Position `json:"position,omitempty"`
	// Permission holds the value of the permission edge.
	Permission *Permission `json:"permission,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PositionOrErr returns the Position value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PositionPermissionEdges) PositionOrErr() (*Position, error) {
	if e.Position != nil {
		return e.Position, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: position.Label}
	}
	return nil, &NotLoadedError{edge: "position"}
}

// PermissionOrErr returns the Permission value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PositionPermissionEdges) PermissionOrErr() (*Permission, error) {
	if e.Permission != nil {
		return e.Permission, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: permission.Label}
	}
	return nil, &NotLoadedError{edge: "permission"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PositionPermission) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case positionpermission.FieldID, positionpermission.FieldPositionID, positionpermission.FieldPermissionID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PositionPermission fields.
func (pp *PositionPermission) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case positionpermission.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pp.ID = int(value.Int64)
		case positionpermission.FieldPositionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field position_id", values[i])
			} else if value.Valid {
				pp.PositionID = value.Int64
			}
		case positionpermission.FieldPermissionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field permission_id", values[i])
			} else if value.Valid {
				pp.PermissionID = value.Int64
			}
		default:
			pp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PositionPermission.
// This includes values selected through modifiers, order, etc.
func (pp *PositionPermission) Value(name string) (ent.Value, error) {
	return pp.selectValues.Get(name)
}

// QueryPosition queries the "position" edge of the PositionPermission entity.
func (pp *PositionPermission) QueryPosition() *PositionQuery {
	return NewPositionPermissionClient(pp.config).QueryPosition(pp)
}

// QueryPermission queries the "permission" edge of the PositionPermission entity.
func (pp *PositionPermission) QueryPermission() *PermissionQuery {
	return NewPositionPermissionClient(pp.config).QueryPermission(pp)
}

// Update returns a builder for updating this PositionPermission.
// Note that you need to call PositionPermission.Unwrap() before calling this method if this PositionPermission
// was returned from a transaction, and the transaction was committed or rolled back.
func (pp *PositionPermission) Update() *PositionPermissionUpdateOne {
	return NewPositionPermissionClient(pp.config).UpdateOne(pp)
}

// Unwrap unwraps the PositionPermission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pp *PositionPermission) Unwrap() *PositionPermission {
	_tx, ok := pp.config.driver.(*txDriver)
	if !ok {
		panic("ent: PositionPermission is not a transactional entity")
	}
	pp.config.driver = _tx.drv
	return pp
}

// String implements the fmt.Stringer.
func (pp *PositionPermission) String() string {
	var builder strings.Builder
	builder.WriteString("PositionPermission(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pp.ID))
	builder.WriteString("position_id=")
	builder.WriteString(fmt.Sprintf("%v", pp.PositionID))
	builder.WriteString(", ")
	builder.WriteString("permission_id=")
	builder.WriteString(fmt.Sprintf("%v", pp.PermissionID))
	builder.WriteByte(')')
	return builder.String()
}

// PositionPermissions is a parsable slice of PositionPermission.
type PositionPermissions []*PositionPermission
