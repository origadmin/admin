// Code generated by ent, DO NOT EDIT.

package permission

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the permission type in the database.
	Label = "permission"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldKeyword holds the string denoting the keyword field in the database.
	FieldKeyword = "keyword"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldDataScope holds the string denoting the data_scope field in the database.
	FieldDataScope = "data_scope"
	// FieldDataRules holds the string denoting the data_rules field in the database.
	FieldDataRules = "data_rules"
	// FieldConditions holds the string denoting the conditions field in the database.
	FieldConditions = "conditions"
	// FieldAccessControl holds the string denoting the access_control field in the database.
	FieldAccessControl = "access_control"
	// FieldActions holds the string denoting the actions field in the database.
	FieldActions = "actions"
	// EdgeRoles holds the string denoting the roles edge name in mutations.
	EdgeRoles = "roles"
	// EdgePositions holds the string denoting the positions edge name in mutations.
	EdgePositions = "positions"
	// EdgeResources holds the string denoting the resources edge name in mutations.
	EdgeResources = "resources"
	// EdgeRolePermissions holds the string denoting the role_permissions edge name in mutations.
	EdgeRolePermissions = "role_permissions"
	// EdgePositionPermissions holds the string denoting the position_permissions edge name in mutations.
	EdgePositionPermissions = "position_permissions"
	// EdgePermissionResources holds the string denoting the permission_resources edge name in mutations.
	EdgePermissionResources = "permission_resources"
	// Table holds the table name of the permission in the database.
	Table = "sys_permissions"
	// RolesTable is the table that holds the roles relation/edge. The primary key declared below.
	RolesTable = "sys_role_permissions"
	// RolesInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RolesInverseTable = "sys_roles"
	// PositionsTable is the table that holds the positions relation/edge. The primary key declared below.
	PositionsTable = "sys_position_permissions"
	// PositionsInverseTable is the table name for the Position entity.
	// It exists in this package in order to avoid circular dependency with the "position" package.
	PositionsInverseTable = "sys_positions"
	// ResourcesTable is the table that holds the resources relation/edge. The primary key declared below.
	ResourcesTable = "sys_permission_resources"
	// ResourcesInverseTable is the table name for the Resource entity.
	// It exists in this package in order to avoid circular dependency with the "resource" package.
	ResourcesInverseTable = "sys_resources"
	// RolePermissionsTable is the table that holds the role_permissions relation/edge.
	RolePermissionsTable = "sys_role_permissions"
	// RolePermissionsInverseTable is the table name for the RolePermission entity.
	// It exists in this package in order to avoid circular dependency with the "rolepermission" package.
	RolePermissionsInverseTable = "sys_role_permissions"
	// RolePermissionsColumn is the table column denoting the role_permissions relation/edge.
	RolePermissionsColumn = "permission_id"
	// PositionPermissionsTable is the table that holds the position_permissions relation/edge.
	PositionPermissionsTable = "sys_position_permissions"
	// PositionPermissionsInverseTable is the table name for the PositionPermission entity.
	// It exists in this package in order to avoid circular dependency with the "positionpermission" package.
	PositionPermissionsInverseTable = "sys_position_permissions"
	// PositionPermissionsColumn is the table column denoting the position_permissions relation/edge.
	PositionPermissionsColumn = "permission_id"
	// PermissionResourcesTable is the table that holds the permission_resources relation/edge.
	PermissionResourcesTable = "sys_permission_resources"
	// PermissionResourcesInverseTable is the table name for the PermissionResource entity.
	// It exists in this package in order to avoid circular dependency with the "permissionresource" package.
	PermissionResourcesInverseTable = "sys_permission_resources"
	// PermissionResourcesColumn is the table column denoting the permission_resources relation/edge.
	PermissionResourcesColumn = "permission_id"
)

// Columns holds all SQL columns for permission fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldName,
	FieldKeyword,
	FieldDescription,
	FieldDataScope,
	FieldDataRules,
	FieldConditions,
	FieldAccessControl,
	FieldActions,
}

var (
	// RolesPrimaryKey and RolesColumn2 are the table columns denoting the
	// primary key for the roles relation (M2M).
	RolesPrimaryKey = []string{"role_id", "permission_id"}
	// PositionsPrimaryKey and PositionsColumn2 are the table columns denoting the
	// primary key for the positions relation (M2M).
	PositionsPrimaryKey = []string{"position_id", "permission_id"}
	// ResourcesPrimaryKey and ResourcesColumn2 are the table columns denoting the
	// primary key for the resources relation (M2M).
	ResourcesPrimaryKey = []string{"permission_id", "resource_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// KeywordValidator is a validator for the "keyword" field. It is called by the builders before save.
	KeywordValidator func(string) error
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultDataScope holds the default value on creation for the "data_scope" field.
	DefaultDataScope string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int64) error
)

// Actions defines the type for the "actions" enum field.
type Actions string

// ActionsRead is the default value of the Actions enum.
const DefaultActions = ActionsRead

// Actions values.
const (
	ActionsRead   Actions = "read"
	ActionsWrite  Actions = "write"
	ActionsDelete Actions = "delete"
	ActionsManage Actions = "manage"
)

func (a Actions) String() string {
	return string(a)
}

// ActionsValidator is a validator for the "actions" field enum values. It is called by the builders before save.
func ActionsValidator(a Actions) error {
	switch a {
	case ActionsRead, ActionsWrite, ActionsDelete, ActionsManage:
		return nil
	default:
		return fmt.Errorf("permission: invalid enum value for actions field: %q", a)
	}
}

// OrderOption defines the ordering options for the Permission queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByKeyword orders the results by the keyword field.
func ByKeyword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKeyword, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByDataScope orders the results by the data_scope field.
func ByDataScope(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDataScope, opts...).ToFunc()
}

// ByActions orders the results by the actions field.
func ByActions(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActions, opts...).ToFunc()
}

// ByRolesCount orders the results by roles count.
func ByRolesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRolesStep(), opts...)
	}
}

// ByRoles orders the results by roles terms.
func ByRoles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRolesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPositionsCount orders the results by positions count.
func ByPositionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPositionsStep(), opts...)
	}
}

// ByPositions orders the results by positions terms.
func ByPositions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPositionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByResourcesCount orders the results by resources count.
func ByResourcesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newResourcesStep(), opts...)
	}
}

// ByResources orders the results by resources terms.
func ByResources(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResourcesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRolePermissionsCount orders the results by role_permissions count.
func ByRolePermissionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRolePermissionsStep(), opts...)
	}
}

// ByRolePermissions orders the results by role_permissions terms.
func ByRolePermissions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRolePermissionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPositionPermissionsCount orders the results by position_permissions count.
func ByPositionPermissionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPositionPermissionsStep(), opts...)
	}
}

// ByPositionPermissions orders the results by position_permissions terms.
func ByPositionPermissions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPositionPermissionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPermissionResourcesCount orders the results by permission_resources count.
func ByPermissionResourcesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPermissionResourcesStep(), opts...)
	}
}

// ByPermissionResources orders the results by permission_resources terms.
func ByPermissionResources(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPermissionResourcesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRolesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RolesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, RolesTable, RolesPrimaryKey...),
	)
}
func newPositionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PositionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, PositionsTable, PositionsPrimaryKey...),
	)
}
func newResourcesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResourcesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ResourcesTable, ResourcesPrimaryKey...),
	)
}
func newRolePermissionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RolePermissionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, RolePermissionsTable, RolePermissionsColumn),
	)
}
func newPositionPermissionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PositionPermissionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PositionPermissionsTable, PositionPermissionsColumn),
	)
}
func newPermissionResourcesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PermissionResourcesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PermissionResourcesTable, PermissionResourcesColumn),
	)
}

// SelectColumns returns all selected fields.
func SelectColumns(fields []string) []string {
	// Default removal FieldID
	filteredFields := make([]string, 0, len(fields))
	for _, field := range fields {
		if field != FieldID {
			filteredFields = append(filteredFields, field)
		}
	}
	return filteredFields
}

// OmitColumns returns all fields that are not in the list of fields.
func OmitColumns(fields ...string) []string {
	// Default removal FieldID
	return omitColumns(Columns, fields, true)
}

// OmitCustomColumns returns all fields that are not in the list of fields.
func OmitCustomColumns(src []string, fields ...string) []string {
	if len(src) == 0 {
		src = Columns
	}
	// Default removal FieldID
	return omitColumns(src, fields, true)
}

// OmitColumnsWithID returns all fields that are not in the list of fields.
func OmitColumnsWithID(fields ...string) []string {
	// Not remove FieldID
	return omitColumns(Columns, fields, false)
}

// OmitCustomColumns returns all fields that are not in the list of fields.
func OmitCustomColumnsWithID(src []string, fields ...string) []string {
	if len(src) == 0 {
		src = Columns
	}
	// Not remove FieldID
	return omitColumns(src, fields, false)
}

func omitColumns(src []string, fields []string, omitID bool) []string {
	// Default removal FieldID
	filteredFields := make([]string, 0, len(src))
	for _, field := range src {
		if !(omitID && field == FieldID) && !contains(fields, field) {
			filteredFields = append(filteredFields, field)
		}
	}
	return filteredFields
}

func contains(slice []string, item string) bool {
	for _, s := range slice {
		if s == item {
			return true
		}
	}
	return false
}
