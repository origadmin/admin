// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/department"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/departmentrole"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/role"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DepartmentRoleCreate is the builder for creating a DepartmentRole entity.
type DepartmentRoleCreate struct {
	config
	mutation *DepartmentRoleMutation
	hooks    []Hook
}

// SetDepartmentID sets the "department_id" field.
func (drc *DepartmentRoleCreate) SetDepartmentID(s string) *DepartmentRoleCreate {
	drc.mutation.SetDepartmentID(s)
	return drc
}

// SetRoleID sets the "role_id" field.
func (drc *DepartmentRoleCreate) SetRoleID(s string) *DepartmentRoleCreate {
	drc.mutation.SetRoleID(s)
	return drc
}

// SetID sets the "id" field.
func (drc *DepartmentRoleCreate) SetID(i int) *DepartmentRoleCreate {
	drc.mutation.SetID(i)
	return drc
}

// SetDepartment sets the "department" edge to the Department entity.
func (drc *DepartmentRoleCreate) SetDepartment(d *Department) *DepartmentRoleCreate {
	return drc.SetDepartmentID(d.ID)
}

// SetRole sets the "role" edge to the Role entity.
func (drc *DepartmentRoleCreate) SetRole(r *Role) *DepartmentRoleCreate {
	return drc.SetRoleID(r.ID)
}

// Mutation returns the DepartmentRoleMutation object of the builder.
func (drc *DepartmentRoleCreate) Mutation() *DepartmentRoleMutation {
	return drc.mutation
}

// Save creates the DepartmentRole in the database.
func (drc *DepartmentRoleCreate) Save(ctx context.Context) (*DepartmentRole, error) {
	return withHooks(ctx, drc.sqlSave, drc.mutation, drc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (drc *DepartmentRoleCreate) SaveX(ctx context.Context) *DepartmentRole {
	v, err := drc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drc *DepartmentRoleCreate) Exec(ctx context.Context) error {
	_, err := drc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drc *DepartmentRoleCreate) ExecX(ctx context.Context) {
	if err := drc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (drc *DepartmentRoleCreate) check() error {
	if _, ok := drc.mutation.DepartmentID(); !ok {
		return &ValidationError{Name: "department_id", err: errors.New(`ent: missing required field "DepartmentRole.department_id"`)}
	}
	if v, ok := drc.mutation.DepartmentID(); ok {
		if err := departmentrole.DepartmentIDValidator(v); err != nil {
			return &ValidationError{Name: "department_id", err: fmt.Errorf(`ent: validator failed for field "DepartmentRole.department_id": %w`, err)}
		}
	}
	if _, ok := drc.mutation.RoleID(); !ok {
		return &ValidationError{Name: "role_id", err: errors.New(`ent: missing required field "DepartmentRole.role_id"`)}
	}
	if v, ok := drc.mutation.RoleID(); ok {
		if err := departmentrole.RoleIDValidator(v); err != nil {
			return &ValidationError{Name: "role_id", err: fmt.Errorf(`ent: validator failed for field "DepartmentRole.role_id": %w`, err)}
		}
	}
	if v, ok := drc.mutation.ID(); ok {
		if err := departmentrole.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "DepartmentRole.id": %w`, err)}
		}
	}
	if len(drc.mutation.DepartmentIDs()) == 0 {
		return &ValidationError{Name: "department", err: errors.New(`ent: missing required edge "DepartmentRole.department"`)}
	}
	if len(drc.mutation.RoleIDs()) == 0 {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required edge "DepartmentRole.role"`)}
	}
	return nil
}

func (drc *DepartmentRoleCreate) sqlSave(ctx context.Context) (*DepartmentRole, error) {
	if err := drc.check(); err != nil {
		return nil, err
	}
	_node, _spec := drc.createSpec()
	if err := sqlgraph.CreateNode(ctx, drc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	drc.mutation.id = &_node.ID
	drc.mutation.done = true
	return _node, nil
}

func (drc *DepartmentRoleCreate) createSpec() (*DepartmentRole, *sqlgraph.CreateSpec) {
	var (
		_node = &DepartmentRole{config: drc.config}
		_spec = sqlgraph.NewCreateSpec(departmentrole.Table, sqlgraph.NewFieldSpec(departmentrole.FieldID, field.TypeInt))
	)
	if id, ok := drc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if nodes := drc.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   departmentrole.DepartmentTable,
			Columns: []string{departmentrole.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DepartmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := drc.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   departmentrole.RoleTable,
			Columns: []string{departmentrole.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SetDepartmentRole set the DepartmentRole
func (drc *DepartmentRoleCreate) SetDepartmentRole(input *DepartmentRole, fields ...string) *DepartmentRoleCreate {
	m := drc.mutation
	if len(fields) == 0 {
		fields = departmentrole.Columns
	}
	_ = m.SetFields(input, fields...)
	return drc
}

// SetDepartmentRoleWithZero set the DepartmentRole
func (drc *DepartmentRoleCreate) SetDepartmentRoleWithZero(input *DepartmentRole, fields ...string) *DepartmentRoleCreate {
	m := drc.mutation
	if len(fields) == 0 {
		fields = departmentrole.Columns
	}
	_ = m.SetFieldsWithZero(input, fields...)
	return drc
}

// DepartmentRoleCreateBulk is the builder for creating many DepartmentRole entities in bulk.
type DepartmentRoleCreateBulk struct {
	config
	err      error
	builders []*DepartmentRoleCreate
}

// Save creates the DepartmentRole entities in the database.
func (drcb *DepartmentRoleCreateBulk) Save(ctx context.Context) ([]*DepartmentRole, error) {
	if drcb.err != nil {
		return nil, drcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(drcb.builders))
	nodes := make([]*DepartmentRole, len(drcb.builders))
	mutators := make([]Mutator, len(drcb.builders))
	for i := range drcb.builders {
		func(i int, root context.Context) {
			builder := drcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DepartmentRoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, drcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, drcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, drcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (drcb *DepartmentRoleCreateBulk) SaveX(ctx context.Context) []*DepartmentRole {
	v, err := drcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drcb *DepartmentRoleCreateBulk) Exec(ctx context.Context) error {
	_, err := drcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drcb *DepartmentRoleCreateBulk) ExecX(ctx context.Context) {
	if err := drcb.Exec(ctx); err != nil {
		panic(err)
	}
}
