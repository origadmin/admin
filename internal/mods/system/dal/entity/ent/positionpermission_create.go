// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/permission"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/position"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/positionpermission"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PositionPermissionCreate is the builder for creating a PositionPermission entity.
type PositionPermissionCreate struct {
	config
	mutation *PositionPermissionMutation
	hooks    []Hook
}

// SetPositionID sets the "position_id" field.
func (ppc *PositionPermissionCreate) SetPositionID(i int64) *PositionPermissionCreate {
	ppc.mutation.SetPositionID(i)
	return ppc
}

// SetPermissionID sets the "permission_id" field.
func (ppc *PositionPermissionCreate) SetPermissionID(i int64) *PositionPermissionCreate {
	ppc.mutation.SetPermissionID(i)
	return ppc
}

// SetPosition sets the "position" edge to the Position entity.
func (ppc *PositionPermissionCreate) SetPosition(p *Position) *PositionPermissionCreate {
	return ppc.SetPositionID(p.ID)
}

// SetPermission sets the "permission" edge to the Permission entity.
func (ppc *PositionPermissionCreate) SetPermission(p *Permission) *PositionPermissionCreate {
	return ppc.SetPermissionID(p.ID)
}

// Mutation returns the PositionPermissionMutation object of the builder.
func (ppc *PositionPermissionCreate) Mutation() *PositionPermissionMutation {
	return ppc.mutation
}

// Save creates the PositionPermission in the database.
func (ppc *PositionPermissionCreate) Save(ctx context.Context) (*PositionPermission, error) {
	return withHooks(ctx, ppc.sqlSave, ppc.mutation, ppc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ppc *PositionPermissionCreate) SaveX(ctx context.Context) *PositionPermission {
	v, err := ppc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ppc *PositionPermissionCreate) Exec(ctx context.Context) error {
	_, err := ppc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppc *PositionPermissionCreate) ExecX(ctx context.Context) {
	if err := ppc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ppc *PositionPermissionCreate) check() error {
	if _, ok := ppc.mutation.PositionID(); !ok {
		return &ValidationError{Name: "position_id", err: errors.New(`ent: missing required field "PositionPermission.position_id"`)}
	}
	if v, ok := ppc.mutation.PositionID(); ok {
		if err := positionpermission.PositionIDValidator(v); err != nil {
			return &ValidationError{Name: "position_id", err: fmt.Errorf(`ent: validator failed for field "PositionPermission.position_id": %w`, err)}
		}
	}
	if _, ok := ppc.mutation.PermissionID(); !ok {
		return &ValidationError{Name: "permission_id", err: errors.New(`ent: missing required field "PositionPermission.permission_id"`)}
	}
	if v, ok := ppc.mutation.PermissionID(); ok {
		if err := positionpermission.PermissionIDValidator(v); err != nil {
			return &ValidationError{Name: "permission_id", err: fmt.Errorf(`ent: validator failed for field "PositionPermission.permission_id": %w`, err)}
		}
	}
	if len(ppc.mutation.PositionIDs()) == 0 {
		return &ValidationError{Name: "position", err: errors.New(`ent: missing required edge "PositionPermission.position"`)}
	}
	if len(ppc.mutation.PermissionIDs()) == 0 {
		return &ValidationError{Name: "permission", err: errors.New(`ent: missing required edge "PositionPermission.permission"`)}
	}
	return nil
}

func (ppc *PositionPermissionCreate) sqlSave(ctx context.Context) (*PositionPermission, error) {
	if err := ppc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ppc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ppc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ppc.mutation.id = &_node.ID
	ppc.mutation.done = true
	return _node, nil
}

func (ppc *PositionPermissionCreate) createSpec() (*PositionPermission, *sqlgraph.CreateSpec) {
	var (
		_node = &PositionPermission{config: ppc.config}
		_spec = sqlgraph.NewCreateSpec(positionpermission.Table, sqlgraph.NewFieldSpec(positionpermission.FieldID, field.TypeInt))
	)
	if nodes := ppc.mutation.PositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   positionpermission.PositionTable,
			Columns: []string{positionpermission.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PositionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ppc.mutation.PermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   positionpermission.PermissionTable,
			Columns: []string{positionpermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PermissionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SetPositionPermission set the PositionPermission
func (ppc *PositionPermissionCreate) SetPositionPermission(input *PositionPermission, fields ...string) *PositionPermissionCreate {
	m := ppc.mutation
	if len(fields) == 0 {
		fields = positionpermission.Columns
	}
	_ = m.SetFields(input, fields...)
	return ppc
}

// SetPositionPermissionWithZero set the PositionPermission
func (ppc *PositionPermissionCreate) SetPositionPermissionWithZero(input *PositionPermission, fields ...string) *PositionPermissionCreate {
	m := ppc.mutation
	if len(fields) == 0 {
		fields = positionpermission.Columns
	}
	_ = m.SetFieldsWithZero(input, fields...)
	return ppc
}

// PositionPermissionCreateBulk is the builder for creating many PositionPermission entities in bulk.
type PositionPermissionCreateBulk struct {
	config
	err      error
	builders []*PositionPermissionCreate
}

// Save creates the PositionPermission entities in the database.
func (ppcb *PositionPermissionCreateBulk) Save(ctx context.Context) ([]*PositionPermission, error) {
	if ppcb.err != nil {
		return nil, ppcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ppcb.builders))
	nodes := make([]*PositionPermission, len(ppcb.builders))
	mutators := make([]Mutator, len(ppcb.builders))
	for i := range ppcb.builders {
		func(i int, root context.Context) {
			builder := ppcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PositionPermissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ppcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ppcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ppcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ppcb *PositionPermissionCreateBulk) SaveX(ctx context.Context) []*PositionPermission {
	v, err := ppcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ppcb *PositionPermissionCreateBulk) Exec(ctx context.Context) error {
	_, err := ppcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppcb *PositionPermissionCreateBulk) ExecX(ctx context.Context) {
	if err := ppcb.Exec(ctx); err != nil {
		panic(err)
	}
}
