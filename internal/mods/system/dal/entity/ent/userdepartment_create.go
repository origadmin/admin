// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/department"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/user"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/userdepartment"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserDepartmentCreate is the builder for creating a UserDepartment entity.
type UserDepartmentCreate struct {
	config
	mutation *UserDepartmentMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (udc *UserDepartmentCreate) SetUserID(i int64) *UserDepartmentCreate {
	udc.mutation.SetUserID(i)
	return udc
}

// SetDepartmentID sets the "department_id" field.
func (udc *UserDepartmentCreate) SetDepartmentID(i int64) *UserDepartmentCreate {
	udc.mutation.SetDepartmentID(i)
	return udc
}

// SetUser sets the "user" edge to the User entity.
func (udc *UserDepartmentCreate) SetUser(u *User) *UserDepartmentCreate {
	return udc.SetUserID(u.ID)
}

// SetDepartment sets the "department" edge to the Department entity.
func (udc *UserDepartmentCreate) SetDepartment(d *Department) *UserDepartmentCreate {
	return udc.SetDepartmentID(d.ID)
}

// Mutation returns the UserDepartmentMutation object of the builder.
func (udc *UserDepartmentCreate) Mutation() *UserDepartmentMutation {
	return udc.mutation
}

// Save creates the UserDepartment in the database.
func (udc *UserDepartmentCreate) Save(ctx context.Context) (*UserDepartment, error) {
	return withHooks(ctx, udc.sqlSave, udc.mutation, udc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (udc *UserDepartmentCreate) SaveX(ctx context.Context) *UserDepartment {
	v, err := udc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (udc *UserDepartmentCreate) Exec(ctx context.Context) error {
	_, err := udc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udc *UserDepartmentCreate) ExecX(ctx context.Context) {
	if err := udc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (udc *UserDepartmentCreate) check() error {
	if _, ok := udc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserDepartment.user_id"`)}
	}
	if v, ok := udc.mutation.UserID(); ok {
		if err := userdepartment.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "UserDepartment.user_id": %w`, err)}
		}
	}
	if _, ok := udc.mutation.DepartmentID(); !ok {
		return &ValidationError{Name: "department_id", err: errors.New(`ent: missing required field "UserDepartment.department_id"`)}
	}
	if v, ok := udc.mutation.DepartmentID(); ok {
		if err := userdepartment.DepartmentIDValidator(v); err != nil {
			return &ValidationError{Name: "department_id", err: fmt.Errorf(`ent: validator failed for field "UserDepartment.department_id": %w`, err)}
		}
	}
	if len(udc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserDepartment.user"`)}
	}
	if len(udc.mutation.DepartmentIDs()) == 0 {
		return &ValidationError{Name: "department", err: errors.New(`ent: missing required edge "UserDepartment.department"`)}
	}
	return nil
}

func (udc *UserDepartmentCreate) sqlSave(ctx context.Context) (*UserDepartment, error) {
	if err := udc.check(); err != nil {
		return nil, err
	}
	_node, _spec := udc.createSpec()
	if err := sqlgraph.CreateNode(ctx, udc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	udc.mutation.id = &_node.ID
	udc.mutation.done = true
	return _node, nil
}

func (udc *UserDepartmentCreate) createSpec() (*UserDepartment, *sqlgraph.CreateSpec) {
	var (
		_node = &UserDepartment{config: udc.config}
		_spec = sqlgraph.NewCreateSpec(userdepartment.Table, sqlgraph.NewFieldSpec(userdepartment.FieldID, field.TypeInt))
	)
	if nodes := udc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userdepartment.UserTable,
			Columns: []string{userdepartment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := udc.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userdepartment.DepartmentTable,
			Columns: []string{userdepartment.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DepartmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SetUserDepartment set the UserDepartment
func (udc *UserDepartmentCreate) SetUserDepartment(input *UserDepartment, fields ...string) *UserDepartmentCreate {
	m := udc.mutation
	if len(fields) == 0 {
		fields = userdepartment.Columns
	}
	_ = m.SetFields(input, fields...)
	return udc
}

// SetUserDepartmentWithZero set the UserDepartment
func (udc *UserDepartmentCreate) SetUserDepartmentWithZero(input *UserDepartment, fields ...string) *UserDepartmentCreate {
	m := udc.mutation
	if len(fields) == 0 {
		fields = userdepartment.Columns
	}
	_ = m.SetFieldsWithZero(input, fields...)
	return udc
}

// UserDepartmentCreateBulk is the builder for creating many UserDepartment entities in bulk.
type UserDepartmentCreateBulk struct {
	config
	err      error
	builders []*UserDepartmentCreate
}

// Save creates the UserDepartment entities in the database.
func (udcb *UserDepartmentCreateBulk) Save(ctx context.Context) ([]*UserDepartment, error) {
	if udcb.err != nil {
		return nil, udcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(udcb.builders))
	nodes := make([]*UserDepartment, len(udcb.builders))
	mutators := make([]Mutator, len(udcb.builders))
	for i := range udcb.builders {
		func(i int, root context.Context) {
			builder := udcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserDepartmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, udcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, udcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, udcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (udcb *UserDepartmentCreateBulk) SaveX(ctx context.Context) []*UserDepartment {
	v, err := udcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (udcb *UserDepartmentCreateBulk) Exec(ctx context.Context) error {
	_, err := udcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udcb *UserDepartmentCreateBulk) ExecX(ctx context.Context) {
	if err := udcb.Exec(ctx); err != nil {
		panic(err)
	}
}
