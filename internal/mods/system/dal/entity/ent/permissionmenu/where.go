// Code generated by ent, DO NOT EDIT.

package permissionmenu

import (
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.PermissionMenu {
	return predicate.PermissionMenu(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.PermissionMenu {
	return predicate.PermissionMenu(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.PermissionMenu {
	return predicate.PermissionMenu(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.PermissionMenu {
	return predicate.PermissionMenu(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.PermissionMenu {
	return predicate.PermissionMenu(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.PermissionMenu {
	return predicate.PermissionMenu(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.PermissionMenu {
	return predicate.PermissionMenu(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.PermissionMenu {
	return predicate.PermissionMenu(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.PermissionMenu {
	return predicate.PermissionMenu(sql.FieldLTE(FieldID, id))
}

// PermissionID applies equality check predicate on the "permission_id" field. It's identical to PermissionIDEQ.
func PermissionID(v int64) predicate.PermissionMenu {
	return predicate.PermissionMenu(sql.FieldEQ(FieldPermissionID, v))
}

// MenuID applies equality check predicate on the "menu_id" field. It's identical to MenuIDEQ.
func MenuID(v int64) predicate.PermissionMenu {
	return predicate.PermissionMenu(sql.FieldEQ(FieldMenuID, v))
}

// PermissionIDEQ applies the EQ predicate on the "permission_id" field.
func PermissionIDEQ(v int64) predicate.PermissionMenu {
	return predicate.PermissionMenu(sql.FieldEQ(FieldPermissionID, v))
}

// PermissionIDNEQ applies the NEQ predicate on the "permission_id" field.
func PermissionIDNEQ(v int64) predicate.PermissionMenu {
	return predicate.PermissionMenu(sql.FieldNEQ(FieldPermissionID, v))
}

// PermissionIDIn applies the In predicate on the "permission_id" field.
func PermissionIDIn(vs ...int64) predicate.PermissionMenu {
	return predicate.PermissionMenu(sql.FieldIn(FieldPermissionID, vs...))
}

// PermissionIDNotIn applies the NotIn predicate on the "permission_id" field.
func PermissionIDNotIn(vs ...int64) predicate.PermissionMenu {
	return predicate.PermissionMenu(sql.FieldNotIn(FieldPermissionID, vs...))
}

// MenuIDEQ applies the EQ predicate on the "menu_id" field.
func MenuIDEQ(v int64) predicate.PermissionMenu {
	return predicate.PermissionMenu(sql.FieldEQ(FieldMenuID, v))
}

// MenuIDNEQ applies the NEQ predicate on the "menu_id" field.
func MenuIDNEQ(v int64) predicate.PermissionMenu {
	return predicate.PermissionMenu(sql.FieldNEQ(FieldMenuID, v))
}

// MenuIDIn applies the In predicate on the "menu_id" field.
func MenuIDIn(vs ...int64) predicate.PermissionMenu {
	return predicate.PermissionMenu(sql.FieldIn(FieldMenuID, vs...))
}

// MenuIDNotIn applies the NotIn predicate on the "menu_id" field.
func MenuIDNotIn(vs ...int64) predicate.PermissionMenu {
	return predicate.PermissionMenu(sql.FieldNotIn(FieldMenuID, vs...))
}

// HasPermission applies the HasEdge predicate on the "permission" edge.
func HasPermission() predicate.PermissionMenu {
	return predicate.PermissionMenu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PermissionTable, PermissionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPermissionWith applies the HasEdge predicate on the "permission" edge with a given conditions (other predicates).
func HasPermissionWith(preds ...predicate.Permission) predicate.PermissionMenu {
	return predicate.PermissionMenu(func(s *sql.Selector) {
		step := newPermissionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMenu applies the HasEdge predicate on the "menu" edge.
func HasMenu() predicate.PermissionMenu {
	return predicate.PermissionMenu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MenuTable, MenuColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMenuWith applies the HasEdge predicate on the "menu" edge with a given conditions (other predicates).
func HasMenuWith(preds ...predicate.Menu) predicate.PermissionMenu {
	return predicate.PermissionMenu(func(s *sql.Selector) {
		step := newMenuStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PermissionMenu) predicate.PermissionMenu {
	return predicate.PermissionMenu(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PermissionMenu) predicate.PermissionMenu {
	return predicate.PermissionMenu(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PermissionMenu) predicate.PermissionMenu {
	return predicate.PermissionMenu(sql.NotPredicates(p))
}
