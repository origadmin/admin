// Code generated by ent, DO NOT EDIT.

package resource

import (
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Resource {
	return predicate.Resource(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Resource {
	return predicate.Resource(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Resource {
	return predicate.Resource(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Resource {
	return predicate.Resource(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Resource {
	return predicate.Resource(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Resource {
	return predicate.Resource(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Resource {
	return predicate.Resource(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldUpdateTime, v))
}

// Method applies equality check predicate on the "method" field. It's identical to MethodEQ.
func Method(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldMethod, v))
}

// Operation applies equality check predicate on the "operation" field. It's identical to OperationEQ.
func Operation(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldOperation, v))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldPath, v))
}

// URI applies equality check predicate on the "uri" field. It's identical to URIEQ.
func URI(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldURI, v))
}

// I18nKey applies equality check predicate on the "i18n_key" field. It's identical to I18nKeyEQ.
func I18nKey(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldI18nKey, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldDescription, v))
}

// MenuID applies equality check predicate on the "menu_id" field. It's identical to MenuIDEQ.
func MenuID(v int64) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldMenuID, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldLTE(FieldUpdateTime, v))
}

// MethodEQ applies the EQ predicate on the "method" field.
func MethodEQ(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldMethod, v))
}

// MethodNEQ applies the NEQ predicate on the "method" field.
func MethodNEQ(v string) predicate.Resource {
	return predicate.Resource(sql.FieldNEQ(FieldMethod, v))
}

// MethodIn applies the In predicate on the "method" field.
func MethodIn(vs ...string) predicate.Resource {
	return predicate.Resource(sql.FieldIn(FieldMethod, vs...))
}

// MethodNotIn applies the NotIn predicate on the "method" field.
func MethodNotIn(vs ...string) predicate.Resource {
	return predicate.Resource(sql.FieldNotIn(FieldMethod, vs...))
}

// MethodGT applies the GT predicate on the "method" field.
func MethodGT(v string) predicate.Resource {
	return predicate.Resource(sql.FieldGT(FieldMethod, v))
}

// MethodGTE applies the GTE predicate on the "method" field.
func MethodGTE(v string) predicate.Resource {
	return predicate.Resource(sql.FieldGTE(FieldMethod, v))
}

// MethodLT applies the LT predicate on the "method" field.
func MethodLT(v string) predicate.Resource {
	return predicate.Resource(sql.FieldLT(FieldMethod, v))
}

// MethodLTE applies the LTE predicate on the "method" field.
func MethodLTE(v string) predicate.Resource {
	return predicate.Resource(sql.FieldLTE(FieldMethod, v))
}

// MethodContains applies the Contains predicate on the "method" field.
func MethodContains(v string) predicate.Resource {
	return predicate.Resource(sql.FieldContains(FieldMethod, v))
}

// MethodHasPrefix applies the HasPrefix predicate on the "method" field.
func MethodHasPrefix(v string) predicate.Resource {
	return predicate.Resource(sql.FieldHasPrefix(FieldMethod, v))
}

// MethodHasSuffix applies the HasSuffix predicate on the "method" field.
func MethodHasSuffix(v string) predicate.Resource {
	return predicate.Resource(sql.FieldHasSuffix(FieldMethod, v))
}

// MethodEqualFold applies the EqualFold predicate on the "method" field.
func MethodEqualFold(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEqualFold(FieldMethod, v))
}

// MethodContainsFold applies the ContainsFold predicate on the "method" field.
func MethodContainsFold(v string) predicate.Resource {
	return predicate.Resource(sql.FieldContainsFold(FieldMethod, v))
}

// OperationEQ applies the EQ predicate on the "operation" field.
func OperationEQ(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldOperation, v))
}

// OperationNEQ applies the NEQ predicate on the "operation" field.
func OperationNEQ(v string) predicate.Resource {
	return predicate.Resource(sql.FieldNEQ(FieldOperation, v))
}

// OperationIn applies the In predicate on the "operation" field.
func OperationIn(vs ...string) predicate.Resource {
	return predicate.Resource(sql.FieldIn(FieldOperation, vs...))
}

// OperationNotIn applies the NotIn predicate on the "operation" field.
func OperationNotIn(vs ...string) predicate.Resource {
	return predicate.Resource(sql.FieldNotIn(FieldOperation, vs...))
}

// OperationGT applies the GT predicate on the "operation" field.
func OperationGT(v string) predicate.Resource {
	return predicate.Resource(sql.FieldGT(FieldOperation, v))
}

// OperationGTE applies the GTE predicate on the "operation" field.
func OperationGTE(v string) predicate.Resource {
	return predicate.Resource(sql.FieldGTE(FieldOperation, v))
}

// OperationLT applies the LT predicate on the "operation" field.
func OperationLT(v string) predicate.Resource {
	return predicate.Resource(sql.FieldLT(FieldOperation, v))
}

// OperationLTE applies the LTE predicate on the "operation" field.
func OperationLTE(v string) predicate.Resource {
	return predicate.Resource(sql.FieldLTE(FieldOperation, v))
}

// OperationContains applies the Contains predicate on the "operation" field.
func OperationContains(v string) predicate.Resource {
	return predicate.Resource(sql.FieldContains(FieldOperation, v))
}

// OperationHasPrefix applies the HasPrefix predicate on the "operation" field.
func OperationHasPrefix(v string) predicate.Resource {
	return predicate.Resource(sql.FieldHasPrefix(FieldOperation, v))
}

// OperationHasSuffix applies the HasSuffix predicate on the "operation" field.
func OperationHasSuffix(v string) predicate.Resource {
	return predicate.Resource(sql.FieldHasSuffix(FieldOperation, v))
}

// OperationEqualFold applies the EqualFold predicate on the "operation" field.
func OperationEqualFold(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEqualFold(FieldOperation, v))
}

// OperationContainsFold applies the ContainsFold predicate on the "operation" field.
func OperationContainsFold(v string) predicate.Resource {
	return predicate.Resource(sql.FieldContainsFold(FieldOperation, v))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.Resource {
	return predicate.Resource(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.Resource {
	return predicate.Resource(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.Resource {
	return predicate.Resource(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.Resource {
	return predicate.Resource(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.Resource {
	return predicate.Resource(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.Resource {
	return predicate.Resource(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.Resource {
	return predicate.Resource(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.Resource {
	return predicate.Resource(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.Resource {
	return predicate.Resource(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.Resource {
	return predicate.Resource(sql.FieldHasSuffix(FieldPath, v))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.Resource {
	return predicate.Resource(sql.FieldContainsFold(FieldPath, v))
}

// URIEQ applies the EQ predicate on the "uri" field.
func URIEQ(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldURI, v))
}

// URINEQ applies the NEQ predicate on the "uri" field.
func URINEQ(v string) predicate.Resource {
	return predicate.Resource(sql.FieldNEQ(FieldURI, v))
}

// URIIn applies the In predicate on the "uri" field.
func URIIn(vs ...string) predicate.Resource {
	return predicate.Resource(sql.FieldIn(FieldURI, vs...))
}

// URINotIn applies the NotIn predicate on the "uri" field.
func URINotIn(vs ...string) predicate.Resource {
	return predicate.Resource(sql.FieldNotIn(FieldURI, vs...))
}

// URIGT applies the GT predicate on the "uri" field.
func URIGT(v string) predicate.Resource {
	return predicate.Resource(sql.FieldGT(FieldURI, v))
}

// URIGTE applies the GTE predicate on the "uri" field.
func URIGTE(v string) predicate.Resource {
	return predicate.Resource(sql.FieldGTE(FieldURI, v))
}

// URILT applies the LT predicate on the "uri" field.
func URILT(v string) predicate.Resource {
	return predicate.Resource(sql.FieldLT(FieldURI, v))
}

// URILTE applies the LTE predicate on the "uri" field.
func URILTE(v string) predicate.Resource {
	return predicate.Resource(sql.FieldLTE(FieldURI, v))
}

// URIContains applies the Contains predicate on the "uri" field.
func URIContains(v string) predicate.Resource {
	return predicate.Resource(sql.FieldContains(FieldURI, v))
}

// URIHasPrefix applies the HasPrefix predicate on the "uri" field.
func URIHasPrefix(v string) predicate.Resource {
	return predicate.Resource(sql.FieldHasPrefix(FieldURI, v))
}

// URIHasSuffix applies the HasSuffix predicate on the "uri" field.
func URIHasSuffix(v string) predicate.Resource {
	return predicate.Resource(sql.FieldHasSuffix(FieldURI, v))
}

// URIEqualFold applies the EqualFold predicate on the "uri" field.
func URIEqualFold(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEqualFold(FieldURI, v))
}

// URIContainsFold applies the ContainsFold predicate on the "uri" field.
func URIContainsFold(v string) predicate.Resource {
	return predicate.Resource(sql.FieldContainsFold(FieldURI, v))
}

// I18nKeyEQ applies the EQ predicate on the "i18n_key" field.
func I18nKeyEQ(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldI18nKey, v))
}

// I18nKeyNEQ applies the NEQ predicate on the "i18n_key" field.
func I18nKeyNEQ(v string) predicate.Resource {
	return predicate.Resource(sql.FieldNEQ(FieldI18nKey, v))
}

// I18nKeyIn applies the In predicate on the "i18n_key" field.
func I18nKeyIn(vs ...string) predicate.Resource {
	return predicate.Resource(sql.FieldIn(FieldI18nKey, vs...))
}

// I18nKeyNotIn applies the NotIn predicate on the "i18n_key" field.
func I18nKeyNotIn(vs ...string) predicate.Resource {
	return predicate.Resource(sql.FieldNotIn(FieldI18nKey, vs...))
}

// I18nKeyGT applies the GT predicate on the "i18n_key" field.
func I18nKeyGT(v string) predicate.Resource {
	return predicate.Resource(sql.FieldGT(FieldI18nKey, v))
}

// I18nKeyGTE applies the GTE predicate on the "i18n_key" field.
func I18nKeyGTE(v string) predicate.Resource {
	return predicate.Resource(sql.FieldGTE(FieldI18nKey, v))
}

// I18nKeyLT applies the LT predicate on the "i18n_key" field.
func I18nKeyLT(v string) predicate.Resource {
	return predicate.Resource(sql.FieldLT(FieldI18nKey, v))
}

// I18nKeyLTE applies the LTE predicate on the "i18n_key" field.
func I18nKeyLTE(v string) predicate.Resource {
	return predicate.Resource(sql.FieldLTE(FieldI18nKey, v))
}

// I18nKeyContains applies the Contains predicate on the "i18n_key" field.
func I18nKeyContains(v string) predicate.Resource {
	return predicate.Resource(sql.FieldContains(FieldI18nKey, v))
}

// I18nKeyHasPrefix applies the HasPrefix predicate on the "i18n_key" field.
func I18nKeyHasPrefix(v string) predicate.Resource {
	return predicate.Resource(sql.FieldHasPrefix(FieldI18nKey, v))
}

// I18nKeyHasSuffix applies the HasSuffix predicate on the "i18n_key" field.
func I18nKeyHasSuffix(v string) predicate.Resource {
	return predicate.Resource(sql.FieldHasSuffix(FieldI18nKey, v))
}

// I18nKeyEqualFold applies the EqualFold predicate on the "i18n_key" field.
func I18nKeyEqualFold(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEqualFold(FieldI18nKey, v))
}

// I18nKeyContainsFold applies the ContainsFold predicate on the "i18n_key" field.
func I18nKeyContainsFold(v string) predicate.Resource {
	return predicate.Resource(sql.FieldContainsFold(FieldI18nKey, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Resource {
	return predicate.Resource(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Resource {
	return predicate.Resource(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Resource {
	return predicate.Resource(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Resource {
	return predicate.Resource(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Resource {
	return predicate.Resource(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Resource {
	return predicate.Resource(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Resource {
	return predicate.Resource(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Resource {
	return predicate.Resource(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Resource {
	return predicate.Resource(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Resource {
	return predicate.Resource(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Resource {
	return predicate.Resource(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Resource {
	return predicate.Resource(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Resource {
	return predicate.Resource(sql.FieldContainsFold(FieldDescription, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Resource {
	return predicate.Resource(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Resource {
	return predicate.Resource(sql.FieldNotNull(FieldMetadata))
}

// MenuIDEQ applies the EQ predicate on the "menu_id" field.
func MenuIDEQ(v int64) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldMenuID, v))
}

// MenuIDNEQ applies the NEQ predicate on the "menu_id" field.
func MenuIDNEQ(v int64) predicate.Resource {
	return predicate.Resource(sql.FieldNEQ(FieldMenuID, v))
}

// MenuIDIn applies the In predicate on the "menu_id" field.
func MenuIDIn(vs ...int64) predicate.Resource {
	return predicate.Resource(sql.FieldIn(FieldMenuID, vs...))
}

// MenuIDNotIn applies the NotIn predicate on the "menu_id" field.
func MenuIDNotIn(vs ...int64) predicate.Resource {
	return predicate.Resource(sql.FieldNotIn(FieldMenuID, vs...))
}

// MenuIDIsNil applies the IsNil predicate on the "menu_id" field.
func MenuIDIsNil() predicate.Resource {
	return predicate.Resource(sql.FieldIsNull(FieldMenuID))
}

// MenuIDNotNil applies the NotNil predicate on the "menu_id" field.
func MenuIDNotNil() predicate.Resource {
	return predicate.Resource(sql.FieldNotNull(FieldMenuID))
}

// HasMenu applies the HasEdge predicate on the "menu" edge.
func HasMenu() predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MenuTable, MenuColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMenuWith applies the HasEdge predicate on the "menu" edge with a given conditions (other predicates).
func HasMenuWith(preds ...predicate.Menu) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		step := newMenuStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPermission applies the HasEdge predicate on the "permission" edge.
func HasPermission() predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, PermissionTable, PermissionPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPermissionWith applies the HasEdge predicate on the "permission" edge with a given conditions (other predicates).
func HasPermissionWith(preds ...predicate.Permission) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		step := newPermissionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPermissionResources applies the HasEdge predicate on the "permission_resources" edge.
func HasPermissionResources() predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, PermissionResourcesTable, PermissionResourcesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPermissionResourcesWith applies the HasEdge predicate on the "permission_resources" edge with a given conditions (other predicates).
func HasPermissionResourcesWith(preds ...predicate.PermissionResource) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		step := newPermissionResourcesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Resource) predicate.Resource {
	return predicate.Resource(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Resource) predicate.Resource {
	return predicate.Resource(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Resource) predicate.Resource {
	return predicate.Resource(sql.NotPredicates(p))
}
