// Code generated by ent, DO NOT EDIT.

package user

import (
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldID, id))
}

// CreateAuthor applies equality check predicate on the "create_author" field. It's identical to CreateAuthorEQ.
func CreateAuthor(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreateAuthor, v))
}

// UpdateAuthor applies equality check predicate on the "update_author" field. It's identical to UpdateAuthorEQ.
func UpdateAuthor(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdateAuthor, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdateTime, v))
}

// Index applies equality check predicate on the "index" field. It's identical to IndexEQ.
func Index(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIndex, v))
}

// Department applies equality check predicate on the "department" field. It's identical to DepartmentEQ.
func Department(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDepartment, v))
}

// AllowedIP applies equality check predicate on the "allowed_ip" field. It's identical to AllowedIPEQ.
func AllowedIP(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAllowedIP, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUserID, v))
}

// Avatar applies equality check predicate on the "avatar" field. It's identical to AvatarEQ.
func Avatar(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatar, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// Salt applies equality check predicate on the "salt" field. It's identical to SaltEQ.
func Salt(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSalt, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhone, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRemark, v))
}

// LastLoginTime applies equality check predicate on the "last_login_time" field. It's identical to LastLoginTimeEQ.
func LastLoginTime(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLoginTime, v))
}

// SanctionDate applies equality check predicate on the "sanction_date" field. It's identical to SanctionDateEQ.
func SanctionDate(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSanctionDate, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int8) predicate.User {
	return predicate.User(sql.FieldEQ(FieldStatus, v))
}

// ManagerID applies equality check predicate on the "manager_id" field. It's identical to ManagerIDEQ.
func ManagerID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldManagerID, v))
}

// Manager applies equality check predicate on the "manager" field. It's identical to ManagerEQ.
func Manager(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldManager, v))
}

// CreateAuthorEQ applies the EQ predicate on the "create_author" field.
func CreateAuthorEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreateAuthor, v))
}

// CreateAuthorNEQ applies the NEQ predicate on the "create_author" field.
func CreateAuthorNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreateAuthor, v))
}

// CreateAuthorIn applies the In predicate on the "create_author" field.
func CreateAuthorIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreateAuthor, vs...))
}

// CreateAuthorNotIn applies the NotIn predicate on the "create_author" field.
func CreateAuthorNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreateAuthor, vs...))
}

// CreateAuthorGT applies the GT predicate on the "create_author" field.
func CreateAuthorGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreateAuthor, v))
}

// CreateAuthorGTE applies the GTE predicate on the "create_author" field.
func CreateAuthorGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreateAuthor, v))
}

// CreateAuthorLT applies the LT predicate on the "create_author" field.
func CreateAuthorLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreateAuthor, v))
}

// CreateAuthorLTE applies the LTE predicate on the "create_author" field.
func CreateAuthorLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreateAuthor, v))
}

// CreateAuthorContains applies the Contains predicate on the "create_author" field.
func CreateAuthorContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldCreateAuthor, v))
}

// CreateAuthorHasPrefix applies the HasPrefix predicate on the "create_author" field.
func CreateAuthorHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldCreateAuthor, v))
}

// CreateAuthorHasSuffix applies the HasSuffix predicate on the "create_author" field.
func CreateAuthorHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldCreateAuthor, v))
}

// CreateAuthorEqualFold applies the EqualFold predicate on the "create_author" field.
func CreateAuthorEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldCreateAuthor, v))
}

// CreateAuthorContainsFold applies the ContainsFold predicate on the "create_author" field.
func CreateAuthorContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldCreateAuthor, v))
}

// UpdateAuthorEQ applies the EQ predicate on the "update_author" field.
func UpdateAuthorEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdateAuthor, v))
}

// UpdateAuthorNEQ applies the NEQ predicate on the "update_author" field.
func UpdateAuthorNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdateAuthor, v))
}

// UpdateAuthorIn applies the In predicate on the "update_author" field.
func UpdateAuthorIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdateAuthor, vs...))
}

// UpdateAuthorNotIn applies the NotIn predicate on the "update_author" field.
func UpdateAuthorNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdateAuthor, vs...))
}

// UpdateAuthorGT applies the GT predicate on the "update_author" field.
func UpdateAuthorGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdateAuthor, v))
}

// UpdateAuthorGTE applies the GTE predicate on the "update_author" field.
func UpdateAuthorGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdateAuthor, v))
}

// UpdateAuthorLT applies the LT predicate on the "update_author" field.
func UpdateAuthorLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdateAuthor, v))
}

// UpdateAuthorLTE applies the LTE predicate on the "update_author" field.
func UpdateAuthorLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdateAuthor, v))
}

// UpdateAuthorContains applies the Contains predicate on the "update_author" field.
func UpdateAuthorContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUpdateAuthor, v))
}

// UpdateAuthorHasPrefix applies the HasPrefix predicate on the "update_author" field.
func UpdateAuthorHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUpdateAuthor, v))
}

// UpdateAuthorHasSuffix applies the HasSuffix predicate on the "update_author" field.
func UpdateAuthorHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUpdateAuthor, v))
}

// UpdateAuthorEqualFold applies the EqualFold predicate on the "update_author" field.
func UpdateAuthorEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUpdateAuthor, v))
}

// UpdateAuthorContainsFold applies the ContainsFold predicate on the "update_author" field.
func UpdateAuthorContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUpdateAuthor, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdateTime, v))
}

// IndexEQ applies the EQ predicate on the "index" field.
func IndexEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIndex, v))
}

// IndexNEQ applies the NEQ predicate on the "index" field.
func IndexNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIndex, v))
}

// IndexIn applies the In predicate on the "index" field.
func IndexIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldIndex, vs...))
}

// IndexNotIn applies the NotIn predicate on the "index" field.
func IndexNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldIndex, vs...))
}

// IndexGT applies the GT predicate on the "index" field.
func IndexGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldIndex, v))
}

// IndexGTE applies the GTE predicate on the "index" field.
func IndexGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldIndex, v))
}

// IndexLT applies the LT predicate on the "index" field.
func IndexLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldIndex, v))
}

// IndexLTE applies the LTE predicate on the "index" field.
func IndexLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldIndex, v))
}

// DepartmentEQ applies the EQ predicate on the "department" field.
func DepartmentEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDepartment, v))
}

// DepartmentNEQ applies the NEQ predicate on the "department" field.
func DepartmentNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDepartment, v))
}

// DepartmentIn applies the In predicate on the "department" field.
func DepartmentIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldDepartment, vs...))
}

// DepartmentNotIn applies the NotIn predicate on the "department" field.
func DepartmentNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDepartment, vs...))
}

// DepartmentGT applies the GT predicate on the "department" field.
func DepartmentGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldDepartment, v))
}

// DepartmentGTE applies the GTE predicate on the "department" field.
func DepartmentGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDepartment, v))
}

// DepartmentLT applies the LT predicate on the "department" field.
func DepartmentLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldDepartment, v))
}

// DepartmentLTE applies the LTE predicate on the "department" field.
func DepartmentLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDepartment, v))
}

// DepartmentContains applies the Contains predicate on the "department" field.
func DepartmentContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldDepartment, v))
}

// DepartmentHasPrefix applies the HasPrefix predicate on the "department" field.
func DepartmentHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldDepartment, v))
}

// DepartmentHasSuffix applies the HasSuffix predicate on the "department" field.
func DepartmentHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldDepartment, v))
}

// DepartmentEqualFold applies the EqualFold predicate on the "department" field.
func DepartmentEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldDepartment, v))
}

// DepartmentContainsFold applies the ContainsFold predicate on the "department" field.
func DepartmentContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldDepartment, v))
}

// AllowedIPEQ applies the EQ predicate on the "allowed_ip" field.
func AllowedIPEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAllowedIP, v))
}

// AllowedIPNEQ applies the NEQ predicate on the "allowed_ip" field.
func AllowedIPNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAllowedIP, v))
}

// AllowedIPIn applies the In predicate on the "allowed_ip" field.
func AllowedIPIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldAllowedIP, vs...))
}

// AllowedIPNotIn applies the NotIn predicate on the "allowed_ip" field.
func AllowedIPNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAllowedIP, vs...))
}

// AllowedIPGT applies the GT predicate on the "allowed_ip" field.
func AllowedIPGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldAllowedIP, v))
}

// AllowedIPGTE applies the GTE predicate on the "allowed_ip" field.
func AllowedIPGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAllowedIP, v))
}

// AllowedIPLT applies the LT predicate on the "allowed_ip" field.
func AllowedIPLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldAllowedIP, v))
}

// AllowedIPLTE applies the LTE predicate on the "allowed_ip" field.
func AllowedIPLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAllowedIP, v))
}

// AllowedIPContains applies the Contains predicate on the "allowed_ip" field.
func AllowedIPContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldAllowedIP, v))
}

// AllowedIPHasPrefix applies the HasPrefix predicate on the "allowed_ip" field.
func AllowedIPHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldAllowedIP, v))
}

// AllowedIPHasSuffix applies the HasSuffix predicate on the "allowed_ip" field.
func AllowedIPHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldAllowedIP, v))
}

// AllowedIPEqualFold applies the EqualFold predicate on the "allowed_ip" field.
func AllowedIPEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldAllowedIP, v))
}

// AllowedIPContainsFold applies the ContainsFold predicate on the "allowed_ip" field.
func AllowedIPContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldAllowedIP, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUsername, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldName, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUserID, v))
}

// AvatarEQ applies the EQ predicate on the "avatar" field.
func AvatarEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatar, v))
}

// AvatarNEQ applies the NEQ predicate on the "avatar" field.
func AvatarNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAvatar, v))
}

// AvatarIn applies the In predicate on the "avatar" field.
func AvatarIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldAvatar, vs...))
}

// AvatarNotIn applies the NotIn predicate on the "avatar" field.
func AvatarNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAvatar, vs...))
}

// AvatarGT applies the GT predicate on the "avatar" field.
func AvatarGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldAvatar, v))
}

// AvatarGTE applies the GTE predicate on the "avatar" field.
func AvatarGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAvatar, v))
}

// AvatarLT applies the LT predicate on the "avatar" field.
func AvatarLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldAvatar, v))
}

// AvatarLTE applies the LTE predicate on the "avatar" field.
func AvatarLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAvatar, v))
}

// AvatarContains applies the Contains predicate on the "avatar" field.
func AvatarContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldAvatar, v))
}

// AvatarHasPrefix applies the HasPrefix predicate on the "avatar" field.
func AvatarHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldAvatar, v))
}

// AvatarHasSuffix applies the HasSuffix predicate on the "avatar" field.
func AvatarHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldAvatar, v))
}

// AvatarEqualFold applies the EqualFold predicate on the "avatar" field.
func AvatarEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldAvatar, v))
}

// AvatarContainsFold applies the ContainsFold predicate on the "avatar" field.
func AvatarContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldAvatar, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPassword, v))
}

// SaltEQ applies the EQ predicate on the "salt" field.
func SaltEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSalt, v))
}

// SaltNEQ applies the NEQ predicate on the "salt" field.
func SaltNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldSalt, v))
}

// SaltIn applies the In predicate on the "salt" field.
func SaltIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldSalt, vs...))
}

// SaltNotIn applies the NotIn predicate on the "salt" field.
func SaltNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldSalt, vs...))
}

// SaltGT applies the GT predicate on the "salt" field.
func SaltGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldSalt, v))
}

// SaltGTE applies the GTE predicate on the "salt" field.
func SaltGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldSalt, v))
}

// SaltLT applies the LT predicate on the "salt" field.
func SaltLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldSalt, v))
}

// SaltLTE applies the LTE predicate on the "salt" field.
func SaltLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldSalt, v))
}

// SaltContains applies the Contains predicate on the "salt" field.
func SaltContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldSalt, v))
}

// SaltHasPrefix applies the HasPrefix predicate on the "salt" field.
func SaltHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldSalt, v))
}

// SaltHasSuffix applies the HasSuffix predicate on the "salt" field.
func SaltHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldSalt, v))
}

// SaltEqualFold applies the EqualFold predicate on the "salt" field.
func SaltEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldSalt, v))
}

// SaltContainsFold applies the ContainsFold predicate on the "salt" field.
func SaltContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldSalt, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPhone, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldRemark, v))
}

// LastLoginTimeEQ applies the EQ predicate on the "last_login_time" field.
func LastLoginTimeEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLoginTime, v))
}

// LastLoginTimeNEQ applies the NEQ predicate on the "last_login_time" field.
func LastLoginTimeNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastLoginTime, v))
}

// LastLoginTimeIn applies the In predicate on the "last_login_time" field.
func LastLoginTimeIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastLoginTime, vs...))
}

// LastLoginTimeNotIn applies the NotIn predicate on the "last_login_time" field.
func LastLoginTimeNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastLoginTime, vs...))
}

// LastLoginTimeGT applies the GT predicate on the "last_login_time" field.
func LastLoginTimeGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastLoginTime, v))
}

// LastLoginTimeGTE applies the GTE predicate on the "last_login_time" field.
func LastLoginTimeGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastLoginTime, v))
}

// LastLoginTimeLT applies the LT predicate on the "last_login_time" field.
func LastLoginTimeLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastLoginTime, v))
}

// LastLoginTimeLTE applies the LTE predicate on the "last_login_time" field.
func LastLoginTimeLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastLoginTime, v))
}

// SanctionDateEQ applies the EQ predicate on the "sanction_date" field.
func SanctionDateEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSanctionDate, v))
}

// SanctionDateNEQ applies the NEQ predicate on the "sanction_date" field.
func SanctionDateNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldSanctionDate, v))
}

// SanctionDateIn applies the In predicate on the "sanction_date" field.
func SanctionDateIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldSanctionDate, vs...))
}

// SanctionDateNotIn applies the NotIn predicate on the "sanction_date" field.
func SanctionDateNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldSanctionDate, vs...))
}

// SanctionDateGT applies the GT predicate on the "sanction_date" field.
func SanctionDateGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldSanctionDate, v))
}

// SanctionDateGTE applies the GTE predicate on the "sanction_date" field.
func SanctionDateGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldSanctionDate, v))
}

// SanctionDateLT applies the LT predicate on the "sanction_date" field.
func SanctionDateLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldSanctionDate, v))
}

// SanctionDateLTE applies the LTE predicate on the "sanction_date" field.
func SanctionDateLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldSanctionDate, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int8) predicate.User {
	return predicate.User(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int8) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int8) predicate.User {
	return predicate.User(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int8) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int8) predicate.User {
	return predicate.User(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int8) predicate.User {
	return predicate.User(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int8) predicate.User {
	return predicate.User(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int8) predicate.User {
	return predicate.User(sql.FieldLTE(FieldStatus, v))
}

// ManagerIDEQ applies the EQ predicate on the "manager_id" field.
func ManagerIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldManagerID, v))
}

// ManagerIDNEQ applies the NEQ predicate on the "manager_id" field.
func ManagerIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldManagerID, v))
}

// ManagerIDIn applies the In predicate on the "manager_id" field.
func ManagerIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldManagerID, vs...))
}

// ManagerIDNotIn applies the NotIn predicate on the "manager_id" field.
func ManagerIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldManagerID, vs...))
}

// ManagerIDGT applies the GT predicate on the "manager_id" field.
func ManagerIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldManagerID, v))
}

// ManagerIDGTE applies the GTE predicate on the "manager_id" field.
func ManagerIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldManagerID, v))
}

// ManagerIDLT applies the LT predicate on the "manager_id" field.
func ManagerIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldManagerID, v))
}

// ManagerIDLTE applies the LTE predicate on the "manager_id" field.
func ManagerIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldManagerID, v))
}

// ManagerIDContains applies the Contains predicate on the "manager_id" field.
func ManagerIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldManagerID, v))
}

// ManagerIDHasPrefix applies the HasPrefix predicate on the "manager_id" field.
func ManagerIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldManagerID, v))
}

// ManagerIDHasSuffix applies the HasSuffix predicate on the "manager_id" field.
func ManagerIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldManagerID, v))
}

// ManagerIDIsNil applies the IsNil predicate on the "manager_id" field.
func ManagerIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldManagerID))
}

// ManagerIDNotNil applies the NotNil predicate on the "manager_id" field.
func ManagerIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldManagerID))
}

// ManagerIDEqualFold applies the EqualFold predicate on the "manager_id" field.
func ManagerIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldManagerID, v))
}

// ManagerIDContainsFold applies the ContainsFold predicate on the "manager_id" field.
func ManagerIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldManagerID, v))
}

// ManagerEQ applies the EQ predicate on the "manager" field.
func ManagerEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldManager, v))
}

// ManagerNEQ applies the NEQ predicate on the "manager" field.
func ManagerNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldManager, v))
}

// ManagerIn applies the In predicate on the "manager" field.
func ManagerIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldManager, vs...))
}

// ManagerNotIn applies the NotIn predicate on the "manager" field.
func ManagerNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldManager, vs...))
}

// ManagerGT applies the GT predicate on the "manager" field.
func ManagerGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldManager, v))
}

// ManagerGTE applies the GTE predicate on the "manager" field.
func ManagerGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldManager, v))
}

// ManagerLT applies the LT predicate on the "manager" field.
func ManagerLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldManager, v))
}

// ManagerLTE applies the LTE predicate on the "manager" field.
func ManagerLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldManager, v))
}

// ManagerContains applies the Contains predicate on the "manager" field.
func ManagerContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldManager, v))
}

// ManagerHasPrefix applies the HasPrefix predicate on the "manager" field.
func ManagerHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldManager, v))
}

// ManagerHasSuffix applies the HasSuffix predicate on the "manager" field.
func ManagerHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldManager, v))
}

// ManagerEqualFold applies the EqualFold predicate on the "manager" field.
func ManagerEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldManager, v))
}

// ManagerContainsFold applies the ContainsFold predicate on the "manager" field.
func ManagerContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldManager, v))
}

// HasRoles applies the HasEdge predicate on the "roles" edge.
func HasRoles() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, RolesTable, RolesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolesWith applies the HasEdge predicate on the "roles" edge with a given conditions (other predicates).
func HasRolesWith(preds ...predicate.Role) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newRolesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserRoles applies the HasEdge predicate on the "user_roles" edge.
func HasUserRoles() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, UserRolesTable, UserRolesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserRolesWith applies the HasEdge predicate on the "user_roles" edge with a given conditions (other predicates).
func HasUserRolesWith(preds ...predicate.UserRole) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newUserRolesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
