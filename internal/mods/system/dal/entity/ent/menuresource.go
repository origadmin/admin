// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/menu"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/menuresource"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// MenuResource is the model entity for the MenuResource schema.
type MenuResource struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// MenuID holds the value of the "menu_id" field.
	MenuID string `json:"menu_id,omitempty"`
	// Method holds the value of the "method" field.
	Method string `json:"method,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MenuResourceQuery when eager-loading is set.
	Edges        MenuResourceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MenuResourceEdges holds the relations/edges for other nodes in the graph.
type MenuResourceEdges struct {
	// Menu holds the value of the menu edge.
	Menu *Menu `json:"menu,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MenuOrErr returns the Menu value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MenuResourceEdges) MenuOrErr() (*Menu, error) {
	if e.Menu != nil {
		return e.Menu, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: menu.Label}
	}
	return nil, &NotLoadedError{edge: "menu"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MenuResource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case menuresource.FieldID, menuresource.FieldMenuID, menuresource.FieldMethod, menuresource.FieldPath:
			values[i] = new(sql.NullString)
		case menuresource.FieldCreateTime, menuresource.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MenuResource fields.
func (mr *MenuResource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case menuresource.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				mr.ID = value.String
			}
		case menuresource.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				mr.CreateTime = value.Time
			}
		case menuresource.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				mr.UpdateTime = value.Time
			}
		case menuresource.FieldMenuID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field menu_id", values[i])
			} else if value.Valid {
				mr.MenuID = value.String
			}
		case menuresource.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				mr.Method = value.String
			}
		case menuresource.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				mr.Path = value.String
			}
		default:
			mr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MenuResource.
// This includes values selected through modifiers, order, etc.
func (mr *MenuResource) Value(name string) (ent.Value, error) {
	return mr.selectValues.Get(name)
}

// QueryMenu queries the "menu" edge of the MenuResource entity.
func (mr *MenuResource) QueryMenu() *MenuQuery {
	return NewMenuResourceClient(mr.config).QueryMenu(mr)
}

// Update returns a builder for updating this MenuResource.
// Note that you need to call MenuResource.Unwrap() before calling this method if this MenuResource
// was returned from a transaction, and the transaction was committed or rolled back.
func (mr *MenuResource) Update() *MenuResourceUpdateOne {
	return NewMenuResourceClient(mr.config).UpdateOne(mr)
}

// Unwrap unwraps the MenuResource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mr *MenuResource) Unwrap() *MenuResource {
	_tx, ok := mr.config.driver.(*txDriver)
	if !ok {
		panic("ent: MenuResource is not a transactional entity")
	}
	mr.config.driver = _tx.drv
	return mr
}

// String implements the fmt.Stringer.
func (mr *MenuResource) String() string {
	var builder strings.Builder
	builder.WriteString("MenuResource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mr.ID))
	builder.WriteString("create_time=")
	builder.WriteString(mr.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(mr.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("menu_id=")
	builder.WriteString(mr.MenuID)
	builder.WriteString(", ")
	builder.WriteString("method=")
	builder.WriteString(mr.Method)
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(mr.Path)
	builder.WriteByte(')')
	return builder.String()
}

// MenuResources is a parsable slice of MenuResource.
type MenuResources []*MenuResource
