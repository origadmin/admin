// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/department"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/position"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/predicate"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/user"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/userdepartment"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DepartmentUpdate is the builder for updating Department entities.
type DepartmentUpdate struct {
	config
	hooks     []Hook
	mutation  *DepartmentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DepartmentUpdate builder.
func (du *DepartmentUpdate) Where(ps ...predicate.Department) *DepartmentUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetUpdateTime sets the "update_time" field.
func (du *DepartmentUpdate) SetUpdateTime(t time.Time) *DepartmentUpdate {
	du.mutation.SetUpdateTime(t)
	return du
}

// SetKeyword sets the "keyword" field.
func (du *DepartmentUpdate) SetKeyword(s string) *DepartmentUpdate {
	du.mutation.SetKeyword(s)
	return du
}

// SetNillableKeyword sets the "keyword" field if the given value is not nil.
func (du *DepartmentUpdate) SetNillableKeyword(s *string) *DepartmentUpdate {
	if s != nil {
		du.SetKeyword(*s)
	}
	return du
}

// SetName sets the "name" field.
func (du *DepartmentUpdate) SetName(s string) *DepartmentUpdate {
	du.mutation.SetName(s)
	return du
}

// SetNillableName sets the "name" field if the given value is not nil.
func (du *DepartmentUpdate) SetNillableName(s *string) *DepartmentUpdate {
	if s != nil {
		du.SetName(*s)
	}
	return du
}

// SetTreePath sets the "tree_path" field.
func (du *DepartmentUpdate) SetTreePath(s string) *DepartmentUpdate {
	du.mutation.SetTreePath(s)
	return du
}

// SetNillableTreePath sets the "tree_path" field if the given value is not nil.
func (du *DepartmentUpdate) SetNillableTreePath(s *string) *DepartmentUpdate {
	if s != nil {
		du.SetTreePath(*s)
	}
	return du
}

// SetSequence sets the "sequence" field.
func (du *DepartmentUpdate) SetSequence(i int) *DepartmentUpdate {
	du.mutation.ResetSequence()
	du.mutation.SetSequence(i)
	return du
}

// SetNillableSequence sets the "sequence" field if the given value is not nil.
func (du *DepartmentUpdate) SetNillableSequence(i *int) *DepartmentUpdate {
	if i != nil {
		du.SetSequence(*i)
	}
	return du
}

// AddSequence adds i to the "sequence" field.
func (du *DepartmentUpdate) AddSequence(i int) *DepartmentUpdate {
	du.mutation.AddSequence(i)
	return du
}

// SetStatus sets the "status" field.
func (du *DepartmentUpdate) SetStatus(i int8) *DepartmentUpdate {
	du.mutation.ResetStatus()
	du.mutation.SetStatus(i)
	return du
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (du *DepartmentUpdate) SetNillableStatus(i *int8) *DepartmentUpdate {
	if i != nil {
		du.SetStatus(*i)
	}
	return du
}

// AddStatus adds i to the "status" field.
func (du *DepartmentUpdate) AddStatus(i int8) *DepartmentUpdate {
	du.mutation.AddStatus(i)
	return du
}

// SetLevel sets the "level" field.
func (du *DepartmentUpdate) SetLevel(i int) *DepartmentUpdate {
	du.mutation.ResetLevel()
	du.mutation.SetLevel(i)
	return du
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (du *DepartmentUpdate) SetNillableLevel(i *int) *DepartmentUpdate {
	if i != nil {
		du.SetLevel(*i)
	}
	return du
}

// AddLevel adds i to the "level" field.
func (du *DepartmentUpdate) AddLevel(i int) *DepartmentUpdate {
	du.mutation.AddLevel(i)
	return du
}

// SetDescription sets the "description" field.
func (du *DepartmentUpdate) SetDescription(s string) *DepartmentUpdate {
	du.mutation.SetDescription(s)
	return du
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (du *DepartmentUpdate) SetNillableDescription(s *string) *DepartmentUpdate {
	if s != nil {
		du.SetDescription(*s)
	}
	return du
}

// SetParentID sets the "parent_id" field.
func (du *DepartmentUpdate) SetParentID(i int64) *DepartmentUpdate {
	du.mutation.SetParentID(i)
	return du
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (du *DepartmentUpdate) SetNillableParentID(i *int64) *DepartmentUpdate {
	if i != nil {
		du.SetParentID(*i)
	}
	return du
}

// ClearParentID clears the value of the "parent_id" field.
func (du *DepartmentUpdate) ClearParentID() *DepartmentUpdate {
	du.mutation.ClearParentID()
	return du
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (du *DepartmentUpdate) AddUserIDs(ids ...int64) *DepartmentUpdate {
	du.mutation.AddUserIDs(ids...)
	return du
}

// AddUsers adds the "users" edges to the User entity.
func (du *DepartmentUpdate) AddUsers(u ...*User) *DepartmentUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return du.AddUserIDs(ids...)
}

// AddPositionIDs adds the "positions" edge to the Position entity by IDs.
func (du *DepartmentUpdate) AddPositionIDs(ids ...int64) *DepartmentUpdate {
	du.mutation.AddPositionIDs(ids...)
	return du
}

// AddPositions adds the "positions" edges to the Position entity.
func (du *DepartmentUpdate) AddPositions(p ...*Position) *DepartmentUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return du.AddPositionIDs(ids...)
}

// AddChildIDs adds the "children" edge to the Department entity by IDs.
func (du *DepartmentUpdate) AddChildIDs(ids ...int64) *DepartmentUpdate {
	du.mutation.AddChildIDs(ids...)
	return du
}

// AddChildren adds the "children" edges to the Department entity.
func (du *DepartmentUpdate) AddChildren(d ...*Department) *DepartmentUpdate {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.AddChildIDs(ids...)
}

// SetParent sets the "parent" edge to the Department entity.
func (du *DepartmentUpdate) SetParent(d *Department) *DepartmentUpdate {
	return du.SetParentID(d.ID)
}

// AddUserDepartmentIDs adds the "user_departments" edge to the UserDepartment entity by IDs.
func (du *DepartmentUpdate) AddUserDepartmentIDs(ids ...int64) *DepartmentUpdate {
	du.mutation.AddUserDepartmentIDs(ids...)
	return du
}

// AddUserDepartments adds the "user_departments" edges to the UserDepartment entity.
func (du *DepartmentUpdate) AddUserDepartments(u ...*UserDepartment) *DepartmentUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return du.AddUserDepartmentIDs(ids...)
}

// Mutation returns the DepartmentMutation object of the builder.
func (du *DepartmentUpdate) Mutation() *DepartmentMutation {
	return du.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (du *DepartmentUpdate) ClearUsers() *DepartmentUpdate {
	du.mutation.ClearUsers()
	return du
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (du *DepartmentUpdate) RemoveUserIDs(ids ...int64) *DepartmentUpdate {
	du.mutation.RemoveUserIDs(ids...)
	return du
}

// RemoveUsers removes "users" edges to User entities.
func (du *DepartmentUpdate) RemoveUsers(u ...*User) *DepartmentUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return du.RemoveUserIDs(ids...)
}

// ClearPositions clears all "positions" edges to the Position entity.
func (du *DepartmentUpdate) ClearPositions() *DepartmentUpdate {
	du.mutation.ClearPositions()
	return du
}

// RemovePositionIDs removes the "positions" edge to Position entities by IDs.
func (du *DepartmentUpdate) RemovePositionIDs(ids ...int64) *DepartmentUpdate {
	du.mutation.RemovePositionIDs(ids...)
	return du
}

// RemovePositions removes "positions" edges to Position entities.
func (du *DepartmentUpdate) RemovePositions(p ...*Position) *DepartmentUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return du.RemovePositionIDs(ids...)
}

// ClearChildren clears all "children" edges to the Department entity.
func (du *DepartmentUpdate) ClearChildren() *DepartmentUpdate {
	du.mutation.ClearChildren()
	return du
}

// RemoveChildIDs removes the "children" edge to Department entities by IDs.
func (du *DepartmentUpdate) RemoveChildIDs(ids ...int64) *DepartmentUpdate {
	du.mutation.RemoveChildIDs(ids...)
	return du
}

// RemoveChildren removes "children" edges to Department entities.
func (du *DepartmentUpdate) RemoveChildren(d ...*Department) *DepartmentUpdate {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.RemoveChildIDs(ids...)
}

// ClearParent clears the "parent" edge to the Department entity.
func (du *DepartmentUpdate) ClearParent() *DepartmentUpdate {
	du.mutation.ClearParent()
	return du
}

// ClearUserDepartments clears all "user_departments" edges to the UserDepartment entity.
func (du *DepartmentUpdate) ClearUserDepartments() *DepartmentUpdate {
	du.mutation.ClearUserDepartments()
	return du
}

// RemoveUserDepartmentIDs removes the "user_departments" edge to UserDepartment entities by IDs.
func (du *DepartmentUpdate) RemoveUserDepartmentIDs(ids ...int64) *DepartmentUpdate {
	du.mutation.RemoveUserDepartmentIDs(ids...)
	return du
}

// RemoveUserDepartments removes "user_departments" edges to UserDepartment entities.
func (du *DepartmentUpdate) RemoveUserDepartments(u ...*UserDepartment) *DepartmentUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return du.RemoveUserDepartmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DepartmentUpdate) Save(ctx context.Context) (int, error) {
	du.defaults()
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DepartmentUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DepartmentUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DepartmentUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DepartmentUpdate) defaults() {
	if _, ok := du.mutation.UpdateTime(); !ok {
		v := department.UpdateDefaultUpdateTime()
		du.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DepartmentUpdate) check() error {
	if v, ok := du.mutation.Keyword(); ok {
		if err := department.KeywordValidator(v); err != nil {
			return &ValidationError{Name: "keyword", err: fmt.Errorf(`ent: validator failed for field "Department.keyword": %w`, err)}
		}
	}
	if v, ok := du.mutation.Name(); ok {
		if err := department.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Department.name": %w`, err)}
		}
	}
	if v, ok := du.mutation.TreePath(); ok {
		if err := department.TreePathValidator(v); err != nil {
			return &ValidationError{Name: "tree_path", err: fmt.Errorf(`ent: validator failed for field "Department.tree_path": %w`, err)}
		}
	}
	if v, ok := du.mutation.Description(); ok {
		if err := department.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Department.description": %w`, err)}
		}
	}
	if v, ok := du.mutation.ParentID(); ok {
		if err := department.ParentIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_id", err: fmt.Errorf(`ent: validator failed for field "Department.parent_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (du *DepartmentUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DepartmentUpdate {
	du.modifiers = append(du.modifiers, modifiers...)
	return du
}

func (du *DepartmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(department.Table, department.Columns, sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.UpdateTime(); ok {
		_spec.SetField(department.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := du.mutation.Keyword(); ok {
		_spec.SetField(department.FieldKeyword, field.TypeString, value)
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(department.FieldName, field.TypeString, value)
	}
	if value, ok := du.mutation.TreePath(); ok {
		_spec.SetField(department.FieldTreePath, field.TypeString, value)
	}
	if value, ok := du.mutation.Sequence(); ok {
		_spec.SetField(department.FieldSequence, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedSequence(); ok {
		_spec.AddField(department.FieldSequence, field.TypeInt, value)
	}
	if value, ok := du.mutation.Status(); ok {
		_spec.SetField(department.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := du.mutation.AddedStatus(); ok {
		_spec.AddField(department.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := du.mutation.Level(); ok {
		_spec.SetField(department.FieldLevel, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedLevel(); ok {
		_spec.AddField(department.FieldLevel, field.TypeInt, value)
	}
	if value, ok := du.mutation.Description(); ok {
		_spec.SetField(department.FieldDescription, field.TypeString, value)
	}
	if du.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   department.UsersTable,
			Columns: department.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		createE := &UserDepartmentCreate{config: du.config, mutation: newUserDepartmentMutation(du.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedUsersIDs(); len(nodes) > 0 && !du.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   department.UsersTable,
			Columns: department.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserDepartmentCreate{config: du.config, mutation: newUserDepartmentMutation(du.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   department.UsersTable,
			Columns: department.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserDepartmentCreate{config: du.config, mutation: newUserDepartmentMutation(du.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.PositionsTable,
			Columns: []string{department.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedPositionsIDs(); len(nodes) > 0 && !du.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.PositionsTable,
			Columns: []string{department.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.PositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.PositionsTable,
			Columns: []string{department.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.ChildrenTable,
			Columns: []string{department.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !du.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.ChildrenTable,
			Columns: []string{department.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.ChildrenTable,
			Columns: []string{department.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.ParentTable,
			Columns: []string{department.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.ParentTable,
			Columns: []string{department.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.UserDepartmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.UserDepartmentsTable,
			Columns: []string{department.UserDepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdepartment.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedUserDepartmentsIDs(); len(nodes) > 0 && !du.mutation.UserDepartmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.UserDepartmentsTable,
			Columns: []string{department.UserDepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdepartment.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.UserDepartmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.UserDepartmentsTable,
			Columns: []string{department.UserDepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdepartment.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(du.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{department.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DepartmentUpdateOne is the builder for updating a single Department entity.
type DepartmentUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DepartmentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (duo *DepartmentUpdateOne) SetUpdateTime(t time.Time) *DepartmentUpdateOne {
	duo.mutation.SetUpdateTime(t)
	return duo
}

// SetKeyword sets the "keyword" field.
func (duo *DepartmentUpdateOne) SetKeyword(s string) *DepartmentUpdateOne {
	duo.mutation.SetKeyword(s)
	return duo
}

// SetNillableKeyword sets the "keyword" field if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillableKeyword(s *string) *DepartmentUpdateOne {
	if s != nil {
		duo.SetKeyword(*s)
	}
	return duo
}

// SetName sets the "name" field.
func (duo *DepartmentUpdateOne) SetName(s string) *DepartmentUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillableName(s *string) *DepartmentUpdateOne {
	if s != nil {
		duo.SetName(*s)
	}
	return duo
}

// SetTreePath sets the "tree_path" field.
func (duo *DepartmentUpdateOne) SetTreePath(s string) *DepartmentUpdateOne {
	duo.mutation.SetTreePath(s)
	return duo
}

// SetNillableTreePath sets the "tree_path" field if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillableTreePath(s *string) *DepartmentUpdateOne {
	if s != nil {
		duo.SetTreePath(*s)
	}
	return duo
}

// SetSequence sets the "sequence" field.
func (duo *DepartmentUpdateOne) SetSequence(i int) *DepartmentUpdateOne {
	duo.mutation.ResetSequence()
	duo.mutation.SetSequence(i)
	return duo
}

// SetNillableSequence sets the "sequence" field if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillableSequence(i *int) *DepartmentUpdateOne {
	if i != nil {
		duo.SetSequence(*i)
	}
	return duo
}

// AddSequence adds i to the "sequence" field.
func (duo *DepartmentUpdateOne) AddSequence(i int) *DepartmentUpdateOne {
	duo.mutation.AddSequence(i)
	return duo
}

// SetStatus sets the "status" field.
func (duo *DepartmentUpdateOne) SetStatus(i int8) *DepartmentUpdateOne {
	duo.mutation.ResetStatus()
	duo.mutation.SetStatus(i)
	return duo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillableStatus(i *int8) *DepartmentUpdateOne {
	if i != nil {
		duo.SetStatus(*i)
	}
	return duo
}

// AddStatus adds i to the "status" field.
func (duo *DepartmentUpdateOne) AddStatus(i int8) *DepartmentUpdateOne {
	duo.mutation.AddStatus(i)
	return duo
}

// SetLevel sets the "level" field.
func (duo *DepartmentUpdateOne) SetLevel(i int) *DepartmentUpdateOne {
	duo.mutation.ResetLevel()
	duo.mutation.SetLevel(i)
	return duo
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillableLevel(i *int) *DepartmentUpdateOne {
	if i != nil {
		duo.SetLevel(*i)
	}
	return duo
}

// AddLevel adds i to the "level" field.
func (duo *DepartmentUpdateOne) AddLevel(i int) *DepartmentUpdateOne {
	duo.mutation.AddLevel(i)
	return duo
}

// SetDescription sets the "description" field.
func (duo *DepartmentUpdateOne) SetDescription(s string) *DepartmentUpdateOne {
	duo.mutation.SetDescription(s)
	return duo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillableDescription(s *string) *DepartmentUpdateOne {
	if s != nil {
		duo.SetDescription(*s)
	}
	return duo
}

// SetParentID sets the "parent_id" field.
func (duo *DepartmentUpdateOne) SetParentID(i int64) *DepartmentUpdateOne {
	duo.mutation.SetParentID(i)
	return duo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillableParentID(i *int64) *DepartmentUpdateOne {
	if i != nil {
		duo.SetParentID(*i)
	}
	return duo
}

// ClearParentID clears the value of the "parent_id" field.
func (duo *DepartmentUpdateOne) ClearParentID() *DepartmentUpdateOne {
	duo.mutation.ClearParentID()
	return duo
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (duo *DepartmentUpdateOne) AddUserIDs(ids ...int64) *DepartmentUpdateOne {
	duo.mutation.AddUserIDs(ids...)
	return duo
}

// AddUsers adds the "users" edges to the User entity.
func (duo *DepartmentUpdateOne) AddUsers(u ...*User) *DepartmentUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return duo.AddUserIDs(ids...)
}

// AddPositionIDs adds the "positions" edge to the Position entity by IDs.
func (duo *DepartmentUpdateOne) AddPositionIDs(ids ...int64) *DepartmentUpdateOne {
	duo.mutation.AddPositionIDs(ids...)
	return duo
}

// AddPositions adds the "positions" edges to the Position entity.
func (duo *DepartmentUpdateOne) AddPositions(p ...*Position) *DepartmentUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return duo.AddPositionIDs(ids...)
}

// AddChildIDs adds the "children" edge to the Department entity by IDs.
func (duo *DepartmentUpdateOne) AddChildIDs(ids ...int64) *DepartmentUpdateOne {
	duo.mutation.AddChildIDs(ids...)
	return duo
}

// AddChildren adds the "children" edges to the Department entity.
func (duo *DepartmentUpdateOne) AddChildren(d ...*Department) *DepartmentUpdateOne {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.AddChildIDs(ids...)
}

// SetParent sets the "parent" edge to the Department entity.
func (duo *DepartmentUpdateOne) SetParent(d *Department) *DepartmentUpdateOne {
	return duo.SetParentID(d.ID)
}

// AddUserDepartmentIDs adds the "user_departments" edge to the UserDepartment entity by IDs.
func (duo *DepartmentUpdateOne) AddUserDepartmentIDs(ids ...int64) *DepartmentUpdateOne {
	duo.mutation.AddUserDepartmentIDs(ids...)
	return duo
}

// AddUserDepartments adds the "user_departments" edges to the UserDepartment entity.
func (duo *DepartmentUpdateOne) AddUserDepartments(u ...*UserDepartment) *DepartmentUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return duo.AddUserDepartmentIDs(ids...)
}

// Mutation returns the DepartmentMutation object of the builder.
func (duo *DepartmentUpdateOne) Mutation() *DepartmentMutation {
	return duo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (duo *DepartmentUpdateOne) ClearUsers() *DepartmentUpdateOne {
	duo.mutation.ClearUsers()
	return duo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (duo *DepartmentUpdateOne) RemoveUserIDs(ids ...int64) *DepartmentUpdateOne {
	duo.mutation.RemoveUserIDs(ids...)
	return duo
}

// RemoveUsers removes "users" edges to User entities.
func (duo *DepartmentUpdateOne) RemoveUsers(u ...*User) *DepartmentUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return duo.RemoveUserIDs(ids...)
}

// ClearPositions clears all "positions" edges to the Position entity.
func (duo *DepartmentUpdateOne) ClearPositions() *DepartmentUpdateOne {
	duo.mutation.ClearPositions()
	return duo
}

// RemovePositionIDs removes the "positions" edge to Position entities by IDs.
func (duo *DepartmentUpdateOne) RemovePositionIDs(ids ...int64) *DepartmentUpdateOne {
	duo.mutation.RemovePositionIDs(ids...)
	return duo
}

// RemovePositions removes "positions" edges to Position entities.
func (duo *DepartmentUpdateOne) RemovePositions(p ...*Position) *DepartmentUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return duo.RemovePositionIDs(ids...)
}

// ClearChildren clears all "children" edges to the Department entity.
func (duo *DepartmentUpdateOne) ClearChildren() *DepartmentUpdateOne {
	duo.mutation.ClearChildren()
	return duo
}

// RemoveChildIDs removes the "children" edge to Department entities by IDs.
func (duo *DepartmentUpdateOne) RemoveChildIDs(ids ...int64) *DepartmentUpdateOne {
	duo.mutation.RemoveChildIDs(ids...)
	return duo
}

// RemoveChildren removes "children" edges to Department entities.
func (duo *DepartmentUpdateOne) RemoveChildren(d ...*Department) *DepartmentUpdateOne {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.RemoveChildIDs(ids...)
}

// ClearParent clears the "parent" edge to the Department entity.
func (duo *DepartmentUpdateOne) ClearParent() *DepartmentUpdateOne {
	duo.mutation.ClearParent()
	return duo
}

// ClearUserDepartments clears all "user_departments" edges to the UserDepartment entity.
func (duo *DepartmentUpdateOne) ClearUserDepartments() *DepartmentUpdateOne {
	duo.mutation.ClearUserDepartments()
	return duo
}

// RemoveUserDepartmentIDs removes the "user_departments" edge to UserDepartment entities by IDs.
func (duo *DepartmentUpdateOne) RemoveUserDepartmentIDs(ids ...int64) *DepartmentUpdateOne {
	duo.mutation.RemoveUserDepartmentIDs(ids...)
	return duo
}

// RemoveUserDepartments removes "user_departments" edges to UserDepartment entities.
func (duo *DepartmentUpdateOne) RemoveUserDepartments(u ...*UserDepartment) *DepartmentUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return duo.RemoveUserDepartmentIDs(ids...)
}

// Where appends a list predicates to the DepartmentUpdate builder.
func (duo *DepartmentUpdateOne) Where(ps ...predicate.Department) *DepartmentUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DepartmentUpdateOne) Select(field string, fields ...string) *DepartmentUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Department entity.
func (duo *DepartmentUpdateOne) Save(ctx context.Context) (*Department, error) {
	duo.defaults()
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DepartmentUpdateOne) SaveX(ctx context.Context) *Department {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DepartmentUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DepartmentUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DepartmentUpdateOne) defaults() {
	if _, ok := duo.mutation.UpdateTime(); !ok {
		v := department.UpdateDefaultUpdateTime()
		duo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DepartmentUpdateOne) check() error {
	if v, ok := duo.mutation.Keyword(); ok {
		if err := department.KeywordValidator(v); err != nil {
			return &ValidationError{Name: "keyword", err: fmt.Errorf(`ent: validator failed for field "Department.keyword": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Name(); ok {
		if err := department.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Department.name": %w`, err)}
		}
	}
	if v, ok := duo.mutation.TreePath(); ok {
		if err := department.TreePathValidator(v); err != nil {
			return &ValidationError{Name: "tree_path", err: fmt.Errorf(`ent: validator failed for field "Department.tree_path": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Description(); ok {
		if err := department.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Department.description": %w`, err)}
		}
	}
	if v, ok := duo.mutation.ParentID(); ok {
		if err := department.ParentIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_id", err: fmt.Errorf(`ent: validator failed for field "Department.parent_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (duo *DepartmentUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DepartmentUpdateOne {
	duo.modifiers = append(duo.modifiers, modifiers...)
	return duo
}

func (duo *DepartmentUpdateOne) sqlSave(ctx context.Context) (_node *Department, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(department.Table, department.Columns, sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Department.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, department.FieldID)
		for _, f := range fields {
			if !department.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != department.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.UpdateTime(); ok {
		_spec.SetField(department.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := duo.mutation.Keyword(); ok {
		_spec.SetField(department.FieldKeyword, field.TypeString, value)
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(department.FieldName, field.TypeString, value)
	}
	if value, ok := duo.mutation.TreePath(); ok {
		_spec.SetField(department.FieldTreePath, field.TypeString, value)
	}
	if value, ok := duo.mutation.Sequence(); ok {
		_spec.SetField(department.FieldSequence, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedSequence(); ok {
		_spec.AddField(department.FieldSequence, field.TypeInt, value)
	}
	if value, ok := duo.mutation.Status(); ok {
		_spec.SetField(department.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := duo.mutation.AddedStatus(); ok {
		_spec.AddField(department.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := duo.mutation.Level(); ok {
		_spec.SetField(department.FieldLevel, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedLevel(); ok {
		_spec.AddField(department.FieldLevel, field.TypeInt, value)
	}
	if value, ok := duo.mutation.Description(); ok {
		_spec.SetField(department.FieldDescription, field.TypeString, value)
	}
	if duo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   department.UsersTable,
			Columns: department.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		createE := &UserDepartmentCreate{config: duo.config, mutation: newUserDepartmentMutation(duo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !duo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   department.UsersTable,
			Columns: department.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserDepartmentCreate{config: duo.config, mutation: newUserDepartmentMutation(duo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   department.UsersTable,
			Columns: department.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserDepartmentCreate{config: duo.config, mutation: newUserDepartmentMutation(duo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.PositionsTable,
			Columns: []string{department.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedPositionsIDs(); len(nodes) > 0 && !duo.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.PositionsTable,
			Columns: []string{department.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.PositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.PositionsTable,
			Columns: []string{department.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.ChildrenTable,
			Columns: []string{department.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !duo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.ChildrenTable,
			Columns: []string{department.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.ChildrenTable,
			Columns: []string{department.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.ParentTable,
			Columns: []string{department.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.ParentTable,
			Columns: []string{department.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.UserDepartmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.UserDepartmentsTable,
			Columns: []string{department.UserDepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdepartment.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedUserDepartmentsIDs(); len(nodes) > 0 && !duo.mutation.UserDepartmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.UserDepartmentsTable,
			Columns: []string{department.UserDepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdepartment.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.UserDepartmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.UserDepartmentsTable,
			Columns: []string{department.UserDepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdepartment.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(duo.modifiers...)
	_node = &Department{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{department.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}

// SetDepartment set the Department
func (du *DepartmentUpdate) SetDepartment(input *Department, fields ...string) *DepartmentUpdate {
	m := du.mutation
	if len(fields) == 0 {
		fields = department.OmitColumns(department.FieldID)
	}
	_ = m.SetFields(input, fields...)
	return du
}

// SetDepartmentWithZero set the Department
func (du *DepartmentUpdate) SetDepartmentWithZero(input *Department, fields ...string) *DepartmentUpdate {
	m := du.mutation
	if len(fields) == 0 {
		fields = department.Columns
	}
	_ = m.SetFieldsWithZero(input, fields...)
	return du
}

// SetDepartment set the Department
func (duo *DepartmentUpdateOne) SetDepartment(input *Department, fields ...string) *DepartmentUpdateOne {
	m := duo.mutation
	if len(fields) == 0 {
		fields = department.OmitColumns(department.FieldID)
	}
	_ = m.SetFields(input, fields...)
	return duo
}

// SetDepartmentWithZero set the Department
func (duo *DepartmentUpdateOne) SetDepartmentWithZero(input *Department, fields ...string) *DepartmentUpdateOne {
	m := duo.mutation
	if len(fields) == 0 {
		fields = department.Columns
	}
	_ = m.SetFieldsWithZero(input, fields...)
	return duo
}

// Omit allows the unselect one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (duo *DepartmentUpdateOne) Omit(fields ...string) *DepartmentUpdateOne {
	omits := make(map[string]struct{}, len(fields))
	for i := range fields {
		omits[fields[i]] = struct{}{}
	}
	duo.fields = []string(nil)
	for _, col := range department.Columns {
		if _, ok := omits[col]; !ok {
			duo.fields = append(duo.fields, col)
		}
	}
	return duo
}
