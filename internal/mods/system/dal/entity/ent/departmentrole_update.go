// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/department"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/departmentrole"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/predicate"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/role"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DepartmentRoleUpdate is the builder for updating DepartmentRole entities.
type DepartmentRoleUpdate struct {
	config
	hooks     []Hook
	mutation  *DepartmentRoleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DepartmentRoleUpdate builder.
func (dru *DepartmentRoleUpdate) Where(ps ...predicate.DepartmentRole) *DepartmentRoleUpdate {
	dru.mutation.Where(ps...)
	return dru
}

// SetDepartmentID sets the "department_id" field.
func (dru *DepartmentRoleUpdate) SetDepartmentID(i int) *DepartmentRoleUpdate {
	dru.mutation.SetDepartmentID(i)
	return dru
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (dru *DepartmentRoleUpdate) SetNillableDepartmentID(i *int) *DepartmentRoleUpdate {
	if i != nil {
		dru.SetDepartmentID(*i)
	}
	return dru
}

// SetRoleID sets the "role_id" field.
func (dru *DepartmentRoleUpdate) SetRoleID(i int) *DepartmentRoleUpdate {
	dru.mutation.SetRoleID(i)
	return dru
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (dru *DepartmentRoleUpdate) SetNillableRoleID(i *int) *DepartmentRoleUpdate {
	if i != nil {
		dru.SetRoleID(*i)
	}
	return dru
}

// SetDepartment sets the "department" edge to the Department entity.
func (dru *DepartmentRoleUpdate) SetDepartment(d *Department) *DepartmentRoleUpdate {
	return dru.SetDepartmentID(d.ID)
}

// SetRole sets the "role" edge to the Role entity.
func (dru *DepartmentRoleUpdate) SetRole(r *Role) *DepartmentRoleUpdate {
	return dru.SetRoleID(r.ID)
}

// Mutation returns the DepartmentRoleMutation object of the builder.
func (dru *DepartmentRoleUpdate) Mutation() *DepartmentRoleMutation {
	return dru.mutation
}

// ClearDepartment clears the "department" edge to the Department entity.
func (dru *DepartmentRoleUpdate) ClearDepartment() *DepartmentRoleUpdate {
	dru.mutation.ClearDepartment()
	return dru
}

// ClearRole clears the "role" edge to the Role entity.
func (dru *DepartmentRoleUpdate) ClearRole() *DepartmentRoleUpdate {
	dru.mutation.ClearRole()
	return dru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dru *DepartmentRoleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dru.sqlSave, dru.mutation, dru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dru *DepartmentRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := dru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dru *DepartmentRoleUpdate) Exec(ctx context.Context) error {
	_, err := dru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dru *DepartmentRoleUpdate) ExecX(ctx context.Context) {
	if err := dru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dru *DepartmentRoleUpdate) check() error {
	if v, ok := dru.mutation.DepartmentID(); ok {
		if err := departmentrole.DepartmentIDValidator(v); err != nil {
			return &ValidationError{Name: "department_id", err: fmt.Errorf(`ent: validator failed for field "DepartmentRole.department_id": %w`, err)}
		}
	}
	if v, ok := dru.mutation.RoleID(); ok {
		if err := departmentrole.RoleIDValidator(v); err != nil {
			return &ValidationError{Name: "role_id", err: fmt.Errorf(`ent: validator failed for field "DepartmentRole.role_id": %w`, err)}
		}
	}
	if dru.mutation.DepartmentCleared() && len(dru.mutation.DepartmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DepartmentRole.department"`)
	}
	if dru.mutation.RoleCleared() && len(dru.mutation.RoleIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DepartmentRole.role"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (dru *DepartmentRoleUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DepartmentRoleUpdate {
	dru.modifiers = append(dru.modifiers, modifiers...)
	return dru
}

func (dru *DepartmentRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(departmentrole.Table, departmentrole.Columns, sqlgraph.NewFieldSpec(departmentrole.FieldID, field.TypeInt))
	if ps := dru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if dru.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   departmentrole.DepartmentTable,
			Columns: []string{departmentrole.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   departmentrole.DepartmentTable,
			Columns: []string{departmentrole.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dru.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   departmentrole.RoleTable,
			Columns: []string{departmentrole.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   departmentrole.RoleTable,
			Columns: []string{departmentrole.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(dru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, dru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{departmentrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dru.mutation.done = true
	return n, nil
}

// DepartmentRoleUpdateOne is the builder for updating a single DepartmentRole entity.
type DepartmentRoleUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DepartmentRoleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDepartmentID sets the "department_id" field.
func (druo *DepartmentRoleUpdateOne) SetDepartmentID(i int) *DepartmentRoleUpdateOne {
	druo.mutation.SetDepartmentID(i)
	return druo
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (druo *DepartmentRoleUpdateOne) SetNillableDepartmentID(i *int) *DepartmentRoleUpdateOne {
	if i != nil {
		druo.SetDepartmentID(*i)
	}
	return druo
}

// SetRoleID sets the "role_id" field.
func (druo *DepartmentRoleUpdateOne) SetRoleID(i int) *DepartmentRoleUpdateOne {
	druo.mutation.SetRoleID(i)
	return druo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (druo *DepartmentRoleUpdateOne) SetNillableRoleID(i *int) *DepartmentRoleUpdateOne {
	if i != nil {
		druo.SetRoleID(*i)
	}
	return druo
}

// SetDepartment sets the "department" edge to the Department entity.
func (druo *DepartmentRoleUpdateOne) SetDepartment(d *Department) *DepartmentRoleUpdateOne {
	return druo.SetDepartmentID(d.ID)
}

// SetRole sets the "role" edge to the Role entity.
func (druo *DepartmentRoleUpdateOne) SetRole(r *Role) *DepartmentRoleUpdateOne {
	return druo.SetRoleID(r.ID)
}

// Mutation returns the DepartmentRoleMutation object of the builder.
func (druo *DepartmentRoleUpdateOne) Mutation() *DepartmentRoleMutation {
	return druo.mutation
}

// ClearDepartment clears the "department" edge to the Department entity.
func (druo *DepartmentRoleUpdateOne) ClearDepartment() *DepartmentRoleUpdateOne {
	druo.mutation.ClearDepartment()
	return druo
}

// ClearRole clears the "role" edge to the Role entity.
func (druo *DepartmentRoleUpdateOne) ClearRole() *DepartmentRoleUpdateOne {
	druo.mutation.ClearRole()
	return druo
}

// Where appends a list predicates to the DepartmentRoleUpdate builder.
func (druo *DepartmentRoleUpdateOne) Where(ps ...predicate.DepartmentRole) *DepartmentRoleUpdateOne {
	druo.mutation.Where(ps...)
	return druo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (druo *DepartmentRoleUpdateOne) Select(field string, fields ...string) *DepartmentRoleUpdateOne {
	druo.fields = append([]string{field}, fields...)
	return druo
}

// Save executes the query and returns the updated DepartmentRole entity.
func (druo *DepartmentRoleUpdateOne) Save(ctx context.Context) (*DepartmentRole, error) {
	return withHooks(ctx, druo.sqlSave, druo.mutation, druo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (druo *DepartmentRoleUpdateOne) SaveX(ctx context.Context) *DepartmentRole {
	node, err := druo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (druo *DepartmentRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := druo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (druo *DepartmentRoleUpdateOne) ExecX(ctx context.Context) {
	if err := druo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (druo *DepartmentRoleUpdateOne) check() error {
	if v, ok := druo.mutation.DepartmentID(); ok {
		if err := departmentrole.DepartmentIDValidator(v); err != nil {
			return &ValidationError{Name: "department_id", err: fmt.Errorf(`ent: validator failed for field "DepartmentRole.department_id": %w`, err)}
		}
	}
	if v, ok := druo.mutation.RoleID(); ok {
		if err := departmentrole.RoleIDValidator(v); err != nil {
			return &ValidationError{Name: "role_id", err: fmt.Errorf(`ent: validator failed for field "DepartmentRole.role_id": %w`, err)}
		}
	}
	if druo.mutation.DepartmentCleared() && len(druo.mutation.DepartmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DepartmentRole.department"`)
	}
	if druo.mutation.RoleCleared() && len(druo.mutation.RoleIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DepartmentRole.role"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (druo *DepartmentRoleUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DepartmentRoleUpdateOne {
	druo.modifiers = append(druo.modifiers, modifiers...)
	return druo
}

func (druo *DepartmentRoleUpdateOne) sqlSave(ctx context.Context) (_node *DepartmentRole, err error) {
	if err := druo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(departmentrole.Table, departmentrole.Columns, sqlgraph.NewFieldSpec(departmentrole.FieldID, field.TypeInt))
	id, ok := druo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DepartmentRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := druo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, departmentrole.FieldID)
		for _, f := range fields {
			if !departmentrole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != departmentrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := druo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if druo.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   departmentrole.DepartmentTable,
			Columns: []string{departmentrole.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   departmentrole.DepartmentTable,
			Columns: []string{departmentrole.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if druo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   departmentrole.RoleTable,
			Columns: []string{departmentrole.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   departmentrole.RoleTable,
			Columns: []string{departmentrole.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(druo.modifiers...)
	_node = &DepartmentRole{config: druo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, druo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{departmentrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	druo.mutation.done = true
	return _node, nil
}

// SetDepartmentRole set the DepartmentRole
func (dru *DepartmentRoleUpdate) SetDepartmentRole(input *DepartmentRole, fields ...string) *DepartmentRoleUpdate {
	m := dru.mutation
	if len(fields) == 0 {
		fields = departmentrole.OmitColumns(departmentrole.FieldID)
	}
	_ = m.SetFields(input, fields...)
	return dru
}

// SetDepartmentRoleWithZero set the DepartmentRole
func (dru *DepartmentRoleUpdate) SetDepartmentRoleWithZero(input *DepartmentRole, fields ...string) *DepartmentRoleUpdate {
	m := dru.mutation
	if len(fields) == 0 {
		fields = departmentrole.Columns
	}
	_ = m.SetFieldsWithZero(input, fields...)
	return dru
}

// SetDepartmentRole set the DepartmentRole
func (druo *DepartmentRoleUpdateOne) SetDepartmentRole(input *DepartmentRole, fields ...string) *DepartmentRoleUpdateOne {
	m := druo.mutation
	if len(fields) == 0 {
		fields = departmentrole.OmitColumns(departmentrole.FieldID)
	}
	_ = m.SetFields(input, fields...)
	return druo
}

// SetDepartmentRoleWithZero set the DepartmentRole
func (druo *DepartmentRoleUpdateOne) SetDepartmentRoleWithZero(input *DepartmentRole, fields ...string) *DepartmentRoleUpdateOne {
	m := druo.mutation
	if len(fields) == 0 {
		fields = departmentrole.Columns
	}
	_ = m.SetFieldsWithZero(input, fields...)
	return druo
}

// Omit allows the unselect one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (druo *DepartmentRoleUpdateOne) Omit(fields ...string) *DepartmentRoleUpdateOne {
	omits := make(map[string]struct{}, len(fields))
	for i := range fields {
		omits[fields[i]] = struct{}{}
	}
	druo.fields = []string(nil)
	for _, col := range departmentrole.Columns {
		if _, ok := omits[col]; !ok {
			druo.fields = append(druo.fields, col)
		}
	}
	return druo
}
