// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/menu"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/menupermission"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/permission"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MenuPermissionUpdate is the builder for updating MenuPermission entities.
type MenuPermissionUpdate struct {
	config
	hooks     []Hook
	mutation  *MenuPermissionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MenuPermissionUpdate builder.
func (mpu *MenuPermissionUpdate) Where(ps ...predicate.MenuPermission) *MenuPermissionUpdate {
	mpu.mutation.Where(ps...)
	return mpu
}

// SetMenuID sets the "menu_id" field.
func (mpu *MenuPermissionUpdate) SetMenuID(s string) *MenuPermissionUpdate {
	mpu.mutation.SetMenuID(s)
	return mpu
}

// SetNillableMenuID sets the "menu_id" field if the given value is not nil.
func (mpu *MenuPermissionUpdate) SetNillableMenuID(s *string) *MenuPermissionUpdate {
	if s != nil {
		mpu.SetMenuID(*s)
	}
	return mpu
}

// SetPermissionID sets the "permission_id" field.
func (mpu *MenuPermissionUpdate) SetPermissionID(s string) *MenuPermissionUpdate {
	mpu.mutation.SetPermissionID(s)
	return mpu
}

// SetNillablePermissionID sets the "permission_id" field if the given value is not nil.
func (mpu *MenuPermissionUpdate) SetNillablePermissionID(s *string) *MenuPermissionUpdate {
	if s != nil {
		mpu.SetPermissionID(*s)
	}
	return mpu
}

// SetMenu sets the "menu" edge to the Menu entity.
func (mpu *MenuPermissionUpdate) SetMenu(m *Menu) *MenuPermissionUpdate {
	return mpu.SetMenuID(m.ID)
}

// SetPermission sets the "permission" edge to the Permission entity.
func (mpu *MenuPermissionUpdate) SetPermission(p *Permission) *MenuPermissionUpdate {
	return mpu.SetPermissionID(p.ID)
}

// Mutation returns the MenuPermissionMutation object of the builder.
func (mpu *MenuPermissionUpdate) Mutation() *MenuPermissionMutation {
	return mpu.mutation
}

// ClearMenu clears the "menu" edge to the Menu entity.
func (mpu *MenuPermissionUpdate) ClearMenu() *MenuPermissionUpdate {
	mpu.mutation.ClearMenu()
	return mpu
}

// ClearPermission clears the "permission" edge to the Permission entity.
func (mpu *MenuPermissionUpdate) ClearPermission() *MenuPermissionUpdate {
	mpu.mutation.ClearPermission()
	return mpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mpu *MenuPermissionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mpu.sqlSave, mpu.mutation, mpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mpu *MenuPermissionUpdate) SaveX(ctx context.Context) int {
	affected, err := mpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mpu *MenuPermissionUpdate) Exec(ctx context.Context) error {
	_, err := mpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpu *MenuPermissionUpdate) ExecX(ctx context.Context) {
	if err := mpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpu *MenuPermissionUpdate) check() error {
	if v, ok := mpu.mutation.MenuID(); ok {
		if err := menupermission.MenuIDValidator(v); err != nil {
			return &ValidationError{Name: "menu_id", err: fmt.Errorf(`ent: validator failed for field "MenuPermission.menu_id": %w`, err)}
		}
	}
	if v, ok := mpu.mutation.PermissionID(); ok {
		if err := menupermission.PermissionIDValidator(v); err != nil {
			return &ValidationError{Name: "permission_id", err: fmt.Errorf(`ent: validator failed for field "MenuPermission.permission_id": %w`, err)}
		}
	}
	if mpu.mutation.MenuCleared() && len(mpu.mutation.MenuIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MenuPermission.menu"`)
	}
	if mpu.mutation.PermissionCleared() && len(mpu.mutation.PermissionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MenuPermission.permission"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mpu *MenuPermissionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MenuPermissionUpdate {
	mpu.modifiers = append(mpu.modifiers, modifiers...)
	return mpu
}

func (mpu *MenuPermissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(menupermission.Table, menupermission.Columns, sqlgraph.NewFieldSpec(menupermission.FieldID, field.TypeInt))
	if ps := mpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mpu.mutation.MenuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   menupermission.MenuTable,
			Columns: []string{menupermission.MenuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpu.mutation.MenuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   menupermission.MenuTable,
			Columns: []string{menupermission.MenuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpu.mutation.PermissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   menupermission.PermissionTable,
			Columns: []string{menupermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpu.mutation.PermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   menupermission.PermissionTable,
			Columns: []string{menupermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(mpu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menupermission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mpu.mutation.done = true
	return n, nil
}

// MenuPermissionUpdateOne is the builder for updating a single MenuPermission entity.
type MenuPermissionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MenuPermissionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetMenuID sets the "menu_id" field.
func (mpuo *MenuPermissionUpdateOne) SetMenuID(s string) *MenuPermissionUpdateOne {
	mpuo.mutation.SetMenuID(s)
	return mpuo
}

// SetNillableMenuID sets the "menu_id" field if the given value is not nil.
func (mpuo *MenuPermissionUpdateOne) SetNillableMenuID(s *string) *MenuPermissionUpdateOne {
	if s != nil {
		mpuo.SetMenuID(*s)
	}
	return mpuo
}

// SetPermissionID sets the "permission_id" field.
func (mpuo *MenuPermissionUpdateOne) SetPermissionID(s string) *MenuPermissionUpdateOne {
	mpuo.mutation.SetPermissionID(s)
	return mpuo
}

// SetNillablePermissionID sets the "permission_id" field if the given value is not nil.
func (mpuo *MenuPermissionUpdateOne) SetNillablePermissionID(s *string) *MenuPermissionUpdateOne {
	if s != nil {
		mpuo.SetPermissionID(*s)
	}
	return mpuo
}

// SetMenu sets the "menu" edge to the Menu entity.
func (mpuo *MenuPermissionUpdateOne) SetMenu(m *Menu) *MenuPermissionUpdateOne {
	return mpuo.SetMenuID(m.ID)
}

// SetPermission sets the "permission" edge to the Permission entity.
func (mpuo *MenuPermissionUpdateOne) SetPermission(p *Permission) *MenuPermissionUpdateOne {
	return mpuo.SetPermissionID(p.ID)
}

// Mutation returns the MenuPermissionMutation object of the builder.
func (mpuo *MenuPermissionUpdateOne) Mutation() *MenuPermissionMutation {
	return mpuo.mutation
}

// ClearMenu clears the "menu" edge to the Menu entity.
func (mpuo *MenuPermissionUpdateOne) ClearMenu() *MenuPermissionUpdateOne {
	mpuo.mutation.ClearMenu()
	return mpuo
}

// ClearPermission clears the "permission" edge to the Permission entity.
func (mpuo *MenuPermissionUpdateOne) ClearPermission() *MenuPermissionUpdateOne {
	mpuo.mutation.ClearPermission()
	return mpuo
}

// Where appends a list predicates to the MenuPermissionUpdate builder.
func (mpuo *MenuPermissionUpdateOne) Where(ps ...predicate.MenuPermission) *MenuPermissionUpdateOne {
	mpuo.mutation.Where(ps...)
	return mpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mpuo *MenuPermissionUpdateOne) Select(field string, fields ...string) *MenuPermissionUpdateOne {
	mpuo.fields = append([]string{field}, fields...)
	return mpuo
}

// Save executes the query and returns the updated MenuPermission entity.
func (mpuo *MenuPermissionUpdateOne) Save(ctx context.Context) (*MenuPermission, error) {
	return withHooks(ctx, mpuo.sqlSave, mpuo.mutation, mpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mpuo *MenuPermissionUpdateOne) SaveX(ctx context.Context) *MenuPermission {
	node, err := mpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mpuo *MenuPermissionUpdateOne) Exec(ctx context.Context) error {
	_, err := mpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpuo *MenuPermissionUpdateOne) ExecX(ctx context.Context) {
	if err := mpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpuo *MenuPermissionUpdateOne) check() error {
	if v, ok := mpuo.mutation.MenuID(); ok {
		if err := menupermission.MenuIDValidator(v); err != nil {
			return &ValidationError{Name: "menu_id", err: fmt.Errorf(`ent: validator failed for field "MenuPermission.menu_id": %w`, err)}
		}
	}
	if v, ok := mpuo.mutation.PermissionID(); ok {
		if err := menupermission.PermissionIDValidator(v); err != nil {
			return &ValidationError{Name: "permission_id", err: fmt.Errorf(`ent: validator failed for field "MenuPermission.permission_id": %w`, err)}
		}
	}
	if mpuo.mutation.MenuCleared() && len(mpuo.mutation.MenuIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MenuPermission.menu"`)
	}
	if mpuo.mutation.PermissionCleared() && len(mpuo.mutation.PermissionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MenuPermission.permission"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mpuo *MenuPermissionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MenuPermissionUpdateOne {
	mpuo.modifiers = append(mpuo.modifiers, modifiers...)
	return mpuo
}

func (mpuo *MenuPermissionUpdateOne) sqlSave(ctx context.Context) (_node *MenuPermission, err error) {
	if err := mpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(menupermission.Table, menupermission.Columns, sqlgraph.NewFieldSpec(menupermission.FieldID, field.TypeInt))
	id, ok := mpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MenuPermission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, menupermission.FieldID)
		for _, f := range fields {
			if !menupermission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != menupermission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mpuo.mutation.MenuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   menupermission.MenuTable,
			Columns: []string{menupermission.MenuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpuo.mutation.MenuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   menupermission.MenuTable,
			Columns: []string{menupermission.MenuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpuo.mutation.PermissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   menupermission.PermissionTable,
			Columns: []string{menupermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpuo.mutation.PermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   menupermission.PermissionTable,
			Columns: []string{menupermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(mpuo.modifiers...)
	_node = &MenuPermission{config: mpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menupermission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mpuo.mutation.done = true
	return _node, nil
}

// SetMenuPermission set the MenuPermission
func (mpu *MenuPermissionUpdate) SetMenuPermission(input *MenuPermission, fields ...string) *MenuPermissionUpdate {
	m := mpu.mutation
	if len(fields) == 0 {
		fields = menupermission.OmitColumns(menupermission.FieldID)
	}
	_ = m.SetFields(input, fields...)
	return mpu
}

// SetMenuPermissionWithZero set the MenuPermission
func (mpu *MenuPermissionUpdate) SetMenuPermissionWithZero(input *MenuPermission, fields ...string) *MenuPermissionUpdate {
	m := mpu.mutation
	if len(fields) == 0 {
		fields = menupermission.Columns
	}
	_ = m.SetFieldsWithZero(input, fields...)
	return mpu
}

// SetMenuPermission set the MenuPermission
func (mpuo *MenuPermissionUpdateOne) SetMenuPermission(input *MenuPermission, fields ...string) *MenuPermissionUpdateOne {
	m := mpuo.mutation
	if len(fields) == 0 {
		fields = menupermission.OmitColumns(menupermission.FieldID)
	}
	_ = m.SetFields(input, fields...)
	return mpuo
}

// SetMenuPermissionWithZero set the MenuPermission
func (mpuo *MenuPermissionUpdateOne) SetMenuPermissionWithZero(input *MenuPermission, fields ...string) *MenuPermissionUpdateOne {
	m := mpuo.mutation
	if len(fields) == 0 {
		fields = menupermission.Columns
	}
	_ = m.SetFieldsWithZero(input, fields...)
	return mpuo
}

// Omit allows the unselect one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (mpuo *MenuPermissionUpdateOne) Omit(fields ...string) *MenuPermissionUpdateOne {
	omits := make(map[string]struct{}, len(fields))
	for i := range fields {
		omits[fields[i]] = struct{}{}
	}
	mpuo.fields = []string(nil)
	for _, col := range menupermission.Columns {
		if _, ok := omits[col]; !ok {
			mpuo.fields = append(mpuo.fields, col)
		}
	}
	return mpuo
}
