// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/department"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/departmentrole"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/menu"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/menupermission"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/permission"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/permissionresource"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/position"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/resource"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/role"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/rolemenu"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/rolepermission"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/user"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/userdepartment"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/userposition"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/userrole"
)

// SetFields sets the values of the fields with the given names. It returns an
// error if the field is not defined in the schema, or if the type mismatched the
// field type.
func (m *DepartmentMutation) SetFields(input *Department, fields ...string) error {
	for i := range fields {
		switch fields[i] {
		case department.FieldCreateTime:
			if !input.CreateTime.IsZero() {
				m.SetCreateTime(input.CreateTime)
			}
		case department.FieldUpdateTime:
			if !input.UpdateTime.IsZero() {
				m.SetUpdateTime(input.UpdateTime)
			}
		case department.FieldKeyword:
			// check string with sql.NullString if it is empty
			if input.Keyword != "" {
				m.SetKeyword(input.Keyword)
			}
		case department.FieldName:
			// check string with sql.NullString if it is empty
			if input.Name != "" {
				m.SetName(input.Name)
			}
		case department.FieldDescription:
			// check string with sql.NullString if it is empty
			if input.Description != "" {
				m.SetDescription(input.Description)
			}
		case department.FieldSequence:
			// check int with sql.NullInt64 if it is zero
			if input.Sequence != 0 {
				m.SetSequence(input.Sequence)
			}
		case department.FieldStatus:
			// check int8 with sql.NullInt64 if it is zero
			if input.Status != 0 {
				m.SetStatus(input.Status)
			}
		case department.FieldAncestors:
			// check string with sql.NullString if it is empty
			if input.Ancestors != "" {
				m.SetAncestors(input.Ancestors)
			}
		case department.FieldParentID:
			// check string with sql.NullString if it is empty
			if input.ParentID != "" {
				m.SetParentID(input.ParentID)
			}
		case department.FieldLevel:
			// check int with sql.NullInt64 if it is zero
			if input.Level != 0 {
				m.SetLevel(input.Level)
			}
		case department.FieldID:
			// check string with sql.NullString if it is empty
			if input.ID != "" {
				m.SetID(input.ID)
			}
		default:
			return fmt.Errorf("unknown Department field %s", fields[i])
		}
	}
	return nil
}

// SetFieldsWithZero sets the values of the fields with the given names. It returns an
// error if the field is not defined in the schema, or if the type mismatched the
// field type.
func (m *DepartmentMutation) SetFieldsWithZero(input *Department, fields ...string) error {
	for i := range fields {
		switch fields[i] {
		case department.FieldCreateTime:
			m.SetCreateTime(input.CreateTime)
		case department.FieldUpdateTime:
			m.SetUpdateTime(input.UpdateTime)
		case department.FieldKeyword:
			m.SetKeyword(input.Keyword)
		case department.FieldName:
			m.SetName(input.Name)
		case department.FieldDescription:
			m.SetDescription(input.Description)
		case department.FieldSequence:
			m.SetSequence(input.Sequence)
		case department.FieldStatus:
			m.SetStatus(input.Status)
		case department.FieldAncestors:
			m.SetAncestors(input.Ancestors)
		case department.FieldParentID:
			m.SetParentID(input.ParentID)
		case department.FieldLevel:
			m.SetLevel(input.Level)
		case department.FieldID:
			m.SetID(input.ID)
		default:
			return fmt.Errorf("unknown Department field %s", fields[i])
		}
	}
	return nil
}

// SetFields sets the values of the fields with the given names. It returns an
// error if the field is not defined in the schema, or if the type mismatched the
// field type.
func (m *DepartmentRoleMutation) SetFields(input *DepartmentRole, fields ...string) error {
	for i := range fields {
		switch fields[i] {
		case departmentrole.FieldDepartmentID:
			// check string with sql.NullString if it is empty
			if input.DepartmentID != "" {
				m.SetDepartmentID(input.DepartmentID)
			}
		case departmentrole.FieldRoleID:
			// check string with sql.NullString if it is empty
			if input.RoleID != "" {
				m.SetRoleID(input.RoleID)
			}
		case departmentrole.FieldID:
			// check int with sql.NullInt64 if it is zero
			if input.ID != 0 {
				m.SetID(input.ID)
			}
		default:
			return fmt.Errorf("unknown DepartmentRole field %s", fields[i])
		}
	}
	return nil
}

// SetFieldsWithZero sets the values of the fields with the given names. It returns an
// error if the field is not defined in the schema, or if the type mismatched the
// field type.
func (m *DepartmentRoleMutation) SetFieldsWithZero(input *DepartmentRole, fields ...string) error {
	for i := range fields {
		switch fields[i] {
		case departmentrole.FieldDepartmentID:
			m.SetDepartmentID(input.DepartmentID)
		case departmentrole.FieldRoleID:
			m.SetRoleID(input.RoleID)
		case departmentrole.FieldID:
			m.SetID(input.ID)
		default:
			return fmt.Errorf("unknown DepartmentRole field %s", fields[i])
		}
	}
	return nil
}

// SetFields sets the values of the fields with the given names. It returns an
// error if the field is not defined in the schema, or if the type mismatched the
// field type.
func (m *MenuMutation) SetFields(input *Menu, fields ...string) error {
	for i := range fields {
		switch fields[i] {
		case menu.FieldCreateTime:
			if !input.CreateTime.IsZero() {
				m.SetCreateTime(input.CreateTime)
			}
		case menu.FieldUpdateTime:
			if !input.UpdateTime.IsZero() {
				m.SetUpdateTime(input.UpdateTime)
			}
		case menu.FieldKeyword:
			// check string with sql.NullString if it is empty
			if input.Keyword != "" {
				m.SetKeyword(input.Keyword)
			}
		case menu.FieldName:
			// check string with sql.NullString if it is empty
			if input.Name != "" {
				m.SetName(input.Name)
			}
		case menu.FieldI18nKey:
			// check string with sql.NullString if it is empty
			if input.I18nKey != "" {
				m.SetI18nKey(input.I18nKey)
			}
		case menu.FieldDescription:
			// check string with sql.NullString if it is empty
			if input.Description != "" {
				m.SetDescription(input.Description)
			}
		case menu.FieldType:
			// check string with sql.NullString if it is empty
			if input.Type != "" {
				m.SetType(input.Type)
			}
		case menu.FieldIcon:
			// check string with sql.NullString if it is empty
			if input.Icon != "" {
				m.SetIcon(input.Icon)
			}
		case menu.FieldPath:
			// check string with sql.NullString if it is empty
			if input.Path != "" {
				m.SetPath(input.Path)
			}
		case menu.FieldStatus:
			// check int8 with sql.NullInt64 if it is zero
			if input.Status != 0 {
				m.SetStatus(input.Status)
			}
		case menu.FieldParentPath:
			// check string with sql.NullString if it is empty
			if input.ParentPath != "" {
				m.SetParentPath(input.ParentPath)
			}
		case menu.FieldSequence:
			// check int with sql.NullInt64 if it is zero
			if input.Sequence != 0 {
				m.SetSequence(input.Sequence)
			}
		case menu.FieldProperties:
			// check string with sql.NullString if it is empty
			if input.Properties != "" {
				m.SetProperties(input.Properties)
			}
		case menu.FieldParentID:
			// check string with sql.NullString if it is empty
			if input.ParentID != "" {
				m.SetParentID(input.ParentID)
			}
		case menu.FieldID:
			// check string with sql.NullString if it is empty
			if input.ID != "" {
				m.SetID(input.ID)
			}
		default:
			return fmt.Errorf("unknown Menu field %s", fields[i])
		}
	}
	return nil
}

// SetFieldsWithZero sets the values of the fields with the given names. It returns an
// error if the field is not defined in the schema, or if the type mismatched the
// field type.
func (m *MenuMutation) SetFieldsWithZero(input *Menu, fields ...string) error {
	for i := range fields {
		switch fields[i] {
		case menu.FieldCreateTime:
			m.SetCreateTime(input.CreateTime)
		case menu.FieldUpdateTime:
			m.SetUpdateTime(input.UpdateTime)
		case menu.FieldKeyword:
			m.SetKeyword(input.Keyword)
		case menu.FieldName:
			m.SetName(input.Name)
		case menu.FieldI18nKey:
			m.SetI18nKey(input.I18nKey)
		case menu.FieldDescription:
			m.SetDescription(input.Description)
		case menu.FieldType:
			m.SetType(input.Type)
		case menu.FieldIcon:
			m.SetIcon(input.Icon)
		case menu.FieldPath:
			m.SetPath(input.Path)
		case menu.FieldStatus:
			m.SetStatus(input.Status)
		case menu.FieldParentPath:
			m.SetParentPath(input.ParentPath)
		case menu.FieldSequence:
			m.SetSequence(input.Sequence)
		case menu.FieldProperties:
			m.SetProperties(input.Properties)
		case menu.FieldParentID:
			m.SetParentID(input.ParentID)
		case menu.FieldID:
			m.SetID(input.ID)
		default:
			return fmt.Errorf("unknown Menu field %s", fields[i])
		}
	}
	return nil
}

// SetFields sets the values of the fields with the given names. It returns an
// error if the field is not defined in the schema, or if the type mismatched the
// field type.
func (m *MenuPermissionMutation) SetFields(input *MenuPermission, fields ...string) error {
	for i := range fields {
		switch fields[i] {
		case menupermission.FieldMenuID:
			// check string with sql.NullString if it is empty
			if input.MenuID != "" {
				m.SetMenuID(input.MenuID)
			}
		case menupermission.FieldPermissionID:
			// check string with sql.NullString if it is empty
			if input.PermissionID != "" {
				m.SetPermissionID(input.PermissionID)
			}
		case menupermission.FieldID:
			// check int with sql.NullInt64 if it is zero
			if input.ID != 0 {
				m.SetID(input.ID)
			}
		default:
			return fmt.Errorf("unknown MenuPermission field %s", fields[i])
		}
	}
	return nil
}

// SetFieldsWithZero sets the values of the fields with the given names. It returns an
// error if the field is not defined in the schema, or if the type mismatched the
// field type.
func (m *MenuPermissionMutation) SetFieldsWithZero(input *MenuPermission, fields ...string) error {
	for i := range fields {
		switch fields[i] {
		case menupermission.FieldMenuID:
			m.SetMenuID(input.MenuID)
		case menupermission.FieldPermissionID:
			m.SetPermissionID(input.PermissionID)
		case menupermission.FieldID:
			m.SetID(input.ID)
		default:
			return fmt.Errorf("unknown MenuPermission field %s", fields[i])
		}
	}
	return nil
}

// SetFields sets the values of the fields with the given names. It returns an
// error if the field is not defined in the schema, or if the type mismatched the
// field type.
func (m *PermissionMutation) SetFields(input *Permission, fields ...string) error {
	for i := range fields {
		switch fields[i] {
		case permission.FieldCreateTime:
			if !input.CreateTime.IsZero() {
				m.SetCreateTime(input.CreateTime)
			}
		case permission.FieldUpdateTime:
			if !input.UpdateTime.IsZero() {
				m.SetUpdateTime(input.UpdateTime)
			}
		case permission.FieldName:
			// check string with sql.NullString if it is empty
			if input.Name != "" {
				m.SetName(input.Name)
			}
		case permission.FieldKeyword:
			// check string with sql.NullString if it is empty
			if input.Keyword != "" {
				m.SetKeyword(input.Keyword)
			}
		case permission.FieldDescription:
			// check string with sql.NullString if it is empty
			if input.Description != "" {
				m.SetDescription(input.Description)
			}
		case permission.FieldI18nKey:
			// check string with sql.NullString if it is empty
			if input.I18nKey != "" {
				m.SetI18nKey(input.I18nKey)
			}
		case permission.FieldType:
			// check int8 with sql.NullInt64 if it is zero
			if input.Type != 0 {
				m.SetType(input.Type)
			}
		case permission.FieldScope:
			// check string with sql.NullString if it is empty
			if input.Scope != "" {
				m.SetScope(input.Scope)
			}
		case permission.FieldScopeDepts:
			if len(input.ScopeDepts) > 0 {
				m.SetScopeDepts(input.ScopeDepts)
			}
		case permission.FieldID:
			// check string with sql.NullString if it is empty
			if input.ID != "" {
				m.SetID(input.ID)
			}
		default:
			return fmt.Errorf("unknown Permission field %s", fields[i])
		}
	}
	return nil
}

// SetFieldsWithZero sets the values of the fields with the given names. It returns an
// error if the field is not defined in the schema, or if the type mismatched the
// field type.
func (m *PermissionMutation) SetFieldsWithZero(input *Permission, fields ...string) error {
	for i := range fields {
		switch fields[i] {
		case permission.FieldCreateTime:
			m.SetCreateTime(input.CreateTime)
		case permission.FieldUpdateTime:
			m.SetUpdateTime(input.UpdateTime)
		case permission.FieldName:
			m.SetName(input.Name)
		case permission.FieldKeyword:
			m.SetKeyword(input.Keyword)
		case permission.FieldDescription:
			m.SetDescription(input.Description)
		case permission.FieldI18nKey:
			m.SetI18nKey(input.I18nKey)
		case permission.FieldType:
			m.SetType(input.Type)
		case permission.FieldScope:
			m.SetScope(input.Scope)
		case permission.FieldScopeDepts:
			m.SetScopeDepts(input.ScopeDepts)
		case permission.FieldID:
			m.SetID(input.ID)
		default:
			return fmt.Errorf("unknown Permission field %s", fields[i])
		}
	}
	return nil
}

// SetFields sets the values of the fields with the given names. It returns an
// error if the field is not defined in the schema, or if the type mismatched the
// field type.
func (m *PermissionResourceMutation) SetFields(input *PermissionResource, fields ...string) error {
	for i := range fields {
		switch fields[i] {
		case permissionresource.FieldPermissionID:
			// check string with sql.NullString if it is empty
			if input.PermissionID != "" {
				m.SetPermissionID(input.PermissionID)
			}
		case permissionresource.FieldResourceID:
			// check string with sql.NullString if it is empty
			if input.ResourceID != "" {
				m.SetResourceID(input.ResourceID)
			}
		case permissionresource.FieldID:
			// check int with sql.NullInt64 if it is zero
			if input.ID != 0 {
				m.SetID(input.ID)
			}
		default:
			return fmt.Errorf("unknown PermissionResource field %s", fields[i])
		}
	}
	return nil
}

// SetFieldsWithZero sets the values of the fields with the given names. It returns an
// error if the field is not defined in the schema, or if the type mismatched the
// field type.
func (m *PermissionResourceMutation) SetFieldsWithZero(input *PermissionResource, fields ...string) error {
	for i := range fields {
		switch fields[i] {
		case permissionresource.FieldPermissionID:
			m.SetPermissionID(input.PermissionID)
		case permissionresource.FieldResourceID:
			m.SetResourceID(input.ResourceID)
		case permissionresource.FieldID:
			m.SetID(input.ID)
		default:
			return fmt.Errorf("unknown PermissionResource field %s", fields[i])
		}
	}
	return nil
}

// SetFields sets the values of the fields with the given names. It returns an
// error if the field is not defined in the schema, or if the type mismatched the
// field type.
func (m *PositionMutation) SetFields(input *Position, fields ...string) error {
	for i := range fields {
		switch fields[i] {
		case position.FieldCreateTime:
			if !input.CreateTime.IsZero() {
				m.SetCreateTime(input.CreateTime)
			}
		case position.FieldUpdateTime:
			if !input.UpdateTime.IsZero() {
				m.SetUpdateTime(input.UpdateTime)
			}
		case position.FieldName:
			// check string with sql.NullString if it is empty
			if input.Name != "" {
				m.SetName(input.Name)
			}
		case position.FieldDescription:
			// check string with sql.NullString if it is empty
			if input.Description != "" {
				m.SetDescription(input.Description)
			}
		case position.FieldDepartmentID:
			// check string with sql.NullString if it is empty
			if input.DepartmentID != "" {
				m.SetDepartmentID(input.DepartmentID)
			}
		case position.FieldID:
			// check string with sql.NullString if it is empty
			if input.ID != "" {
				m.SetID(input.ID)
			}
		default:
			return fmt.Errorf("unknown Position field %s", fields[i])
		}
	}
	return nil
}

// SetFieldsWithZero sets the values of the fields with the given names. It returns an
// error if the field is not defined in the schema, or if the type mismatched the
// field type.
func (m *PositionMutation) SetFieldsWithZero(input *Position, fields ...string) error {
	for i := range fields {
		switch fields[i] {
		case position.FieldCreateTime:
			m.SetCreateTime(input.CreateTime)
		case position.FieldUpdateTime:
			m.SetUpdateTime(input.UpdateTime)
		case position.FieldName:
			m.SetName(input.Name)
		case position.FieldDescription:
			m.SetDescription(input.Description)
		case position.FieldDepartmentID:
			m.SetDepartmentID(input.DepartmentID)
		case position.FieldID:
			m.SetID(input.ID)
		default:
			return fmt.Errorf("unknown Position field %s", fields[i])
		}
	}
	return nil
}

// SetFields sets the values of the fields with the given names. It returns an
// error if the field is not defined in the schema, or if the type mismatched the
// field type.
func (m *ResourceMutation) SetFields(input *Resource, fields ...string) error {
	for i := range fields {
		switch fields[i] {
		case resource.FieldCreateTime:
			if !input.CreateTime.IsZero() {
				m.SetCreateTime(input.CreateTime)
			}
		case resource.FieldUpdateTime:
			if !input.UpdateTime.IsZero() {
				m.SetUpdateTime(input.UpdateTime)
			}
		case resource.FieldMethod:
			// check string with sql.NullString if it is empty
			if input.Method != "" {
				m.SetMethod(input.Method)
			}
		case resource.FieldOperation:
			// check string with sql.NullString if it is empty
			if input.Operation != "" {
				m.SetOperation(input.Operation)
			}
		case resource.FieldPath:
			// check string with sql.NullString if it is empty
			if input.Path != "" {
				m.SetPath(input.Path)
			}
		case resource.FieldMenuID:
			// check string with sql.NullString if it is empty
			if input.MenuID != "" {
				m.SetMenuID(input.MenuID)
			}
		case resource.FieldID:
			// check string with sql.NullString if it is empty
			if input.ID != "" {
				m.SetID(input.ID)
			}
		default:
			return fmt.Errorf("unknown Resource field %s", fields[i])
		}
	}
	return nil
}

// SetFieldsWithZero sets the values of the fields with the given names. It returns an
// error if the field is not defined in the schema, or if the type mismatched the
// field type.
func (m *ResourceMutation) SetFieldsWithZero(input *Resource, fields ...string) error {
	for i := range fields {
		switch fields[i] {
		case resource.FieldCreateTime:
			m.SetCreateTime(input.CreateTime)
		case resource.FieldUpdateTime:
			m.SetUpdateTime(input.UpdateTime)
		case resource.FieldMethod:
			m.SetMethod(input.Method)
		case resource.FieldOperation:
			m.SetOperation(input.Operation)
		case resource.FieldPath:
			m.SetPath(input.Path)
		case resource.FieldMenuID:
			m.SetMenuID(input.MenuID)
		case resource.FieldID:
			m.SetID(input.ID)
		default:
			return fmt.Errorf("unknown Resource field %s", fields[i])
		}
	}
	return nil
}

// SetFields sets the values of the fields with the given names. It returns an
// error if the field is not defined in the schema, or if the type mismatched the
// field type.
func (m *RoleMutation) SetFields(input *Role, fields ...string) error {
	for i := range fields {
		switch fields[i] {
		case role.FieldCreateTime:
			if !input.CreateTime.IsZero() {
				m.SetCreateTime(input.CreateTime)
			}
		case role.FieldUpdateTime:
			if !input.UpdateTime.IsZero() {
				m.SetUpdateTime(input.UpdateTime)
			}
		case role.FieldKeyword:
			// check string with sql.NullString if it is empty
			if input.Keyword != "" {
				m.SetKeyword(input.Keyword)
			}
		case role.FieldName:
			// check string with sql.NullString if it is empty
			if input.Name != "" {
				m.SetName(input.Name)
			}
		case role.FieldDescription:
			// check string with sql.NullString if it is empty
			if input.Description != "" {
				m.SetDescription(input.Description)
			}
		case role.FieldType:
			// check int8 with sql.NullInt64 if it is zero
			if input.Type != 0 {
				m.SetType(input.Type)
			}
		case role.FieldSequence:
			// check int with sql.NullInt64 if it is zero
			if input.Sequence != 0 {
				m.SetSequence(input.Sequence)
			}
		case role.FieldStatus:
			// check int8 with sql.NullInt64 if it is zero
			if input.Status != 0 {
				m.SetStatus(input.Status)
			}
		case role.FieldIsSystem:
			if input.IsSystem {
				m.SetIsSystem(input.IsSystem)
			}
		case role.FieldID:
			// check string with sql.NullString if it is empty
			if input.ID != "" {
				m.SetID(input.ID)
			}
		default:
			return fmt.Errorf("unknown Role field %s", fields[i])
		}
	}
	return nil
}

// SetFieldsWithZero sets the values of the fields with the given names. It returns an
// error if the field is not defined in the schema, or if the type mismatched the
// field type.
func (m *RoleMutation) SetFieldsWithZero(input *Role, fields ...string) error {
	for i := range fields {
		switch fields[i] {
		case role.FieldCreateTime:
			m.SetCreateTime(input.CreateTime)
		case role.FieldUpdateTime:
			m.SetUpdateTime(input.UpdateTime)
		case role.FieldKeyword:
			m.SetKeyword(input.Keyword)
		case role.FieldName:
			m.SetName(input.Name)
		case role.FieldDescription:
			m.SetDescription(input.Description)
		case role.FieldType:
			m.SetType(input.Type)
		case role.FieldSequence:
			m.SetSequence(input.Sequence)
		case role.FieldStatus:
			m.SetStatus(input.Status)
		case role.FieldIsSystem:
			m.SetIsSystem(input.IsSystem)
		case role.FieldID:
			m.SetID(input.ID)
		default:
			return fmt.Errorf("unknown Role field %s", fields[i])
		}
	}
	return nil
}

// SetFields sets the values of the fields with the given names. It returns an
// error if the field is not defined in the schema, or if the type mismatched the
// field type.
func (m *RoleMenuMutation) SetFields(input *RoleMenu, fields ...string) error {
	for i := range fields {
		switch fields[i] {
		case rolemenu.FieldRoleID:
			// check string with sql.NullString if it is empty
			if input.RoleID != "" {
				m.SetRoleID(input.RoleID)
			}
		case rolemenu.FieldMenuID:
			// check string with sql.NullString if it is empty
			if input.MenuID != "" {
				m.SetMenuID(input.MenuID)
			}
		case rolemenu.FieldID:
			// check int with sql.NullInt64 if it is zero
			if input.ID != 0 {
				m.SetID(input.ID)
			}
		default:
			return fmt.Errorf("unknown RoleMenu field %s", fields[i])
		}
	}
	return nil
}

// SetFieldsWithZero sets the values of the fields with the given names. It returns an
// error if the field is not defined in the schema, or if the type mismatched the
// field type.
func (m *RoleMenuMutation) SetFieldsWithZero(input *RoleMenu, fields ...string) error {
	for i := range fields {
		switch fields[i] {
		case rolemenu.FieldRoleID:
			m.SetRoleID(input.RoleID)
		case rolemenu.FieldMenuID:
			m.SetMenuID(input.MenuID)
		case rolemenu.FieldID:
			m.SetID(input.ID)
		default:
			return fmt.Errorf("unknown RoleMenu field %s", fields[i])
		}
	}
	return nil
}

// SetFields sets the values of the fields with the given names. It returns an
// error if the field is not defined in the schema, or if the type mismatched the
// field type.
func (m *RolePermissionMutation) SetFields(input *RolePermission, fields ...string) error {
	for i := range fields {
		switch fields[i] {
		case rolepermission.FieldRoleID:
			// check string with sql.NullString if it is empty
			if input.RoleID != "" {
				m.SetRoleID(input.RoleID)
			}
		case rolepermission.FieldPermissionID:
			// check string with sql.NullString if it is empty
			if input.PermissionID != "" {
				m.SetPermissionID(input.PermissionID)
			}
		case rolepermission.FieldID:
			// check int with sql.NullInt64 if it is zero
			if input.ID != 0 {
				m.SetID(input.ID)
			}
		default:
			return fmt.Errorf("unknown RolePermission field %s", fields[i])
		}
	}
	return nil
}

// SetFieldsWithZero sets the values of the fields with the given names. It returns an
// error if the field is not defined in the schema, or if the type mismatched the
// field type.
func (m *RolePermissionMutation) SetFieldsWithZero(input *RolePermission, fields ...string) error {
	for i := range fields {
		switch fields[i] {
		case rolepermission.FieldRoleID:
			m.SetRoleID(input.RoleID)
		case rolepermission.FieldPermissionID:
			m.SetPermissionID(input.PermissionID)
		case rolepermission.FieldID:
			m.SetID(input.ID)
		default:
			return fmt.Errorf("unknown RolePermission field %s", fields[i])
		}
	}
	return nil
}

// SetFields sets the values of the fields with the given names. It returns an
// error if the field is not defined in the schema, or if the type mismatched the
// field type.
func (m *UserMutation) SetFields(input *User, fields ...string) error {
	for i := range fields {
		switch fields[i] {
		case user.FieldCreateAuthor:
			// check string with sql.NullString if it is empty
			if input.CreateAuthor != "" {
				m.SetCreateAuthor(input.CreateAuthor)
			}
		case user.FieldUpdateAuthor:
			// check string with sql.NullString if it is empty
			if input.UpdateAuthor != "" {
				m.SetUpdateAuthor(input.UpdateAuthor)
			}
		case user.FieldCreateTime:
			if !input.CreateTime.IsZero() {
				m.SetCreateTime(input.CreateTime)
			}
		case user.FieldUpdateTime:
			if !input.UpdateTime.IsZero() {
				m.SetUpdateTime(input.UpdateTime)
			}
		case user.FieldUUID:
			// check string with sql.NullString if it is empty
			if input.UUID != "" {
				m.SetUUID(input.UUID)
			}
		case user.FieldAllowedIP:
			// check string with sql.NullString if it is empty
			if input.AllowedIP != "" {
				m.SetAllowedIP(input.AllowedIP)
			}
		case user.FieldUsername:
			// check string with sql.NullString if it is empty
			if input.Username != "" {
				m.SetUsername(input.Username)
			}
		case user.FieldNickname:
			// check string with sql.NullString if it is empty
			if input.Nickname != "" {
				m.SetNickname(input.Nickname)
			}
		case user.FieldAvatar:
			// check string with sql.NullString if it is empty
			if input.Avatar != "" {
				m.SetAvatar(input.Avatar)
			}
		case user.FieldName:
			// check string with sql.NullString if it is empty
			if input.Name != "" {
				m.SetName(input.Name)
			}
		case user.FieldGender:
			// check string with sql.NullString if it is empty
			if input.Gender != "" {
				m.SetGender(input.Gender)
			}
		case user.FieldPassword:
			// check string with sql.NullString if it is empty
			if input.Password != "" {
				m.SetPassword(input.Password)
			}
		case user.FieldSalt:
			// check string with sql.NullString if it is empty
			if input.Salt != "" {
				m.SetSalt(input.Salt)
			}
		case user.FieldPhone:
			// check string with sql.NullString if it is empty
			if input.Phone != "" {
				m.SetPhone(input.Phone)
			}
		case user.FieldEmail:
			// check string with sql.NullString if it is empty
			if input.Email != "" {
				m.SetEmail(input.Email)
			}
		case user.FieldRemark:
			// check string with sql.NullString if it is empty
			if input.Remark != "" {
				m.SetRemark(input.Remark)
			}
		case user.FieldToken:
			// check string with sql.NullString if it is empty
			if input.Token != "" {
				m.SetToken(input.Token)
			}
		case user.FieldStatus:
			// check int8 with sql.NullInt64 if it is zero
			if input.Status != 0 {
				m.SetStatus(input.Status)
			}
		case user.FieldLastLoginIP:
			// check string with sql.NullString if it is empty
			if input.LastLoginIP != "" {
				m.SetLastLoginIP(input.LastLoginIP)
			}
		case user.FieldLastLoginTime:
			if !input.LastLoginTime.IsZero() {
				m.SetLastLoginTime(input.LastLoginTime)
			}
		case user.FieldSanctionDate:
			if !input.SanctionDate.IsZero() {
				m.SetSanctionDate(input.SanctionDate)
			}
		case user.FieldManagerID:
			// check string with sql.NullString if it is empty
			if input.ManagerID != "" {
				m.SetManagerID(input.ManagerID)
			}
		case user.FieldManager:
			// check string with sql.NullString if it is empty
			if input.Manager != "" {
				m.SetManager(input.Manager)
			}
		case user.FieldID:
			// check string with sql.NullString if it is empty
			if input.ID != "" {
				m.SetID(input.ID)
			}
		default:
			return fmt.Errorf("unknown User field %s", fields[i])
		}
	}
	return nil
}

// SetFieldsWithZero sets the values of the fields with the given names. It returns an
// error if the field is not defined in the schema, or if the type mismatched the
// field type.
func (m *UserMutation) SetFieldsWithZero(input *User, fields ...string) error {
	for i := range fields {
		switch fields[i] {
		case user.FieldCreateAuthor:
			m.SetCreateAuthor(input.CreateAuthor)
		case user.FieldUpdateAuthor:
			m.SetUpdateAuthor(input.UpdateAuthor)
		case user.FieldCreateTime:
			m.SetCreateTime(input.CreateTime)
		case user.FieldUpdateTime:
			m.SetUpdateTime(input.UpdateTime)
		case user.FieldUUID:
			m.SetUUID(input.UUID)
		case user.FieldAllowedIP:
			m.SetAllowedIP(input.AllowedIP)
		case user.FieldUsername:
			m.SetUsername(input.Username)
		case user.FieldNickname:
			m.SetNickname(input.Nickname)
		case user.FieldAvatar:
			m.SetAvatar(input.Avatar)
		case user.FieldName:
			m.SetName(input.Name)
		case user.FieldGender:
			m.SetGender(input.Gender)
		case user.FieldPassword:
			m.SetPassword(input.Password)
		case user.FieldSalt:
			m.SetSalt(input.Salt)
		case user.FieldPhone:
			m.SetPhone(input.Phone)
		case user.FieldEmail:
			m.SetEmail(input.Email)
		case user.FieldRemark:
			m.SetRemark(input.Remark)
		case user.FieldToken:
			m.SetToken(input.Token)
		case user.FieldStatus:
			m.SetStatus(input.Status)
		case user.FieldLastLoginIP:
			m.SetLastLoginIP(input.LastLoginIP)
		case user.FieldLastLoginTime:
			m.SetLastLoginTime(input.LastLoginTime)
		case user.FieldSanctionDate:
			m.SetSanctionDate(input.SanctionDate)
		case user.FieldManagerID:
			m.SetManagerID(input.ManagerID)
		case user.FieldManager:
			m.SetManager(input.Manager)
		case user.FieldID:
			m.SetID(input.ID)
		default:
			return fmt.Errorf("unknown User field %s", fields[i])
		}
	}
	return nil
}

// SetFields sets the values of the fields with the given names. It returns an
// error if the field is not defined in the schema, or if the type mismatched the
// field type.
func (m *UserDepartmentMutation) SetFields(input *UserDepartment, fields ...string) error {
	for i := range fields {
		switch fields[i] {
		case userdepartment.FieldUserID:
			// check string with sql.NullString if it is empty
			if input.UserID != "" {
				m.SetUserID(input.UserID)
			}
		case userdepartment.FieldDepartmentID:
			// check string with sql.NullString if it is empty
			if input.DepartmentID != "" {
				m.SetDepartmentID(input.DepartmentID)
			}
		case userdepartment.FieldID:
			// check int with sql.NullInt64 if it is zero
			if input.ID != 0 {
				m.SetID(input.ID)
			}
		default:
			return fmt.Errorf("unknown UserDepartment field %s", fields[i])
		}
	}
	return nil
}

// SetFieldsWithZero sets the values of the fields with the given names. It returns an
// error if the field is not defined in the schema, or if the type mismatched the
// field type.
func (m *UserDepartmentMutation) SetFieldsWithZero(input *UserDepartment, fields ...string) error {
	for i := range fields {
		switch fields[i] {
		case userdepartment.FieldUserID:
			m.SetUserID(input.UserID)
		case userdepartment.FieldDepartmentID:
			m.SetDepartmentID(input.DepartmentID)
		case userdepartment.FieldID:
			m.SetID(input.ID)
		default:
			return fmt.Errorf("unknown UserDepartment field %s", fields[i])
		}
	}
	return nil
}

// SetFields sets the values of the fields with the given names. It returns an
// error if the field is not defined in the schema, or if the type mismatched the
// field type.
func (m *UserPositionMutation) SetFields(input *UserPosition, fields ...string) error {
	for i := range fields {
		switch fields[i] {
		case userposition.FieldUserID:
			// check string with sql.NullString if it is empty
			if input.UserID != "" {
				m.SetUserID(input.UserID)
			}
		case userposition.FieldPositionID:
			// check string with sql.NullString if it is empty
			if input.PositionID != "" {
				m.SetPositionID(input.PositionID)
			}
		case userposition.FieldID:
			// check int with sql.NullInt64 if it is zero
			if input.ID != 0 {
				m.SetID(input.ID)
			}
		default:
			return fmt.Errorf("unknown UserPosition field %s", fields[i])
		}
	}
	return nil
}

// SetFieldsWithZero sets the values of the fields with the given names. It returns an
// error if the field is not defined in the schema, or if the type mismatched the
// field type.
func (m *UserPositionMutation) SetFieldsWithZero(input *UserPosition, fields ...string) error {
	for i := range fields {
		switch fields[i] {
		case userposition.FieldUserID:
			m.SetUserID(input.UserID)
		case userposition.FieldPositionID:
			m.SetPositionID(input.PositionID)
		case userposition.FieldID:
			m.SetID(input.ID)
		default:
			return fmt.Errorf("unknown UserPosition field %s", fields[i])
		}
	}
	return nil
}

// SetFields sets the values of the fields with the given names. It returns an
// error if the field is not defined in the schema, or if the type mismatched the
// field type.
func (m *UserRoleMutation) SetFields(input *UserRole, fields ...string) error {
	for i := range fields {
		switch fields[i] {
		case userrole.FieldUserID:
			// check string with sql.NullString if it is empty
			if input.UserID != "" {
				m.SetUserID(input.UserID)
			}
		case userrole.FieldRoleID:
			// check string with sql.NullString if it is empty
			if input.RoleID != "" {
				m.SetRoleID(input.RoleID)
			}
		case userrole.FieldID:
			// check int with sql.NullInt64 if it is zero
			if input.ID != 0 {
				m.SetID(input.ID)
			}
		default:
			return fmt.Errorf("unknown UserRole field %s", fields[i])
		}
	}
	return nil
}

// SetFieldsWithZero sets the values of the fields with the given names. It returns an
// error if the field is not defined in the schema, or if the type mismatched the
// field type.
func (m *UserRoleMutation) SetFieldsWithZero(input *UserRole, fields ...string) error {
	for i := range fields {
		switch fields[i] {
		case userrole.FieldUserID:
			m.SetUserID(input.UserID)
		case userrole.FieldRoleID:
			m.SetRoleID(input.RoleID)
		case userrole.FieldID:
			m.SetID(input.ID)
		default:
			return fmt.Errorf("unknown UserRole field %s", fields[i])
		}
	}
	return nil
}
