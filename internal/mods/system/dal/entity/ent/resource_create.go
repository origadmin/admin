// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/permission"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/permissionresource"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/resource"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ResourceCreate is the builder for creating a Resource entity.
type ResourceCreate struct {
	config
	mutation *ResourceMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (rc *ResourceCreate) SetCreateTime(t time.Time) *ResourceCreate {
	rc.mutation.SetCreateTime(t)
	return rc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableCreateTime(t *time.Time) *ResourceCreate {
	if t != nil {
		rc.SetCreateTime(*t)
	}
	return rc
}

// SetUpdateTime sets the "update_time" field.
func (rc *ResourceCreate) SetUpdateTime(t time.Time) *ResourceCreate {
	rc.mutation.SetUpdateTime(t)
	return rc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableUpdateTime(t *time.Time) *ResourceCreate {
	if t != nil {
		rc.SetUpdateTime(*t)
	}
	return rc
}

// SetName sets the "name" field.
func (rc *ResourceCreate) SetName(s string) *ResourceCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableName(s *string) *ResourceCreate {
	if s != nil {
		rc.SetName(*s)
	}
	return rc
}

// SetKeyword sets the "keyword" field.
func (rc *ResourceCreate) SetKeyword(s string) *ResourceCreate {
	rc.mutation.SetKeyword(s)
	return rc
}

// SetI18nKey sets the "i18n_key" field.
func (rc *ResourceCreate) SetI18nKey(s string) *ResourceCreate {
	rc.mutation.SetI18nKey(s)
	return rc
}

// SetNillableI18nKey sets the "i18n_key" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableI18nKey(s *string) *ResourceCreate {
	if s != nil {
		rc.SetI18nKey(*s)
	}
	return rc
}

// SetType sets the "type" field.
func (rc *ResourceCreate) SetType(s string) *ResourceCreate {
	rc.mutation.SetType(s)
	return rc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableType(s *string) *ResourceCreate {
	if s != nil {
		rc.SetType(*s)
	}
	return rc
}

// SetStatus sets the "status" field.
func (rc *ResourceCreate) SetStatus(i int8) *ResourceCreate {
	rc.mutation.SetStatus(i)
	return rc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableStatus(i *int8) *ResourceCreate {
	if i != nil {
		rc.SetStatus(*i)
	}
	return rc
}

// SetPath sets the "path" field.
func (rc *ResourceCreate) SetPath(s string) *ResourceCreate {
	rc.mutation.SetPath(s)
	return rc
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (rc *ResourceCreate) SetNillablePath(s *string) *ResourceCreate {
	if s != nil {
		rc.SetPath(*s)
	}
	return rc
}

// SetOperation sets the "operation" field.
func (rc *ResourceCreate) SetOperation(s string) *ResourceCreate {
	rc.mutation.SetOperation(s)
	return rc
}

// SetNillableOperation sets the "operation" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableOperation(s *string) *ResourceCreate {
	if s != nil {
		rc.SetOperation(*s)
	}
	return rc
}

// SetMethod sets the "method" field.
func (rc *ResourceCreate) SetMethod(s string) *ResourceCreate {
	rc.mutation.SetMethod(s)
	return rc
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableMethod(s *string) *ResourceCreate {
	if s != nil {
		rc.SetMethod(*s)
	}
	return rc
}

// SetComponent sets the "component" field.
func (rc *ResourceCreate) SetComponent(s string) *ResourceCreate {
	rc.mutation.SetComponent(s)
	return rc
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableComponent(s *string) *ResourceCreate {
	if s != nil {
		rc.SetComponent(*s)
	}
	return rc
}

// SetIcon sets the "icon" field.
func (rc *ResourceCreate) SetIcon(s string) *ResourceCreate {
	rc.mutation.SetIcon(s)
	return rc
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableIcon(s *string) *ResourceCreate {
	if s != nil {
		rc.SetIcon(*s)
	}
	return rc
}

// SetSequence sets the "sequence" field.
func (rc *ResourceCreate) SetSequence(i int) *ResourceCreate {
	rc.mutation.SetSequence(i)
	return rc
}

// SetNillableSequence sets the "sequence" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableSequence(i *int) *ResourceCreate {
	if i != nil {
		rc.SetSequence(*i)
	}
	return rc
}

// SetVisible sets the "visible" field.
func (rc *ResourceCreate) SetVisible(b bool) *ResourceCreate {
	rc.mutation.SetVisible(b)
	return rc
}

// SetNillableVisible sets the "visible" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableVisible(b *bool) *ResourceCreate {
	if b != nil {
		rc.SetVisible(*b)
	}
	return rc
}

// SetLevel sets the "level" field.
func (rc *ResourceCreate) SetLevel(i int8) *ResourceCreate {
	rc.mutation.SetLevel(i)
	return rc
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableLevel(i *int8) *ResourceCreate {
	if i != nil {
		rc.SetLevel(*i)
	}
	return rc
}

// SetTreePath sets the "tree_path" field.
func (rc *ResourceCreate) SetTreePath(s string) *ResourceCreate {
	rc.mutation.SetTreePath(s)
	return rc
}

// SetNillableTreePath sets the "tree_path" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableTreePath(s *string) *ResourceCreate {
	if s != nil {
		rc.SetTreePath(*s)
	}
	return rc
}

// SetProperties sets the "properties" field.
func (rc *ResourceCreate) SetProperties(m map[string]string) *ResourceCreate {
	rc.mutation.SetProperties(m)
	return rc
}

// SetDescription sets the "description" field.
func (rc *ResourceCreate) SetDescription(s string) *ResourceCreate {
	rc.mutation.SetDescription(s)
	return rc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableDescription(s *string) *ResourceCreate {
	if s != nil {
		rc.SetDescription(*s)
	}
	return rc
}

// SetParentID sets the "parent_id" field.
func (rc *ResourceCreate) SetParentID(i int64) *ResourceCreate {
	rc.mutation.SetParentID(i)
	return rc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableParentID(i *int64) *ResourceCreate {
	if i != nil {
		rc.SetParentID(*i)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *ResourceCreate) SetID(i int64) *ResourceCreate {
	rc.mutation.SetID(i)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableID(i *int64) *ResourceCreate {
	if i != nil {
		rc.SetID(*i)
	}
	return rc
}

// AddChildIDs adds the "children" edge to the Resource entity by IDs.
func (rc *ResourceCreate) AddChildIDs(ids ...int64) *ResourceCreate {
	rc.mutation.AddChildIDs(ids...)
	return rc
}

// AddChildren adds the "children" edges to the Resource entity.
func (rc *ResourceCreate) AddChildren(r ...*Resource) *ResourceCreate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddChildIDs(ids...)
}

// SetParent sets the "parent" edge to the Resource entity.
func (rc *ResourceCreate) SetParent(r *Resource) *ResourceCreate {
	return rc.SetParentID(r.ID)
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (rc *ResourceCreate) AddPermissionIDs(ids ...int64) *ResourceCreate {
	rc.mutation.AddPermissionIDs(ids...)
	return rc
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (rc *ResourceCreate) AddPermissions(p ...*Permission) *ResourceCreate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rc.AddPermissionIDs(ids...)
}

// AddPermissionResourceIDs adds the "permission_resources" edge to the PermissionResource entity by IDs.
func (rc *ResourceCreate) AddPermissionResourceIDs(ids ...int) *ResourceCreate {
	rc.mutation.AddPermissionResourceIDs(ids...)
	return rc
}

// AddPermissionResources adds the "permission_resources" edges to the PermissionResource entity.
func (rc *ResourceCreate) AddPermissionResources(p ...*PermissionResource) *ResourceCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rc.AddPermissionResourceIDs(ids...)
}

// Mutation returns the ResourceMutation object of the builder.
func (rc *ResourceCreate) Mutation() *ResourceMutation {
	return rc.mutation
}

// Save creates the Resource in the database.
func (rc *ResourceCreate) Save(ctx context.Context) (*Resource, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ResourceCreate) SaveX(ctx context.Context) *Resource {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ResourceCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ResourceCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ResourceCreate) defaults() {
	if _, ok := rc.mutation.CreateTime(); !ok {
		v := resource.DefaultCreateTime()
		rc.mutation.SetCreateTime(v)
	}
	if _, ok := rc.mutation.UpdateTime(); !ok {
		v := resource.DefaultUpdateTime()
		rc.mutation.SetUpdateTime(v)
	}
	if _, ok := rc.mutation.Name(); !ok {
		v := resource.DefaultName
		rc.mutation.SetName(v)
	}
	if _, ok := rc.mutation.I18nKey(); !ok {
		v := resource.DefaultI18nKey
		rc.mutation.SetI18nKey(v)
	}
	if _, ok := rc.mutation.GetType(); !ok {
		v := resource.DefaultType
		rc.mutation.SetType(v)
	}
	if _, ok := rc.mutation.Status(); !ok {
		v := resource.DefaultStatus
		rc.mutation.SetStatus(v)
	}
	if _, ok := rc.mutation.Path(); !ok {
		v := resource.DefaultPath
		rc.mutation.SetPath(v)
	}
	if _, ok := rc.mutation.Operation(); !ok {
		v := resource.DefaultOperation
		rc.mutation.SetOperation(v)
	}
	if _, ok := rc.mutation.Method(); !ok {
		v := resource.DefaultMethod
		rc.mutation.SetMethod(v)
	}
	if _, ok := rc.mutation.Component(); !ok {
		v := resource.DefaultComponent
		rc.mutation.SetComponent(v)
	}
	if _, ok := rc.mutation.Icon(); !ok {
		v := resource.DefaultIcon
		rc.mutation.SetIcon(v)
	}
	if _, ok := rc.mutation.Sequence(); !ok {
		v := resource.DefaultSequence
		rc.mutation.SetSequence(v)
	}
	if _, ok := rc.mutation.Visible(); !ok {
		v := resource.DefaultVisible
		rc.mutation.SetVisible(v)
	}
	if _, ok := rc.mutation.Level(); !ok {
		v := resource.DefaultLevel
		rc.mutation.SetLevel(v)
	}
	if _, ok := rc.mutation.TreePath(); !ok {
		v := resource.DefaultTreePath
		rc.mutation.SetTreePath(v)
	}
	if _, ok := rc.mutation.Description(); !ok {
		v := resource.DefaultDescription
		rc.mutation.SetDescription(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		v := resource.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ResourceCreate) check() error {
	if _, ok := rc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Resource.create_time"`)}
	}
	if _, ok := rc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Resource.update_time"`)}
	}
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Resource.name"`)}
	}
	if v, ok := rc.mutation.Name(); ok {
		if err := resource.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Resource.name": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Keyword(); !ok {
		return &ValidationError{Name: "keyword", err: errors.New(`ent: missing required field "Resource.keyword"`)}
	}
	if v, ok := rc.mutation.Keyword(); ok {
		if err := resource.KeywordValidator(v); err != nil {
			return &ValidationError{Name: "keyword", err: fmt.Errorf(`ent: validator failed for field "Resource.keyword": %w`, err)}
		}
	}
	if _, ok := rc.mutation.I18nKey(); !ok {
		return &ValidationError{Name: "i18n_key", err: errors.New(`ent: missing required field "Resource.i18n_key"`)}
	}
	if v, ok := rc.mutation.I18nKey(); ok {
		if err := resource.I18nKeyValidator(v); err != nil {
			return &ValidationError{Name: "i18n_key", err: fmt.Errorf(`ent: validator failed for field "Resource.i18n_key": %w`, err)}
		}
	}
	if _, ok := rc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Resource.type"`)}
	}
	if v, ok := rc.mutation.GetType(); ok {
		if err := resource.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Resource.type": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Resource.status"`)}
	}
	if _, ok := rc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "Resource.path"`)}
	}
	if v, ok := rc.mutation.Path(); ok {
		if err := resource.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Resource.path": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`ent: missing required field "Resource.operation"`)}
	}
	if v, ok := rc.mutation.Operation(); ok {
		if err := resource.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`ent: validator failed for field "Resource.operation": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Method(); !ok {
		return &ValidationError{Name: "method", err: errors.New(`ent: missing required field "Resource.method"`)}
	}
	if v, ok := rc.mutation.Method(); ok {
		if err := resource.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "Resource.method": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Component(); !ok {
		return &ValidationError{Name: "component", err: errors.New(`ent: missing required field "Resource.component"`)}
	}
	if v, ok := rc.mutation.Component(); ok {
		if err := resource.ComponentValidator(v); err != nil {
			return &ValidationError{Name: "component", err: fmt.Errorf(`ent: validator failed for field "Resource.component": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Icon(); !ok {
		return &ValidationError{Name: "icon", err: errors.New(`ent: missing required field "Resource.icon"`)}
	}
	if v, ok := rc.mutation.Icon(); ok {
		if err := resource.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`ent: validator failed for field "Resource.icon": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Sequence(); !ok {
		return &ValidationError{Name: "sequence", err: errors.New(`ent: missing required field "Resource.sequence"`)}
	}
	if _, ok := rc.mutation.Visible(); !ok {
		return &ValidationError{Name: "visible", err: errors.New(`ent: missing required field "Resource.visible"`)}
	}
	if _, ok := rc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "Resource.level"`)}
	}
	if _, ok := rc.mutation.TreePath(); !ok {
		return &ValidationError{Name: "tree_path", err: errors.New(`ent: missing required field "Resource.tree_path"`)}
	}
	if v, ok := rc.mutation.TreePath(); ok {
		if err := resource.TreePathValidator(v); err != nil {
			return &ValidationError{Name: "tree_path", err: fmt.Errorf(`ent: validator failed for field "Resource.tree_path": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Resource.description"`)}
	}
	if v, ok := rc.mutation.Description(); ok {
		if err := resource.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Resource.description": %w`, err)}
		}
	}
	if v, ok := rc.mutation.ParentID(); ok {
		if err := resource.ParentIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_id", err: fmt.Errorf(`ent: validator failed for field "Resource.parent_id": %w`, err)}
		}
	}
	if v, ok := rc.mutation.ID(); ok {
		if err := resource.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Resource.id": %w`, err)}
		}
	}
	return nil
}

func (rc *ResourceCreate) sqlSave(ctx context.Context) (*Resource, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *ResourceCreate) createSpec() (*Resource, *sqlgraph.CreateSpec) {
	var (
		_node = &Resource{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(resource.Table, sqlgraph.NewFieldSpec(resource.FieldID, field.TypeInt64))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.CreateTime(); ok {
		_spec.SetField(resource.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := rc.mutation.UpdateTime(); ok {
		_spec.SetField(resource.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := rc.mutation.Name(); ok {
		_spec.SetField(resource.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rc.mutation.Keyword(); ok {
		_spec.SetField(resource.FieldKeyword, field.TypeString, value)
		_node.Keyword = value
	}
	if value, ok := rc.mutation.I18nKey(); ok {
		_spec.SetField(resource.FieldI18nKey, field.TypeString, value)
		_node.I18nKey = value
	}
	if value, ok := rc.mutation.GetType(); ok {
		_spec.SetField(resource.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := rc.mutation.Status(); ok {
		_spec.SetField(resource.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := rc.mutation.Path(); ok {
		_spec.SetField(resource.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := rc.mutation.Operation(); ok {
		_spec.SetField(resource.FieldOperation, field.TypeString, value)
		_node.Operation = value
	}
	if value, ok := rc.mutation.Method(); ok {
		_spec.SetField(resource.FieldMethod, field.TypeString, value)
		_node.Method = value
	}
	if value, ok := rc.mutation.Component(); ok {
		_spec.SetField(resource.FieldComponent, field.TypeString, value)
		_node.Component = value
	}
	if value, ok := rc.mutation.Icon(); ok {
		_spec.SetField(resource.FieldIcon, field.TypeString, value)
		_node.Icon = value
	}
	if value, ok := rc.mutation.Sequence(); ok {
		_spec.SetField(resource.FieldSequence, field.TypeInt, value)
		_node.Sequence = value
	}
	if value, ok := rc.mutation.Visible(); ok {
		_spec.SetField(resource.FieldVisible, field.TypeBool, value)
		_node.Visible = value
	}
	if value, ok := rc.mutation.Level(); ok {
		_spec.SetField(resource.FieldLevel, field.TypeInt8, value)
		_node.Level = value
	}
	if value, ok := rc.mutation.TreePath(); ok {
		_spec.SetField(resource.FieldTreePath, field.TypeString, value)
		_node.TreePath = value
	}
	if value, ok := rc.mutation.Properties(); ok {
		_spec.SetField(resource.FieldProperties, field.TypeJSON, value)
		_node.Properties = value
	}
	if value, ok := rc.mutation.Description(); ok {
		_spec.SetField(resource.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := rc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.ChildrenTable,
			Columns: []string{resource.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resource.ParentTable,
			Columns: []string{resource.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   resource.PermissionsTable,
			Columns: resource.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.PermissionResourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   resource.PermissionResourcesTable,
			Columns: []string{resource.PermissionResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SetResource set the Resource
func (rc *ResourceCreate) SetResource(input *Resource, fields ...string) *ResourceCreate {
	m := rc.mutation
	if len(fields) == 0 {
		fields = resource.Columns
	}
	_ = m.SetFields(input, fields...)
	return rc
}

// SetResourceWithZero set the Resource
func (rc *ResourceCreate) SetResourceWithZero(input *Resource, fields ...string) *ResourceCreate {
	m := rc.mutation
	if len(fields) == 0 {
		fields = resource.Columns
	}
	_ = m.SetFieldsWithZero(input, fields...)
	return rc
}

// ResourceCreateBulk is the builder for creating many Resource entities in bulk.
type ResourceCreateBulk struct {
	config
	err      error
	builders []*ResourceCreate
}

// Save creates the Resource entities in the database.
func (rcb *ResourceCreateBulk) Save(ctx context.Context) ([]*Resource, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Resource, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ResourceCreateBulk) SaveX(ctx context.Context) []*Resource {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ResourceCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ResourceCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
