// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/menu"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/permission"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/permissionmenu"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PermissionMenuUpdate is the builder for updating PermissionMenu entities.
type PermissionMenuUpdate struct {
	config
	hooks     []Hook
	mutation  *PermissionMenuMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PermissionMenuUpdate builder.
func (pmu *PermissionMenuUpdate) Where(ps ...predicate.PermissionMenu) *PermissionMenuUpdate {
	pmu.mutation.Where(ps...)
	return pmu
}

// SetPermissionID sets the "permission_id" field.
func (pmu *PermissionMenuUpdate) SetPermissionID(i int64) *PermissionMenuUpdate {
	pmu.mutation.SetPermissionID(i)
	return pmu
}

// SetNillablePermissionID sets the "permission_id" field if the given value is not nil.
func (pmu *PermissionMenuUpdate) SetNillablePermissionID(i *int64) *PermissionMenuUpdate {
	if i != nil {
		pmu.SetPermissionID(*i)
	}
	return pmu
}

// SetMenuID sets the "menu_id" field.
func (pmu *PermissionMenuUpdate) SetMenuID(i int64) *PermissionMenuUpdate {
	pmu.mutation.SetMenuID(i)
	return pmu
}

// SetNillableMenuID sets the "menu_id" field if the given value is not nil.
func (pmu *PermissionMenuUpdate) SetNillableMenuID(i *int64) *PermissionMenuUpdate {
	if i != nil {
		pmu.SetMenuID(*i)
	}
	return pmu
}

// SetPermission sets the "permission" edge to the Permission entity.
func (pmu *PermissionMenuUpdate) SetPermission(p *Permission) *PermissionMenuUpdate {
	return pmu.SetPermissionID(p.ID)
}

// SetMenu sets the "menu" edge to the Menu entity.
func (pmu *PermissionMenuUpdate) SetMenu(m *Menu) *PermissionMenuUpdate {
	return pmu.SetMenuID(m.ID)
}

// Mutation returns the PermissionMenuMutation object of the builder.
func (pmu *PermissionMenuUpdate) Mutation() *PermissionMenuMutation {
	return pmu.mutation
}

// ClearPermission clears the "permission" edge to the Permission entity.
func (pmu *PermissionMenuUpdate) ClearPermission() *PermissionMenuUpdate {
	pmu.mutation.ClearPermission()
	return pmu
}

// ClearMenu clears the "menu" edge to the Menu entity.
func (pmu *PermissionMenuUpdate) ClearMenu() *PermissionMenuUpdate {
	pmu.mutation.ClearMenu()
	return pmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pmu *PermissionMenuUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pmu.sqlSave, pmu.mutation, pmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmu *PermissionMenuUpdate) SaveX(ctx context.Context) int {
	affected, err := pmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pmu *PermissionMenuUpdate) Exec(ctx context.Context) error {
	_, err := pmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmu *PermissionMenuUpdate) ExecX(ctx context.Context) {
	if err := pmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmu *PermissionMenuUpdate) check() error {
	if v, ok := pmu.mutation.PermissionID(); ok {
		if err := permissionmenu.PermissionIDValidator(v); err != nil {
			return &ValidationError{Name: "permission_id", err: fmt.Errorf(`ent: validator failed for field "PermissionMenu.permission_id": %w`, err)}
		}
	}
	if v, ok := pmu.mutation.MenuID(); ok {
		if err := permissionmenu.MenuIDValidator(v); err != nil {
			return &ValidationError{Name: "menu_id", err: fmt.Errorf(`ent: validator failed for field "PermissionMenu.menu_id": %w`, err)}
		}
	}
	if pmu.mutation.PermissionCleared() && len(pmu.mutation.PermissionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PermissionMenu.permission"`)
	}
	if pmu.mutation.MenuCleared() && len(pmu.mutation.MenuIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PermissionMenu.menu"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pmu *PermissionMenuUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PermissionMenuUpdate {
	pmu.modifiers = append(pmu.modifiers, modifiers...)
	return pmu
}

func (pmu *PermissionMenuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(permissionmenu.Table, permissionmenu.Columns, sqlgraph.NewFieldSpec(permissionmenu.FieldID, field.TypeInt64))
	if ps := pmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pmu.mutation.PermissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   permissionmenu.PermissionTable,
			Columns: []string{permissionmenu.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.PermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   permissionmenu.PermissionTable,
			Columns: []string{permissionmenu.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmu.mutation.MenuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   permissionmenu.MenuTable,
			Columns: []string{permissionmenu.MenuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.MenuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   permissionmenu.MenuTable,
			Columns: []string{permissionmenu.MenuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pmu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permissionmenu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pmu.mutation.done = true
	return n, nil
}

// PermissionMenuUpdateOne is the builder for updating a single PermissionMenu entity.
type PermissionMenuUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PermissionMenuMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetPermissionID sets the "permission_id" field.
func (pmuo *PermissionMenuUpdateOne) SetPermissionID(i int64) *PermissionMenuUpdateOne {
	pmuo.mutation.SetPermissionID(i)
	return pmuo
}

// SetNillablePermissionID sets the "permission_id" field if the given value is not nil.
func (pmuo *PermissionMenuUpdateOne) SetNillablePermissionID(i *int64) *PermissionMenuUpdateOne {
	if i != nil {
		pmuo.SetPermissionID(*i)
	}
	return pmuo
}

// SetMenuID sets the "menu_id" field.
func (pmuo *PermissionMenuUpdateOne) SetMenuID(i int64) *PermissionMenuUpdateOne {
	pmuo.mutation.SetMenuID(i)
	return pmuo
}

// SetNillableMenuID sets the "menu_id" field if the given value is not nil.
func (pmuo *PermissionMenuUpdateOne) SetNillableMenuID(i *int64) *PermissionMenuUpdateOne {
	if i != nil {
		pmuo.SetMenuID(*i)
	}
	return pmuo
}

// SetPermission sets the "permission" edge to the Permission entity.
func (pmuo *PermissionMenuUpdateOne) SetPermission(p *Permission) *PermissionMenuUpdateOne {
	return pmuo.SetPermissionID(p.ID)
}

// SetMenu sets the "menu" edge to the Menu entity.
func (pmuo *PermissionMenuUpdateOne) SetMenu(m *Menu) *PermissionMenuUpdateOne {
	return pmuo.SetMenuID(m.ID)
}

// Mutation returns the PermissionMenuMutation object of the builder.
func (pmuo *PermissionMenuUpdateOne) Mutation() *PermissionMenuMutation {
	return pmuo.mutation
}

// ClearPermission clears the "permission" edge to the Permission entity.
func (pmuo *PermissionMenuUpdateOne) ClearPermission() *PermissionMenuUpdateOne {
	pmuo.mutation.ClearPermission()
	return pmuo
}

// ClearMenu clears the "menu" edge to the Menu entity.
func (pmuo *PermissionMenuUpdateOne) ClearMenu() *PermissionMenuUpdateOne {
	pmuo.mutation.ClearMenu()
	return pmuo
}

// Where appends a list predicates to the PermissionMenuUpdate builder.
func (pmuo *PermissionMenuUpdateOne) Where(ps ...predicate.PermissionMenu) *PermissionMenuUpdateOne {
	pmuo.mutation.Where(ps...)
	return pmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pmuo *PermissionMenuUpdateOne) Select(field string, fields ...string) *PermissionMenuUpdateOne {
	pmuo.fields = append([]string{field}, fields...)
	return pmuo
}

// Save executes the query and returns the updated PermissionMenu entity.
func (pmuo *PermissionMenuUpdateOne) Save(ctx context.Context) (*PermissionMenu, error) {
	return withHooks(ctx, pmuo.sqlSave, pmuo.mutation, pmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmuo *PermissionMenuUpdateOne) SaveX(ctx context.Context) *PermissionMenu {
	node, err := pmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pmuo *PermissionMenuUpdateOne) Exec(ctx context.Context) error {
	_, err := pmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmuo *PermissionMenuUpdateOne) ExecX(ctx context.Context) {
	if err := pmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmuo *PermissionMenuUpdateOne) check() error {
	if v, ok := pmuo.mutation.PermissionID(); ok {
		if err := permissionmenu.PermissionIDValidator(v); err != nil {
			return &ValidationError{Name: "permission_id", err: fmt.Errorf(`ent: validator failed for field "PermissionMenu.permission_id": %w`, err)}
		}
	}
	if v, ok := pmuo.mutation.MenuID(); ok {
		if err := permissionmenu.MenuIDValidator(v); err != nil {
			return &ValidationError{Name: "menu_id", err: fmt.Errorf(`ent: validator failed for field "PermissionMenu.menu_id": %w`, err)}
		}
	}
	if pmuo.mutation.PermissionCleared() && len(pmuo.mutation.PermissionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PermissionMenu.permission"`)
	}
	if pmuo.mutation.MenuCleared() && len(pmuo.mutation.MenuIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PermissionMenu.menu"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pmuo *PermissionMenuUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PermissionMenuUpdateOne {
	pmuo.modifiers = append(pmuo.modifiers, modifiers...)
	return pmuo
}

func (pmuo *PermissionMenuUpdateOne) sqlSave(ctx context.Context) (_node *PermissionMenu, err error) {
	if err := pmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(permissionmenu.Table, permissionmenu.Columns, sqlgraph.NewFieldSpec(permissionmenu.FieldID, field.TypeInt64))
	id, ok := pmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PermissionMenu.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, permissionmenu.FieldID)
		for _, f := range fields {
			if !permissionmenu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != permissionmenu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pmuo.mutation.PermissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   permissionmenu.PermissionTable,
			Columns: []string{permissionmenu.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.PermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   permissionmenu.PermissionTable,
			Columns: []string{permissionmenu.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmuo.mutation.MenuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   permissionmenu.MenuTable,
			Columns: []string{permissionmenu.MenuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.MenuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   permissionmenu.MenuTable,
			Columns: []string{permissionmenu.MenuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pmuo.modifiers...)
	_node = &PermissionMenu{config: pmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permissionmenu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pmuo.mutation.done = true
	return _node, nil
}

// SetPermissionMenu set the PermissionMenu
func (pmu *PermissionMenuUpdate) SetPermissionMenu(input *PermissionMenu, fields ...string) *PermissionMenuUpdate {
	m := pmu.mutation
	if len(fields) == 0 {
		fields = permissionmenu.OmitColumns(permissionmenu.FieldID)
	}
	_ = m.SetFields(input, fields...)
	return pmu
}

// SetPermissionMenuWithZero set the PermissionMenu
func (pmu *PermissionMenuUpdate) SetPermissionMenuWithZero(input *PermissionMenu, fields ...string) *PermissionMenuUpdate {
	m := pmu.mutation
	if len(fields) == 0 {
		fields = permissionmenu.Columns
	}
	_ = m.SetFieldsWithZero(input, fields...)
	return pmu
}

// SetPermissionMenu set the PermissionMenu
func (pmuo *PermissionMenuUpdateOne) SetPermissionMenu(input *PermissionMenu, fields ...string) *PermissionMenuUpdateOne {
	m := pmuo.mutation
	if len(fields) == 0 {
		fields = permissionmenu.OmitColumns(permissionmenu.FieldID)
	}
	_ = m.SetFields(input, fields...)
	return pmuo
}

// SetPermissionMenuWithZero set the PermissionMenu
func (pmuo *PermissionMenuUpdateOne) SetPermissionMenuWithZero(input *PermissionMenu, fields ...string) *PermissionMenuUpdateOne {
	m := pmuo.mutation
	if len(fields) == 0 {
		fields = permissionmenu.Columns
	}
	_ = m.SetFieldsWithZero(input, fields...)
	return pmuo
}

// Omit allows the unselect one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (pmuo *PermissionMenuUpdateOne) Omit(fields ...string) *PermissionMenuUpdateOne {
	omits := make(map[string]struct{}, len(fields))
	for i := range fields {
		omits[fields[i]] = struct{}{}
	}
	pmuo.fields = []string(nil)
	for _, col := range permissionmenu.Columns {
		if _, ok := omits[col]; !ok {
			pmuo.fields = append(pmuo.fields, col)
		}
	}
	return pmuo
}
