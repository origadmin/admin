// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/permission"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/permissionresource"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/resource"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PermissionResourceCreate is the builder for creating a PermissionResource entity.
type PermissionResourceCreate struct {
	config
	mutation *PermissionResourceMutation
	hooks    []Hook
}

// SetPermissionID sets the "permission_id" field.
func (prc *PermissionResourceCreate) SetPermissionID(i int64) *PermissionResourceCreate {
	prc.mutation.SetPermissionID(i)
	return prc
}

// SetResourceID sets the "resource_id" field.
func (prc *PermissionResourceCreate) SetResourceID(i int64) *PermissionResourceCreate {
	prc.mutation.SetResourceID(i)
	return prc
}

// SetPermission sets the "permission" edge to the Permission entity.
func (prc *PermissionResourceCreate) SetPermission(p *Permission) *PermissionResourceCreate {
	return prc.SetPermissionID(p.ID)
}

// SetResource sets the "resource" edge to the Resource entity.
func (prc *PermissionResourceCreate) SetResource(r *Resource) *PermissionResourceCreate {
	return prc.SetResourceID(r.ID)
}

// Mutation returns the PermissionResourceMutation object of the builder.
func (prc *PermissionResourceCreate) Mutation() *PermissionResourceMutation {
	return prc.mutation
}

// Save creates the PermissionResource in the database.
func (prc *PermissionResourceCreate) Save(ctx context.Context) (*PermissionResource, error) {
	return withHooks(ctx, prc.sqlSave, prc.mutation, prc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (prc *PermissionResourceCreate) SaveX(ctx context.Context) *PermissionResource {
	v, err := prc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prc *PermissionResourceCreate) Exec(ctx context.Context) error {
	_, err := prc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prc *PermissionResourceCreate) ExecX(ctx context.Context) {
	if err := prc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prc *PermissionResourceCreate) check() error {
	if _, ok := prc.mutation.PermissionID(); !ok {
		return &ValidationError{Name: "permission_id", err: errors.New(`ent: missing required field "PermissionResource.permission_id"`)}
	}
	if v, ok := prc.mutation.PermissionID(); ok {
		if err := permissionresource.PermissionIDValidator(v); err != nil {
			return &ValidationError{Name: "permission_id", err: fmt.Errorf(`ent: validator failed for field "PermissionResource.permission_id": %w`, err)}
		}
	}
	if _, ok := prc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`ent: missing required field "PermissionResource.resource_id"`)}
	}
	if v, ok := prc.mutation.ResourceID(); ok {
		if err := permissionresource.ResourceIDValidator(v); err != nil {
			return &ValidationError{Name: "resource_id", err: fmt.Errorf(`ent: validator failed for field "PermissionResource.resource_id": %w`, err)}
		}
	}
	if len(prc.mutation.PermissionIDs()) == 0 {
		return &ValidationError{Name: "permission", err: errors.New(`ent: missing required edge "PermissionResource.permission"`)}
	}
	if len(prc.mutation.ResourceIDs()) == 0 {
		return &ValidationError{Name: "resource", err: errors.New(`ent: missing required edge "PermissionResource.resource"`)}
	}
	return nil
}

func (prc *PermissionResourceCreate) sqlSave(ctx context.Context) (*PermissionResource, error) {
	if err := prc.check(); err != nil {
		return nil, err
	}
	_node, _spec := prc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	prc.mutation.id = &_node.ID
	prc.mutation.done = true
	return _node, nil
}

func (prc *PermissionResourceCreate) createSpec() (*PermissionResource, *sqlgraph.CreateSpec) {
	var (
		_node = &PermissionResource{config: prc.config}
		_spec = sqlgraph.NewCreateSpec(permissionresource.Table, sqlgraph.NewFieldSpec(permissionresource.FieldID, field.TypeInt))
	)
	if nodes := prc.mutation.PermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   permissionresource.PermissionTable,
			Columns: []string{permissionresource.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PermissionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := prc.mutation.ResourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   permissionresource.ResourceTable,
			Columns: []string{permissionresource.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ResourceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SetPermissionResource set the PermissionResource
func (prc *PermissionResourceCreate) SetPermissionResource(input *PermissionResource, fields ...string) *PermissionResourceCreate {
	m := prc.mutation
	if len(fields) == 0 {
		fields = permissionresource.Columns
	}
	_ = m.SetFields(input, fields...)
	return prc
}

// SetPermissionResourceWithZero set the PermissionResource
func (prc *PermissionResourceCreate) SetPermissionResourceWithZero(input *PermissionResource, fields ...string) *PermissionResourceCreate {
	m := prc.mutation
	if len(fields) == 0 {
		fields = permissionresource.Columns
	}
	_ = m.SetFieldsWithZero(input, fields...)
	return prc
}

// PermissionResourceCreateBulk is the builder for creating many PermissionResource entities in bulk.
type PermissionResourceCreateBulk struct {
	config
	err      error
	builders []*PermissionResourceCreate
}

// Save creates the PermissionResource entities in the database.
func (prcb *PermissionResourceCreateBulk) Save(ctx context.Context) ([]*PermissionResource, error) {
	if prcb.err != nil {
		return nil, prcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(prcb.builders))
	nodes := make([]*PermissionResource, len(prcb.builders))
	mutators := make([]Mutator, len(prcb.builders))
	for i := range prcb.builders {
		func(i int, root context.Context) {
			builder := prcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PermissionResourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prcb *PermissionResourceCreateBulk) SaveX(ctx context.Context) []*PermissionResource {
	v, err := prcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prcb *PermissionResourceCreateBulk) Exec(ctx context.Context) error {
	_, err := prcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prcb *PermissionResourceCreateBulk) ExecX(ctx context.Context) {
	if err := prcb.Exec(ctx); err != nil {
		panic(err)
	}
}
