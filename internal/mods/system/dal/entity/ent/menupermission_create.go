// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/menu"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/menupermission"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/permission"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MenuPermissionCreate is the builder for creating a MenuPermission entity.
type MenuPermissionCreate struct {
	config
	mutation *MenuPermissionMutation
	hooks    []Hook
}

// SetMenuID sets the "menu_id" field.
func (mpc *MenuPermissionCreate) SetMenuID(s string) *MenuPermissionCreate {
	mpc.mutation.SetMenuID(s)
	return mpc
}

// SetPermissionID sets the "permission_id" field.
func (mpc *MenuPermissionCreate) SetPermissionID(s string) *MenuPermissionCreate {
	mpc.mutation.SetPermissionID(s)
	return mpc
}

// SetID sets the "id" field.
func (mpc *MenuPermissionCreate) SetID(i int) *MenuPermissionCreate {
	mpc.mutation.SetID(i)
	return mpc
}

// SetMenu sets the "menu" edge to the Menu entity.
func (mpc *MenuPermissionCreate) SetMenu(m *Menu) *MenuPermissionCreate {
	return mpc.SetMenuID(m.ID)
}

// SetPermission sets the "permission" edge to the Permission entity.
func (mpc *MenuPermissionCreate) SetPermission(p *Permission) *MenuPermissionCreate {
	return mpc.SetPermissionID(p.ID)
}

// Mutation returns the MenuPermissionMutation object of the builder.
func (mpc *MenuPermissionCreate) Mutation() *MenuPermissionMutation {
	return mpc.mutation
}

// Save creates the MenuPermission in the database.
func (mpc *MenuPermissionCreate) Save(ctx context.Context) (*MenuPermission, error) {
	return withHooks(ctx, mpc.sqlSave, mpc.mutation, mpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mpc *MenuPermissionCreate) SaveX(ctx context.Context) *MenuPermission {
	v, err := mpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpc *MenuPermissionCreate) Exec(ctx context.Context) error {
	_, err := mpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpc *MenuPermissionCreate) ExecX(ctx context.Context) {
	if err := mpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpc *MenuPermissionCreate) check() error {
	if _, ok := mpc.mutation.MenuID(); !ok {
		return &ValidationError{Name: "menu_id", err: errors.New(`ent: missing required field "MenuPermission.menu_id"`)}
	}
	if v, ok := mpc.mutation.MenuID(); ok {
		if err := menupermission.MenuIDValidator(v); err != nil {
			return &ValidationError{Name: "menu_id", err: fmt.Errorf(`ent: validator failed for field "MenuPermission.menu_id": %w`, err)}
		}
	}
	if _, ok := mpc.mutation.PermissionID(); !ok {
		return &ValidationError{Name: "permission_id", err: errors.New(`ent: missing required field "MenuPermission.permission_id"`)}
	}
	if v, ok := mpc.mutation.PermissionID(); ok {
		if err := menupermission.PermissionIDValidator(v); err != nil {
			return &ValidationError{Name: "permission_id", err: fmt.Errorf(`ent: validator failed for field "MenuPermission.permission_id": %w`, err)}
		}
	}
	if v, ok := mpc.mutation.ID(); ok {
		if err := menupermission.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "MenuPermission.id": %w`, err)}
		}
	}
	if len(mpc.mutation.MenuIDs()) == 0 {
		return &ValidationError{Name: "menu", err: errors.New(`ent: missing required edge "MenuPermission.menu"`)}
	}
	if len(mpc.mutation.PermissionIDs()) == 0 {
		return &ValidationError{Name: "permission", err: errors.New(`ent: missing required edge "MenuPermission.permission"`)}
	}
	return nil
}

func (mpc *MenuPermissionCreate) sqlSave(ctx context.Context) (*MenuPermission, error) {
	if err := mpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	mpc.mutation.id = &_node.ID
	mpc.mutation.done = true
	return _node, nil
}

func (mpc *MenuPermissionCreate) createSpec() (*MenuPermission, *sqlgraph.CreateSpec) {
	var (
		_node = &MenuPermission{config: mpc.config}
		_spec = sqlgraph.NewCreateSpec(menupermission.Table, sqlgraph.NewFieldSpec(menupermission.FieldID, field.TypeInt))
	)
	if id, ok := mpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if nodes := mpc.mutation.MenuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   menupermission.MenuTable,
			Columns: []string{menupermission.MenuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MenuID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mpc.mutation.PermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   menupermission.PermissionTable,
			Columns: []string{menupermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PermissionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SetMenuPermission set the MenuPermission
func (mpc *MenuPermissionCreate) SetMenuPermission(input *MenuPermission, fields ...string) *MenuPermissionCreate {
	m := mpc.mutation
	if len(fields) == 0 {
		fields = menupermission.Columns
	}
	_ = m.SetFields(input, fields...)
	return mpc
}

// SetMenuPermissionWithZero set the MenuPermission
func (mpc *MenuPermissionCreate) SetMenuPermissionWithZero(input *MenuPermission, fields ...string) *MenuPermissionCreate {
	m := mpc.mutation
	if len(fields) == 0 {
		fields = menupermission.Columns
	}
	_ = m.SetFieldsWithZero(input, fields...)
	return mpc
}

// MenuPermissionCreateBulk is the builder for creating many MenuPermission entities in bulk.
type MenuPermissionCreateBulk struct {
	config
	err      error
	builders []*MenuPermissionCreate
}

// Save creates the MenuPermission entities in the database.
func (mpcb *MenuPermissionCreateBulk) Save(ctx context.Context) ([]*MenuPermission, error) {
	if mpcb.err != nil {
		return nil, mpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mpcb.builders))
	nodes := make([]*MenuPermission, len(mpcb.builders))
	mutators := make([]Mutator, len(mpcb.builders))
	for i := range mpcb.builders {
		func(i int, root context.Context) {
			builder := mpcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MenuPermissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mpcb *MenuPermissionCreateBulk) SaveX(ctx context.Context) []*MenuPermission {
	v, err := mpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpcb *MenuPermissionCreateBulk) Exec(ctx context.Context) error {
	_, err := mpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpcb *MenuPermissionCreateBulk) ExecX(ctx context.Context) {
	if err := mpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
