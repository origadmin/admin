// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/department"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/position"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/predicate"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/role"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/user"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/userdepartment"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/userposition"
	"origadmin/application/admin/internal/mods/system/dal/entity/ent/userrole"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetCreateAuthor sets the "create_author" field.
func (uu *UserUpdate) SetCreateAuthor(i int64) *UserUpdate {
	uu.mutation.ResetCreateAuthor()
	uu.mutation.SetCreateAuthor(i)
	return uu
}

// SetNillableCreateAuthor sets the "create_author" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreateAuthor(i *int64) *UserUpdate {
	if i != nil {
		uu.SetCreateAuthor(*i)
	}
	return uu
}

// AddCreateAuthor adds i to the "create_author" field.
func (uu *UserUpdate) AddCreateAuthor(i int64) *UserUpdate {
	uu.mutation.AddCreateAuthor(i)
	return uu
}

// ClearCreateAuthor clears the value of the "create_author" field.
func (uu *UserUpdate) ClearCreateAuthor() *UserUpdate {
	uu.mutation.ClearCreateAuthor()
	return uu
}

// SetUpdateAuthor sets the "update_author" field.
func (uu *UserUpdate) SetUpdateAuthor(i int64) *UserUpdate {
	uu.mutation.ResetUpdateAuthor()
	uu.mutation.SetUpdateAuthor(i)
	return uu
}

// SetNillableUpdateAuthor sets the "update_author" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUpdateAuthor(i *int64) *UserUpdate {
	if i != nil {
		uu.SetUpdateAuthor(*i)
	}
	return uu
}

// AddUpdateAuthor adds i to the "update_author" field.
func (uu *UserUpdate) AddUpdateAuthor(i int64) *UserUpdate {
	uu.mutation.AddUpdateAuthor(i)
	return uu
}

// ClearUpdateAuthor clears the value of the "update_author" field.
func (uu *UserUpdate) ClearUpdateAuthor() *UserUpdate {
	uu.mutation.ClearUpdateAuthor()
	return uu
}

// SetUpdateTime sets the "update_time" field.
func (uu *UserUpdate) SetUpdateTime(t time.Time) *UserUpdate {
	uu.mutation.SetUpdateTime(t)
	return uu
}

// SetDeleteTime sets the "delete_time" field.
func (uu *UserUpdate) SetDeleteTime(t time.Time) *UserUpdate {
	uu.mutation.SetDeleteTime(t)
	return uu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDeleteTime(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetDeleteTime(*t)
	}
	return uu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (uu *UserUpdate) ClearDeleteTime() *UserUpdate {
	uu.mutation.ClearDeleteTime()
	return uu
}

// SetUUID sets the "uuid" field.
func (uu *UserUpdate) SetUUID(s string) *UserUpdate {
	uu.mutation.SetUUID(s)
	return uu
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUUID(s *string) *UserUpdate {
	if s != nil {
		uu.SetUUID(*s)
	}
	return uu
}

// SetAllowedIP sets the "allowed_ip" field.
func (uu *UserUpdate) SetAllowedIP(s string) *UserUpdate {
	uu.mutation.SetAllowedIP(s)
	return uu
}

// SetNillableAllowedIP sets the "allowed_ip" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAllowedIP(s *string) *UserUpdate {
	if s != nil {
		uu.SetAllowedIP(*s)
	}
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetUsername(*s)
	}
	return uu
}

// SetNickname sets the "nickname" field.
func (uu *UserUpdate) SetNickname(s string) *UserUpdate {
	uu.mutation.SetNickname(s)
	return uu
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (uu *UserUpdate) SetNillableNickname(s *string) *UserUpdate {
	if s != nil {
		uu.SetNickname(*s)
	}
	return uu
}

// SetAvatar sets the "avatar" field.
func (uu *UserUpdate) SetAvatar(s string) *UserUpdate {
	uu.mutation.SetAvatar(s)
	return uu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAvatar(s *string) *UserUpdate {
	if s != nil {
		uu.SetAvatar(*s)
	}
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// SetGender sets the "gender" field.
func (uu *UserUpdate) SetGender(u user.Gender) *UserUpdate {
	uu.mutation.SetGender(u)
	return uu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (uu *UserUpdate) SetNillableGender(u *user.Gender) *UserUpdate {
	if u != nil {
		uu.SetGender(*u)
	}
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePassword(s *string) *UserUpdate {
	if s != nil {
		uu.SetPassword(*s)
	}
	return uu
}

// SetSalt sets the "salt" field.
func (uu *UserUpdate) SetSalt(s string) *UserUpdate {
	uu.mutation.SetSalt(s)
	return uu
}

// SetNillableSalt sets the "salt" field if the given value is not nil.
func (uu *UserUpdate) SetNillableSalt(s *string) *UserUpdate {
	if s != nil {
		uu.SetSalt(*s)
	}
	return uu
}

// SetPhone sets the "phone" field.
func (uu *UserUpdate) SetPhone(s string) *UserUpdate {
	uu.mutation.SetPhone(s)
	return uu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhone(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhone(*s)
	}
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// SetDepartment sets the "department" field.
func (uu *UserUpdate) SetDepartment(s string) *UserUpdate {
	uu.mutation.SetDepartment(s)
	return uu
}

// SetNillableDepartment sets the "department" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDepartment(s *string) *UserUpdate {
	if s != nil {
		uu.SetDepartment(*s)
	}
	return uu
}

// SetRemark sets the "remark" field.
func (uu *UserUpdate) SetRemark(s string) *UserUpdate {
	uu.mutation.SetRemark(s)
	return uu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRemark(s *string) *UserUpdate {
	if s != nil {
		uu.SetRemark(*s)
	}
	return uu
}

// SetToken sets the "token" field.
func (uu *UserUpdate) SetToken(s string) *UserUpdate {
	uu.mutation.SetToken(s)
	return uu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (uu *UserUpdate) SetNillableToken(s *string) *UserUpdate {
	if s != nil {
		uu.SetToken(*s)
	}
	return uu
}

// SetStatus sets the "status" field.
func (uu *UserUpdate) SetStatus(i int8) *UserUpdate {
	uu.mutation.ResetStatus()
	uu.mutation.SetStatus(i)
	return uu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uu *UserUpdate) SetNillableStatus(i *int8) *UserUpdate {
	if i != nil {
		uu.SetStatus(*i)
	}
	return uu
}

// AddStatus adds i to the "status" field.
func (uu *UserUpdate) AddStatus(i int8) *UserUpdate {
	uu.mutation.AddStatus(i)
	return uu
}

// SetIsSystem sets the "is_system" field.
func (uu *UserUpdate) SetIsSystem(b bool) *UserUpdate {
	uu.mutation.SetIsSystem(b)
	return uu
}

// SetNillableIsSystem sets the "is_system" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsSystem(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsSystem(*b)
	}
	return uu
}

// SetLastLoginIP sets the "last_login_ip" field.
func (uu *UserUpdate) SetLastLoginIP(s string) *UserUpdate {
	uu.mutation.SetLastLoginIP(s)
	return uu
}

// SetNillableLastLoginIP sets the "last_login_ip" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastLoginIP(s *string) *UserUpdate {
	if s != nil {
		uu.SetLastLoginIP(*s)
	}
	return uu
}

// SetLastLoginTime sets the "last_login_time" field.
func (uu *UserUpdate) SetLastLoginTime(t time.Time) *UserUpdate {
	uu.mutation.SetLastLoginTime(t)
	return uu
}

// SetNillableLastLoginTime sets the "last_login_time" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastLoginTime(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLastLoginTime(*t)
	}
	return uu
}

// SetLoginTime sets the "login_time" field.
func (uu *UserUpdate) SetLoginTime(t time.Time) *UserUpdate {
	uu.mutation.SetLoginTime(t)
	return uu
}

// SetNillableLoginTime sets the "login_time" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLoginTime(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLoginTime(*t)
	}
	return uu
}

// SetSanctionDate sets the "sanction_date" field.
func (uu *UserUpdate) SetSanctionDate(t time.Time) *UserUpdate {
	uu.mutation.SetSanctionDate(t)
	return uu
}

// SetNillableSanctionDate sets the "sanction_date" field if the given value is not nil.
func (uu *UserUpdate) SetNillableSanctionDate(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetSanctionDate(*t)
	}
	return uu
}

// ClearSanctionDate clears the value of the "sanction_date" field.
func (uu *UserUpdate) ClearSanctionDate() *UserUpdate {
	uu.mutation.ClearSanctionDate()
	return uu
}

// SetManagerID sets the "manager_id" field.
func (uu *UserUpdate) SetManagerID(i int64) *UserUpdate {
	uu.mutation.ResetManagerID()
	uu.mutation.SetManagerID(i)
	return uu
}

// SetNillableManagerID sets the "manager_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableManagerID(i *int64) *UserUpdate {
	if i != nil {
		uu.SetManagerID(*i)
	}
	return uu
}

// AddManagerID adds i to the "manager_id" field.
func (uu *UserUpdate) AddManagerID(i int64) *UserUpdate {
	uu.mutation.AddManagerID(i)
	return uu
}

// ClearManagerID clears the value of the "manager_id" field.
func (uu *UserUpdate) ClearManagerID() *UserUpdate {
	uu.mutation.ClearManagerID()
	return uu
}

// SetManager sets the "manager" field.
func (uu *UserUpdate) SetManager(s string) *UserUpdate {
	uu.mutation.SetManager(s)
	return uu
}

// SetNillableManager sets the "manager" field if the given value is not nil.
func (uu *UserUpdate) SetNillableManager(s *string) *UserUpdate {
	if s != nil {
		uu.SetManager(*s)
	}
	return uu
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (uu *UserUpdate) AddRoleIDs(ids ...int64) *UserUpdate {
	uu.mutation.AddRoleIDs(ids...)
	return uu
}

// AddRoles adds the "roles" edges to the Role entity.
func (uu *UserUpdate) AddRoles(r ...*Role) *UserUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.AddRoleIDs(ids...)
}

// AddPositionIDs adds the "positions" edge to the Position entity by IDs.
func (uu *UserUpdate) AddPositionIDs(ids ...int64) *UserUpdate {
	uu.mutation.AddPositionIDs(ids...)
	return uu
}

// AddPositions adds the "positions" edges to the Position entity.
func (uu *UserUpdate) AddPositions(p ...*Position) *UserUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPositionIDs(ids...)
}

// AddDepartmentIDs adds the "departments" edge to the Department entity by IDs.
func (uu *UserUpdate) AddDepartmentIDs(ids ...int64) *UserUpdate {
	uu.mutation.AddDepartmentIDs(ids...)
	return uu
}

// AddDepartments adds the "departments" edges to the Department entity.
func (uu *UserUpdate) AddDepartments(d ...*Department) *UserUpdate {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uu.AddDepartmentIDs(ids...)
}

// AddUserRoleIDs adds the "user_roles" edge to the UserRole entity by IDs.
func (uu *UserUpdate) AddUserRoleIDs(ids ...int64) *UserUpdate {
	uu.mutation.AddUserRoleIDs(ids...)
	return uu
}

// AddUserRoles adds the "user_roles" edges to the UserRole entity.
func (uu *UserUpdate) AddUserRoles(u ...*UserRole) *UserUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddUserRoleIDs(ids...)
}

// AddUserPositionIDs adds the "user_positions" edge to the UserPosition entity by IDs.
func (uu *UserUpdate) AddUserPositionIDs(ids ...int64) *UserUpdate {
	uu.mutation.AddUserPositionIDs(ids...)
	return uu
}

// AddUserPositions adds the "user_positions" edges to the UserPosition entity.
func (uu *UserUpdate) AddUserPositions(u ...*UserPosition) *UserUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddUserPositionIDs(ids...)
}

// AddUserDepartmentIDs adds the "user_departments" edge to the UserDepartment entity by IDs.
func (uu *UserUpdate) AddUserDepartmentIDs(ids ...int64) *UserUpdate {
	uu.mutation.AddUserDepartmentIDs(ids...)
	return uu
}

// AddUserDepartments adds the "user_departments" edges to the UserDepartment entity.
func (uu *UserUpdate) AddUserDepartments(u ...*UserDepartment) *UserUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddUserDepartmentIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearRoles clears all "roles" edges to the Role entity.
func (uu *UserUpdate) ClearRoles() *UserUpdate {
	uu.mutation.ClearRoles()
	return uu
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (uu *UserUpdate) RemoveRoleIDs(ids ...int64) *UserUpdate {
	uu.mutation.RemoveRoleIDs(ids...)
	return uu
}

// RemoveRoles removes "roles" edges to Role entities.
func (uu *UserUpdate) RemoveRoles(r ...*Role) *UserUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.RemoveRoleIDs(ids...)
}

// ClearPositions clears all "positions" edges to the Position entity.
func (uu *UserUpdate) ClearPositions() *UserUpdate {
	uu.mutation.ClearPositions()
	return uu
}

// RemovePositionIDs removes the "positions" edge to Position entities by IDs.
func (uu *UserUpdate) RemovePositionIDs(ids ...int64) *UserUpdate {
	uu.mutation.RemovePositionIDs(ids...)
	return uu
}

// RemovePositions removes "positions" edges to Position entities.
func (uu *UserUpdate) RemovePositions(p ...*Position) *UserUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePositionIDs(ids...)
}

// ClearDepartments clears all "departments" edges to the Department entity.
func (uu *UserUpdate) ClearDepartments() *UserUpdate {
	uu.mutation.ClearDepartments()
	return uu
}

// RemoveDepartmentIDs removes the "departments" edge to Department entities by IDs.
func (uu *UserUpdate) RemoveDepartmentIDs(ids ...int64) *UserUpdate {
	uu.mutation.RemoveDepartmentIDs(ids...)
	return uu
}

// RemoveDepartments removes "departments" edges to Department entities.
func (uu *UserUpdate) RemoveDepartments(d ...*Department) *UserUpdate {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uu.RemoveDepartmentIDs(ids...)
}

// ClearUserRoles clears all "user_roles" edges to the UserRole entity.
func (uu *UserUpdate) ClearUserRoles() *UserUpdate {
	uu.mutation.ClearUserRoles()
	return uu
}

// RemoveUserRoleIDs removes the "user_roles" edge to UserRole entities by IDs.
func (uu *UserUpdate) RemoveUserRoleIDs(ids ...int64) *UserUpdate {
	uu.mutation.RemoveUserRoleIDs(ids...)
	return uu
}

// RemoveUserRoles removes "user_roles" edges to UserRole entities.
func (uu *UserUpdate) RemoveUserRoles(u ...*UserRole) *UserUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveUserRoleIDs(ids...)
}

// ClearUserPositions clears all "user_positions" edges to the UserPosition entity.
func (uu *UserUpdate) ClearUserPositions() *UserUpdate {
	uu.mutation.ClearUserPositions()
	return uu
}

// RemoveUserPositionIDs removes the "user_positions" edge to UserPosition entities by IDs.
func (uu *UserUpdate) RemoveUserPositionIDs(ids ...int64) *UserUpdate {
	uu.mutation.RemoveUserPositionIDs(ids...)
	return uu
}

// RemoveUserPositions removes "user_positions" edges to UserPosition entities.
func (uu *UserUpdate) RemoveUserPositions(u ...*UserPosition) *UserUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveUserPositionIDs(ids...)
}

// ClearUserDepartments clears all "user_departments" edges to the UserDepartment entity.
func (uu *UserUpdate) ClearUserDepartments() *UserUpdate {
	uu.mutation.ClearUserDepartments()
	return uu
}

// RemoveUserDepartmentIDs removes the "user_departments" edge to UserDepartment entities by IDs.
func (uu *UserUpdate) RemoveUserDepartmentIDs(ids ...int64) *UserUpdate {
	uu.mutation.RemoveUserDepartmentIDs(ids...)
	return uu
}

// RemoveUserDepartments removes "user_departments" edges to UserDepartment entities.
func (uu *UserUpdate) RemoveUserDepartments(u ...*UserDepartment) *UserUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveUserDepartmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	if err := uu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() error {
	if _, ok := uu.mutation.UpdateTime(); !ok {
		if user.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized user.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := user.UpdateDefaultUpdateTime()
		uu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.UUID(); ok {
		if err := user.UUIDValidator(v); err != nil {
			return &ValidationError{Name: "uuid", err: fmt.Errorf(`ent: validator failed for field "User.uuid": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Nickname(); ok {
		if err := user.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`ent: validator failed for field "User.nickname": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Avatar(); ok {
		if err := user.AvatarValidator(v); err != nil {
			return &ValidationError{Name: "avatar", err: fmt.Errorf(`ent: validator failed for field "User.avatar": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Gender(); ok {
		if err := user.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "User.gender": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "User.password": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Salt(); ok {
		if err := user.SaltValidator(v); err != nil {
			return &ValidationError{Name: "salt", err: fmt.Errorf(`ent: validator failed for field "User.salt": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Phone(); ok {
		if err := user.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "User.phone": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Department(); ok {
		if err := user.DepartmentValidator(v); err != nil {
			return &ValidationError{Name: "department", err: fmt.Errorf(`ent: validator failed for field "User.department": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Remark(); ok {
		if err := user.RemarkValidator(v); err != nil {
			return &ValidationError{Name: "remark", err: fmt.Errorf(`ent: validator failed for field "User.remark": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Token(); ok {
		if err := user.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "User.token": %w`, err)}
		}
	}
	if v, ok := uu.mutation.LastLoginIP(); ok {
		if err := user.LastLoginIPValidator(v); err != nil {
			return &ValidationError{Name: "last_login_ip", err: fmt.Errorf(`ent: validator failed for field "User.last_login_ip": %w`, err)}
		}
	}
	if v, ok := uu.mutation.ManagerID(); ok {
		if err := user.ManagerIDValidator(v); err != nil {
			return &ValidationError{Name: "manager_id", err: fmt.Errorf(`ent: validator failed for field "User.manager_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uu *UserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdate {
	uu.modifiers = append(uu.modifiers, modifiers...)
	return uu
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.CreateAuthor(); ok {
		_spec.SetField(user.FieldCreateAuthor, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedCreateAuthor(); ok {
		_spec.AddField(user.FieldCreateAuthor, field.TypeInt64, value)
	}
	if uu.mutation.CreateAuthorCleared() {
		_spec.ClearField(user.FieldCreateAuthor, field.TypeInt64)
	}
	if value, ok := uu.mutation.UpdateAuthor(); ok {
		_spec.SetField(user.FieldUpdateAuthor, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedUpdateAuthor(); ok {
		_spec.AddField(user.FieldUpdateAuthor, field.TypeInt64, value)
	}
	if uu.mutation.UpdateAuthorCleared() {
		_spec.ClearField(user.FieldUpdateAuthor, field.TypeInt64)
	}
	if value, ok := uu.mutation.UpdateTime(); ok {
		_spec.SetField(user.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := uu.mutation.DeleteTime(); ok {
		_spec.SetField(user.FieldDeleteTime, field.TypeTime, value)
	}
	if uu.mutation.DeleteTimeCleared() {
		_spec.ClearField(user.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := uu.mutation.UUID(); ok {
		_spec.SetField(user.FieldUUID, field.TypeString, value)
	}
	if value, ok := uu.mutation.AllowedIP(); ok {
		_spec.SetField(user.FieldAllowedIP, field.TypeString, value)
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uu.mutation.Nickname(); ok {
		_spec.SetField(user.FieldNickname, field.TypeString, value)
	}
	if value, ok := uu.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uu.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uu.mutation.Salt(); ok {
		_spec.SetField(user.FieldSalt, field.TypeString, value)
	}
	if value, ok := uu.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.Department(); ok {
		_spec.SetField(user.FieldDepartment, field.TypeString, value)
	}
	if value, ok := uu.mutation.Remark(); ok {
		_spec.SetField(user.FieldRemark, field.TypeString, value)
	}
	if value, ok := uu.mutation.Token(); ok {
		_spec.SetField(user.FieldToken, field.TypeString, value)
	}
	if value, ok := uu.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := uu.mutation.AddedStatus(); ok {
		_spec.AddField(user.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := uu.mutation.IsSystem(); ok {
		_spec.SetField(user.FieldIsSystem, field.TypeBool, value)
	}
	if value, ok := uu.mutation.LastLoginIP(); ok {
		_spec.SetField(user.FieldLastLoginIP, field.TypeString, value)
	}
	if value, ok := uu.mutation.LastLoginTime(); ok {
		_spec.SetField(user.FieldLastLoginTime, field.TypeTime, value)
	}
	if value, ok := uu.mutation.LoginTime(); ok {
		_spec.SetField(user.FieldLoginTime, field.TypeTime, value)
	}
	if value, ok := uu.mutation.SanctionDate(); ok {
		_spec.SetField(user.FieldSanctionDate, field.TypeTime, value)
	}
	if uu.mutation.SanctionDateCleared() {
		_spec.ClearField(user.FieldSanctionDate, field.TypeTime)
	}
	if value, ok := uu.mutation.ManagerID(); ok {
		_spec.SetField(user.FieldManagerID, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedManagerID(); ok {
		_spec.AddField(user.FieldManagerID, field.TypeInt64, value)
	}
	if uu.mutation.ManagerIDCleared() {
		_spec.ClearField(user.FieldManagerID, field.TypeInt64)
	}
	if value, ok := uu.mutation.Manager(); ok {
		_spec.SetField(user.FieldManager, field.TypeString, value)
	}
	if uu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		createE := &UserRoleCreate{config: uu.config, mutation: newUserRoleMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedRolesIDs(); len(nodes) > 0 && !uu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserRoleCreate{config: uu.config, mutation: newUserRoleMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserRoleCreate{config: uu.config, mutation: newUserRoleMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PositionsTable,
			Columns: user.PositionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt64),
			},
		}
		createE := &UserPositionCreate{config: uu.config, mutation: newUserPositionMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPositionsIDs(); len(nodes) > 0 && !uu.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PositionsTable,
			Columns: user.PositionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserPositionCreate{config: uu.config, mutation: newUserPositionMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PositionsTable,
			Columns: user.PositionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserPositionCreate{config: uu.config, mutation: newUserPositionMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.DepartmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.DepartmentsTable,
			Columns: user.DepartmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64),
			},
		}
		createE := &UserDepartmentCreate{config: uu.config, mutation: newUserDepartmentMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedDepartmentsIDs(); len(nodes) > 0 && !uu.mutation.DepartmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.DepartmentsTable,
			Columns: user.DepartmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserDepartmentCreate{config: uu.config, mutation: newUserDepartmentMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.DepartmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.DepartmentsTable,
			Columns: user.DepartmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserDepartmentCreate{config: uu.config, mutation: newUserDepartmentMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserRolesIDs(); len(nodes) > 0 && !uu.mutation.UserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserPositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserPositionsTable,
			Columns: []string{user.UserPositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userposition.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserPositionsIDs(); len(nodes) > 0 && !uu.mutation.UserPositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserPositionsTable,
			Columns: []string{user.UserPositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userposition.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserPositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserPositionsTable,
			Columns: []string{user.UserPositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userposition.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserDepartmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserDepartmentsTable,
			Columns: []string{user.UserDepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdepartment.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserDepartmentsIDs(); len(nodes) > 0 && !uu.mutation.UserDepartmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserDepartmentsTable,
			Columns: []string{user.UserDepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdepartment.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserDepartmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserDepartmentsTable,
			Columns: []string{user.UserDepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdepartment.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreateAuthor sets the "create_author" field.
func (uuo *UserUpdateOne) SetCreateAuthor(i int64) *UserUpdateOne {
	uuo.mutation.ResetCreateAuthor()
	uuo.mutation.SetCreateAuthor(i)
	return uuo
}

// SetNillableCreateAuthor sets the "create_author" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreateAuthor(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetCreateAuthor(*i)
	}
	return uuo
}

// AddCreateAuthor adds i to the "create_author" field.
func (uuo *UserUpdateOne) AddCreateAuthor(i int64) *UserUpdateOne {
	uuo.mutation.AddCreateAuthor(i)
	return uuo
}

// ClearCreateAuthor clears the value of the "create_author" field.
func (uuo *UserUpdateOne) ClearCreateAuthor() *UserUpdateOne {
	uuo.mutation.ClearCreateAuthor()
	return uuo
}

// SetUpdateAuthor sets the "update_author" field.
func (uuo *UserUpdateOne) SetUpdateAuthor(i int64) *UserUpdateOne {
	uuo.mutation.ResetUpdateAuthor()
	uuo.mutation.SetUpdateAuthor(i)
	return uuo
}

// SetNillableUpdateAuthor sets the "update_author" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUpdateAuthor(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetUpdateAuthor(*i)
	}
	return uuo
}

// AddUpdateAuthor adds i to the "update_author" field.
func (uuo *UserUpdateOne) AddUpdateAuthor(i int64) *UserUpdateOne {
	uuo.mutation.AddUpdateAuthor(i)
	return uuo
}

// ClearUpdateAuthor clears the value of the "update_author" field.
func (uuo *UserUpdateOne) ClearUpdateAuthor() *UserUpdateOne {
	uuo.mutation.ClearUpdateAuthor()
	return uuo
}

// SetUpdateTime sets the "update_time" field.
func (uuo *UserUpdateOne) SetUpdateTime(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdateTime(t)
	return uuo
}

// SetDeleteTime sets the "delete_time" field.
func (uuo *UserUpdateOne) SetDeleteTime(t time.Time) *UserUpdateOne {
	uuo.mutation.SetDeleteTime(t)
	return uuo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDeleteTime(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetDeleteTime(*t)
	}
	return uuo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (uuo *UserUpdateOne) ClearDeleteTime() *UserUpdateOne {
	uuo.mutation.ClearDeleteTime()
	return uuo
}

// SetUUID sets the "uuid" field.
func (uuo *UserUpdateOne) SetUUID(s string) *UserUpdateOne {
	uuo.mutation.SetUUID(s)
	return uuo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUUID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUUID(*s)
	}
	return uuo
}

// SetAllowedIP sets the "allowed_ip" field.
func (uuo *UserUpdateOne) SetAllowedIP(s string) *UserUpdateOne {
	uuo.mutation.SetAllowedIP(s)
	return uuo
}

// SetNillableAllowedIP sets the "allowed_ip" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAllowedIP(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAllowedIP(*s)
	}
	return uuo
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUsername(*s)
	}
	return uuo
}

// SetNickname sets the "nickname" field.
func (uuo *UserUpdateOne) SetNickname(s string) *UserUpdateOne {
	uuo.mutation.SetNickname(s)
	return uuo
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableNickname(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetNickname(*s)
	}
	return uuo
}

// SetAvatar sets the "avatar" field.
func (uuo *UserUpdateOne) SetAvatar(s string) *UserUpdateOne {
	uuo.mutation.SetAvatar(s)
	return uuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAvatar(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAvatar(*s)
	}
	return uuo
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// SetGender sets the "gender" field.
func (uuo *UserUpdateOne) SetGender(u user.Gender) *UserUpdateOne {
	uuo.mutation.SetGender(u)
	return uuo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGender(u *user.Gender) *UserUpdateOne {
	if u != nil {
		uuo.SetGender(*u)
	}
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePassword(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPassword(*s)
	}
	return uuo
}

// SetSalt sets the "salt" field.
func (uuo *UserUpdateOne) SetSalt(s string) *UserUpdateOne {
	uuo.mutation.SetSalt(s)
	return uuo
}

// SetNillableSalt sets the "salt" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSalt(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetSalt(*s)
	}
	return uuo
}

// SetPhone sets the "phone" field.
func (uuo *UserUpdateOne) SetPhone(s string) *UserUpdateOne {
	uuo.mutation.SetPhone(s)
	return uuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhone(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhone(*s)
	}
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// SetDepartment sets the "department" field.
func (uuo *UserUpdateOne) SetDepartment(s string) *UserUpdateOne {
	uuo.mutation.SetDepartment(s)
	return uuo
}

// SetNillableDepartment sets the "department" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDepartment(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetDepartment(*s)
	}
	return uuo
}

// SetRemark sets the "remark" field.
func (uuo *UserUpdateOne) SetRemark(s string) *UserUpdateOne {
	uuo.mutation.SetRemark(s)
	return uuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRemark(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetRemark(*s)
	}
	return uuo
}

// SetToken sets the "token" field.
func (uuo *UserUpdateOne) SetToken(s string) *UserUpdateOne {
	uuo.mutation.SetToken(s)
	return uuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableToken(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetToken(*s)
	}
	return uuo
}

// SetStatus sets the "status" field.
func (uuo *UserUpdateOne) SetStatus(i int8) *UserUpdateOne {
	uuo.mutation.ResetStatus()
	uuo.mutation.SetStatus(i)
	return uuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableStatus(i *int8) *UserUpdateOne {
	if i != nil {
		uuo.SetStatus(*i)
	}
	return uuo
}

// AddStatus adds i to the "status" field.
func (uuo *UserUpdateOne) AddStatus(i int8) *UserUpdateOne {
	uuo.mutation.AddStatus(i)
	return uuo
}

// SetIsSystem sets the "is_system" field.
func (uuo *UserUpdateOne) SetIsSystem(b bool) *UserUpdateOne {
	uuo.mutation.SetIsSystem(b)
	return uuo
}

// SetNillableIsSystem sets the "is_system" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsSystem(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsSystem(*b)
	}
	return uuo
}

// SetLastLoginIP sets the "last_login_ip" field.
func (uuo *UserUpdateOne) SetLastLoginIP(s string) *UserUpdateOne {
	uuo.mutation.SetLastLoginIP(s)
	return uuo
}

// SetNillableLastLoginIP sets the "last_login_ip" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastLoginIP(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLastLoginIP(*s)
	}
	return uuo
}

// SetLastLoginTime sets the "last_login_time" field.
func (uuo *UserUpdateOne) SetLastLoginTime(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastLoginTime(t)
	return uuo
}

// SetNillableLastLoginTime sets the "last_login_time" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastLoginTime(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLastLoginTime(*t)
	}
	return uuo
}

// SetLoginTime sets the "login_time" field.
func (uuo *UserUpdateOne) SetLoginTime(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLoginTime(t)
	return uuo
}

// SetNillableLoginTime sets the "login_time" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLoginTime(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLoginTime(*t)
	}
	return uuo
}

// SetSanctionDate sets the "sanction_date" field.
func (uuo *UserUpdateOne) SetSanctionDate(t time.Time) *UserUpdateOne {
	uuo.mutation.SetSanctionDate(t)
	return uuo
}

// SetNillableSanctionDate sets the "sanction_date" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSanctionDate(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetSanctionDate(*t)
	}
	return uuo
}

// ClearSanctionDate clears the value of the "sanction_date" field.
func (uuo *UserUpdateOne) ClearSanctionDate() *UserUpdateOne {
	uuo.mutation.ClearSanctionDate()
	return uuo
}

// SetManagerID sets the "manager_id" field.
func (uuo *UserUpdateOne) SetManagerID(i int64) *UserUpdateOne {
	uuo.mutation.ResetManagerID()
	uuo.mutation.SetManagerID(i)
	return uuo
}

// SetNillableManagerID sets the "manager_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableManagerID(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetManagerID(*i)
	}
	return uuo
}

// AddManagerID adds i to the "manager_id" field.
func (uuo *UserUpdateOne) AddManagerID(i int64) *UserUpdateOne {
	uuo.mutation.AddManagerID(i)
	return uuo
}

// ClearManagerID clears the value of the "manager_id" field.
func (uuo *UserUpdateOne) ClearManagerID() *UserUpdateOne {
	uuo.mutation.ClearManagerID()
	return uuo
}

// SetManager sets the "manager" field.
func (uuo *UserUpdateOne) SetManager(s string) *UserUpdateOne {
	uuo.mutation.SetManager(s)
	return uuo
}

// SetNillableManager sets the "manager" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableManager(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetManager(*s)
	}
	return uuo
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (uuo *UserUpdateOne) AddRoleIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.AddRoleIDs(ids...)
	return uuo
}

// AddRoles adds the "roles" edges to the Role entity.
func (uuo *UserUpdateOne) AddRoles(r ...*Role) *UserUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.AddRoleIDs(ids...)
}

// AddPositionIDs adds the "positions" edge to the Position entity by IDs.
func (uuo *UserUpdateOne) AddPositionIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.AddPositionIDs(ids...)
	return uuo
}

// AddPositions adds the "positions" edges to the Position entity.
func (uuo *UserUpdateOne) AddPositions(p ...*Position) *UserUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPositionIDs(ids...)
}

// AddDepartmentIDs adds the "departments" edge to the Department entity by IDs.
func (uuo *UserUpdateOne) AddDepartmentIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.AddDepartmentIDs(ids...)
	return uuo
}

// AddDepartments adds the "departments" edges to the Department entity.
func (uuo *UserUpdateOne) AddDepartments(d ...*Department) *UserUpdateOne {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uuo.AddDepartmentIDs(ids...)
}

// AddUserRoleIDs adds the "user_roles" edge to the UserRole entity by IDs.
func (uuo *UserUpdateOne) AddUserRoleIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.AddUserRoleIDs(ids...)
	return uuo
}

// AddUserRoles adds the "user_roles" edges to the UserRole entity.
func (uuo *UserUpdateOne) AddUserRoles(u ...*UserRole) *UserUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddUserRoleIDs(ids...)
}

// AddUserPositionIDs adds the "user_positions" edge to the UserPosition entity by IDs.
func (uuo *UserUpdateOne) AddUserPositionIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.AddUserPositionIDs(ids...)
	return uuo
}

// AddUserPositions adds the "user_positions" edges to the UserPosition entity.
func (uuo *UserUpdateOne) AddUserPositions(u ...*UserPosition) *UserUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddUserPositionIDs(ids...)
}

// AddUserDepartmentIDs adds the "user_departments" edge to the UserDepartment entity by IDs.
func (uuo *UserUpdateOne) AddUserDepartmentIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.AddUserDepartmentIDs(ids...)
	return uuo
}

// AddUserDepartments adds the "user_departments" edges to the UserDepartment entity.
func (uuo *UserUpdateOne) AddUserDepartments(u ...*UserDepartment) *UserUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddUserDepartmentIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearRoles clears all "roles" edges to the Role entity.
func (uuo *UserUpdateOne) ClearRoles() *UserUpdateOne {
	uuo.mutation.ClearRoles()
	return uuo
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (uuo *UserUpdateOne) RemoveRoleIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.RemoveRoleIDs(ids...)
	return uuo
}

// RemoveRoles removes "roles" edges to Role entities.
func (uuo *UserUpdateOne) RemoveRoles(r ...*Role) *UserUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.RemoveRoleIDs(ids...)
}

// ClearPositions clears all "positions" edges to the Position entity.
func (uuo *UserUpdateOne) ClearPositions() *UserUpdateOne {
	uuo.mutation.ClearPositions()
	return uuo
}

// RemovePositionIDs removes the "positions" edge to Position entities by IDs.
func (uuo *UserUpdateOne) RemovePositionIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.RemovePositionIDs(ids...)
	return uuo
}

// RemovePositions removes "positions" edges to Position entities.
func (uuo *UserUpdateOne) RemovePositions(p ...*Position) *UserUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePositionIDs(ids...)
}

// ClearDepartments clears all "departments" edges to the Department entity.
func (uuo *UserUpdateOne) ClearDepartments() *UserUpdateOne {
	uuo.mutation.ClearDepartments()
	return uuo
}

// RemoveDepartmentIDs removes the "departments" edge to Department entities by IDs.
func (uuo *UserUpdateOne) RemoveDepartmentIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.RemoveDepartmentIDs(ids...)
	return uuo
}

// RemoveDepartments removes "departments" edges to Department entities.
func (uuo *UserUpdateOne) RemoveDepartments(d ...*Department) *UserUpdateOne {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uuo.RemoveDepartmentIDs(ids...)
}

// ClearUserRoles clears all "user_roles" edges to the UserRole entity.
func (uuo *UserUpdateOne) ClearUserRoles() *UserUpdateOne {
	uuo.mutation.ClearUserRoles()
	return uuo
}

// RemoveUserRoleIDs removes the "user_roles" edge to UserRole entities by IDs.
func (uuo *UserUpdateOne) RemoveUserRoleIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.RemoveUserRoleIDs(ids...)
	return uuo
}

// RemoveUserRoles removes "user_roles" edges to UserRole entities.
func (uuo *UserUpdateOne) RemoveUserRoles(u ...*UserRole) *UserUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveUserRoleIDs(ids...)
}

// ClearUserPositions clears all "user_positions" edges to the UserPosition entity.
func (uuo *UserUpdateOne) ClearUserPositions() *UserUpdateOne {
	uuo.mutation.ClearUserPositions()
	return uuo
}

// RemoveUserPositionIDs removes the "user_positions" edge to UserPosition entities by IDs.
func (uuo *UserUpdateOne) RemoveUserPositionIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.RemoveUserPositionIDs(ids...)
	return uuo
}

// RemoveUserPositions removes "user_positions" edges to UserPosition entities.
func (uuo *UserUpdateOne) RemoveUserPositions(u ...*UserPosition) *UserUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveUserPositionIDs(ids...)
}

// ClearUserDepartments clears all "user_departments" edges to the UserDepartment entity.
func (uuo *UserUpdateOne) ClearUserDepartments() *UserUpdateOne {
	uuo.mutation.ClearUserDepartments()
	return uuo
}

// RemoveUserDepartmentIDs removes the "user_departments" edge to UserDepartment entities by IDs.
func (uuo *UserUpdateOne) RemoveUserDepartmentIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.RemoveUserDepartmentIDs(ids...)
	return uuo
}

// RemoveUserDepartments removes "user_departments" edges to UserDepartment entities.
func (uuo *UserUpdateOne) RemoveUserDepartments(u ...*UserDepartment) *UserUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveUserDepartmentIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	if err := uuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() error {
	if _, ok := uuo.mutation.UpdateTime(); !ok {
		if user.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized user.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := user.UpdateDefaultUpdateTime()
		uuo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.UUID(); ok {
		if err := user.UUIDValidator(v); err != nil {
			return &ValidationError{Name: "uuid", err: fmt.Errorf(`ent: validator failed for field "User.uuid": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Nickname(); ok {
		if err := user.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`ent: validator failed for field "User.nickname": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Avatar(); ok {
		if err := user.AvatarValidator(v); err != nil {
			return &ValidationError{Name: "avatar", err: fmt.Errorf(`ent: validator failed for field "User.avatar": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Gender(); ok {
		if err := user.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "User.gender": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "User.password": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Salt(); ok {
		if err := user.SaltValidator(v); err != nil {
			return &ValidationError{Name: "salt", err: fmt.Errorf(`ent: validator failed for field "User.salt": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Phone(); ok {
		if err := user.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "User.phone": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Department(); ok {
		if err := user.DepartmentValidator(v); err != nil {
			return &ValidationError{Name: "department", err: fmt.Errorf(`ent: validator failed for field "User.department": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Remark(); ok {
		if err := user.RemarkValidator(v); err != nil {
			return &ValidationError{Name: "remark", err: fmt.Errorf(`ent: validator failed for field "User.remark": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Token(); ok {
		if err := user.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "User.token": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.LastLoginIP(); ok {
		if err := user.LastLoginIPValidator(v); err != nil {
			return &ValidationError{Name: "last_login_ip", err: fmt.Errorf(`ent: validator failed for field "User.last_login_ip": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.ManagerID(); ok {
		if err := user.ManagerIDValidator(v); err != nil {
			return &ValidationError{Name: "manager_id", err: fmt.Errorf(`ent: validator failed for field "User.manager_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uuo *UserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdateOne {
	uuo.modifiers = append(uuo.modifiers, modifiers...)
	return uuo
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.CreateAuthor(); ok {
		_spec.SetField(user.FieldCreateAuthor, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedCreateAuthor(); ok {
		_spec.AddField(user.FieldCreateAuthor, field.TypeInt64, value)
	}
	if uuo.mutation.CreateAuthorCleared() {
		_spec.ClearField(user.FieldCreateAuthor, field.TypeInt64)
	}
	if value, ok := uuo.mutation.UpdateAuthor(); ok {
		_spec.SetField(user.FieldUpdateAuthor, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedUpdateAuthor(); ok {
		_spec.AddField(user.FieldUpdateAuthor, field.TypeInt64, value)
	}
	if uuo.mutation.UpdateAuthorCleared() {
		_spec.ClearField(user.FieldUpdateAuthor, field.TypeInt64)
	}
	if value, ok := uuo.mutation.UpdateTime(); ok {
		_spec.SetField(user.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.DeleteTime(); ok {
		_spec.SetField(user.FieldDeleteTime, field.TypeTime, value)
	}
	if uuo.mutation.DeleteTimeCleared() {
		_spec.ClearField(user.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := uuo.mutation.UUID(); ok {
		_spec.SetField(user.FieldUUID, field.TypeString, value)
	}
	if value, ok := uuo.mutation.AllowedIP(); ok {
		_spec.SetField(user.FieldAllowedIP, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Nickname(); ok {
		_spec.SetField(user.FieldNickname, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Salt(); ok {
		_spec.SetField(user.FieldSalt, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Department(); ok {
		_spec.SetField(user.FieldDepartment, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Remark(); ok {
		_spec.SetField(user.FieldRemark, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Token(); ok {
		_spec.SetField(user.FieldToken, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := uuo.mutation.AddedStatus(); ok {
		_spec.AddField(user.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := uuo.mutation.IsSystem(); ok {
		_spec.SetField(user.FieldIsSystem, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.LastLoginIP(); ok {
		_spec.SetField(user.FieldLastLoginIP, field.TypeString, value)
	}
	if value, ok := uuo.mutation.LastLoginTime(); ok {
		_spec.SetField(user.FieldLastLoginTime, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.LoginTime(); ok {
		_spec.SetField(user.FieldLoginTime, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.SanctionDate(); ok {
		_spec.SetField(user.FieldSanctionDate, field.TypeTime, value)
	}
	if uuo.mutation.SanctionDateCleared() {
		_spec.ClearField(user.FieldSanctionDate, field.TypeTime)
	}
	if value, ok := uuo.mutation.ManagerID(); ok {
		_spec.SetField(user.FieldManagerID, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedManagerID(); ok {
		_spec.AddField(user.FieldManagerID, field.TypeInt64, value)
	}
	if uuo.mutation.ManagerIDCleared() {
		_spec.ClearField(user.FieldManagerID, field.TypeInt64)
	}
	if value, ok := uuo.mutation.Manager(); ok {
		_spec.SetField(user.FieldManager, field.TypeString, value)
	}
	if uuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		createE := &UserRoleCreate{config: uuo.config, mutation: newUserRoleMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !uuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserRoleCreate{config: uuo.config, mutation: newUserRoleMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserRoleCreate{config: uuo.config, mutation: newUserRoleMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PositionsTable,
			Columns: user.PositionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt64),
			},
		}
		createE := &UserPositionCreate{config: uuo.config, mutation: newUserPositionMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPositionsIDs(); len(nodes) > 0 && !uuo.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PositionsTable,
			Columns: user.PositionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserPositionCreate{config: uuo.config, mutation: newUserPositionMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PositionsTable,
			Columns: user.PositionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserPositionCreate{config: uuo.config, mutation: newUserPositionMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.DepartmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.DepartmentsTable,
			Columns: user.DepartmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64),
			},
		}
		createE := &UserDepartmentCreate{config: uuo.config, mutation: newUserDepartmentMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedDepartmentsIDs(); len(nodes) > 0 && !uuo.mutation.DepartmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.DepartmentsTable,
			Columns: user.DepartmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserDepartmentCreate{config: uuo.config, mutation: newUserDepartmentMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.DepartmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.DepartmentsTable,
			Columns: user.DepartmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserDepartmentCreate{config: uuo.config, mutation: newUserDepartmentMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserRolesIDs(); len(nodes) > 0 && !uuo.mutation.UserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserPositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserPositionsTable,
			Columns: []string{user.UserPositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userposition.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserPositionsIDs(); len(nodes) > 0 && !uuo.mutation.UserPositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserPositionsTable,
			Columns: []string{user.UserPositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userposition.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserPositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserPositionsTable,
			Columns: []string{user.UserPositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userposition.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserDepartmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserDepartmentsTable,
			Columns: []string{user.UserDepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdepartment.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserDepartmentsIDs(); len(nodes) > 0 && !uuo.mutation.UserDepartmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserDepartmentsTable,
			Columns: []string{user.UserDepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdepartment.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserDepartmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserDepartmentsTable,
			Columns: []string{user.UserDepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdepartment.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uuo.modifiers...)
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}

// SetUser set the User
func (uu *UserUpdate) SetUser(input *User, fields ...string) *UserUpdate {
	m := uu.mutation
	if len(fields) == 0 {
		fields = user.OmitColumns(user.FieldID)
	}
	_ = m.SetFields(input, fields...)
	return uu
}

// SetUserWithZero set the User
func (uu *UserUpdate) SetUserWithZero(input *User, fields ...string) *UserUpdate {
	m := uu.mutation
	if len(fields) == 0 {
		fields = user.Columns
	}
	_ = m.SetFieldsWithZero(input, fields...)
	return uu
}

// SetUser set the User
func (uuo *UserUpdateOne) SetUser(input *User, fields ...string) *UserUpdateOne {
	m := uuo.mutation
	if len(fields) == 0 {
		fields = user.OmitColumns(user.FieldID)
	}
	_ = m.SetFields(input, fields...)
	return uuo
}

// SetUserWithZero set the User
func (uuo *UserUpdateOne) SetUserWithZero(input *User, fields ...string) *UserUpdateOne {
	m := uuo.mutation
	if len(fields) == 0 {
		fields = user.Columns
	}
	_ = m.SetFieldsWithZero(input, fields...)
	return uuo
}

// Omit allows the unselect one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (uuo *UserUpdateOne) Omit(fields ...string) *UserUpdateOne {
	omits := make(map[string]struct{}, len(fields))
	for i := range fields {
		omits[fields[i]] = struct{}{}
	}
	uuo.fields = []string(nil)
	for _, col := range user.Columns {
		if _, ok := omits[col]; !ok {
			uuo.fields = append(uuo.fields, col)
		}
	}
	return uuo
}
