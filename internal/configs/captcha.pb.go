// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: configs/captcha.proto

package configs

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Captcha struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Length of the verification code
	Length int32 `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	// CAPTCHA width
	Width int32 `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	// CAPTCHA height
	Height int32 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	// Type of cache to use for storing CAPTCHA data
	CacheType string `protobuf:"bytes,4,opt,name=cache_type,proto3" json:"cache_type,omitempty"`
	// Redis instance for CAPTCHA cache
	Redis *Captcha_Redis `protobuf:"bytes,5,opt,name=redis,proto3" json:"redis,omitempty"`
}

func (x *Captcha) Reset() {
	*x = Captcha{}
	mi := &file_configs_captcha_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Captcha) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Captcha) ProtoMessage() {}

func (x *Captcha) ProtoReflect() protoreflect.Message {
	mi := &file_configs_captcha_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Captcha.ProtoReflect.Descriptor instead.
func (*Captcha) Descriptor() ([]byte, []int) {
	return file_configs_captcha_proto_rawDescGZIP(), []int{0}
}

func (x *Captcha) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Captcha) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Captcha) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Captcha) GetCacheType() string {
	if x != nil {
		return x.CacheType
	}
	return ""
}

func (x *Captcha) GetRedis() *Captcha_Redis {
	if x != nil {
		return x.Redis
	}
	return nil
}

// Redis configuration for CAPTCHA cache
type Captcha_Redis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the Redis server
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	// Username for Redis authentication
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// Password for Redis authentication
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	// Database index for Redis
	Db int32 `protobuf:"varint,4,opt,name=db,proto3" json:"db,omitempty"`
	// Prefix for Redis keys (default: "admin:captcha")
	KeyPrefix string `protobuf:"bytes,5,opt,name=key_prefix,proto3" json:"key_prefix,omitempty"`
}

func (x *Captcha_Redis) Reset() {
	*x = Captcha_Redis{}
	mi := &file_configs_captcha_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Captcha_Redis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Captcha_Redis) ProtoMessage() {}

func (x *Captcha_Redis) ProtoReflect() protoreflect.Message {
	mi := &file_configs_captcha_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Captcha_Redis.ProtoReflect.Descriptor instead.
func (*Captcha_Redis) Descriptor() ([]byte, []int) {
	return file_configs_captcha_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Captcha_Redis) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Captcha_Redis) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Captcha_Redis) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Captcha_Redis) GetDb() int32 {
	if x != nil {
		return x.Db
	}
	return 0
}

func (x *Captcha_Redis) GetKeyPrefix() string {
	if x != nil {
		return x.KeyPrefix
	}
	return ""
}

var File_configs_captcha_proto protoreflect.FileDescriptor

var file_configs_captcha_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x1b,
	0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x02, 0x0a, 0x07,
	0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x34, 0x0a,
	0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0xba, 0x48, 0x11, 0x72, 0x0f, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x52, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x52, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x69, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x63,
	0x68, 0x61, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x52, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x1a,
	0x83, 0x01, 0x0a, 0x05, 0x52, 0x65, 0x64, 0x69, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x64, 0x62, 0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x1a, 0x5a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_configs_captcha_proto_rawDescOnce sync.Once
	file_configs_captcha_proto_rawDescData = file_configs_captcha_proto_rawDesc
)

func file_configs_captcha_proto_rawDescGZIP() []byte {
	file_configs_captcha_proto_rawDescOnce.Do(func() {
		file_configs_captcha_proto_rawDescData = protoimpl.X.CompressGZIP(file_configs_captcha_proto_rawDescData)
	})
	return file_configs_captcha_proto_rawDescData
}

var file_configs_captcha_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_configs_captcha_proto_goTypes = []any{
	(*Captcha)(nil),       // 0: origadmin.configs.api.Captcha
	(*Captcha_Redis)(nil), // 1: origadmin.configs.api.Captcha.Redis
}
var file_configs_captcha_proto_depIdxs = []int32{
	1, // 0: origadmin.configs.api.Captcha.redis:type_name -> origadmin.configs.api.Captcha.Redis
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_configs_captcha_proto_init() }
func file_configs_captcha_proto_init() {
	if File_configs_captcha_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_configs_captcha_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_configs_captcha_proto_goTypes,
		DependencyIndexes: file_configs_captcha_proto_depIdxs,
		MessageInfos:      file_configs_captcha_proto_msgTypes,
	}.Build()
	File_configs_captcha_proto = out.File
	file_configs_captcha_proto_rawDesc = nil
	file_configs_captcha_proto_goTypes = nil
	file_configs_captcha_proto_depIdxs = nil
}
